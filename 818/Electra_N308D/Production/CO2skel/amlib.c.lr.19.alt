/*  Cut and Paste the next line.
:set tabstop=4
-------------------------------------------------------------------------
OBJECT NAME:	amlib.c

FULL NAME:	

ENTRY POINTS:	SetComputeFunctions()
				sadifr()
				slatc()
				sxnoym()

STATIC FNS:		none

DESCRIPTION:	Template for AMLIB std & user directories.

INPUT:			

OUTPUT:			

REFERENCES:		none

REFERENCED BY:	compute.c

COPYRIGHT:		University Corporation for Atmospheric Research, 1993,1994
-------------------------------------------------------------------------
*/

#include "define.h"
#include <math.h>


/* Step 4: To appease the compiler, place all AMLIB function names here.
 * By convention, AMLIB functions start with the letter 's'.  These should
 * be the same names you used in steps 2 & 3.
 */
void	sco(), scmode(), scocal(), scozro(), scocor(), sxco2c(), sxnom();


/* Step 1: List variables to pass through unaltered by default.  HOUR,
 * MINUTE & SECOND are mandatory.  NULL must be last.
 */
char	*passThrough[] = 
	{
	"HOUR",
	"MINUTE",
	"SECOND",
	"XCO2P",
	"XCO2T",
	"MR",
	NULL
	};


/* Step 2: New variables get added here.  Also add existing variables that
 * you would like to enter additional processing for.  Remove the examples
 * given below, leaving the "NULL, NULL" line in.  Make sure to leave off
 * the parentheses from the function names.
 */
DERVAR	derivftns[] =
	{
	"XCO2C",	sxco2c, 
	"CO",		sco, 
	"CMODE",	scmode, 
	"COCAL",	scocal, 
	"COZRO",	scozro, 
	"COCOR",	scocor, 
	NULL,		NULL
	};


/* Step 3: Create AMLIB functions here.  Use these examples as templates.
 * First example is one of modifying an existing variable (ADIFR).  The
 * second example is of a new variable, using 2 existing inputs.  The third
 * example is more complex, using high-rate data.  You want one function
 * for each variable output, do NOT have one function outputting several
 * variables.  However you may use the same function for multiple variables.
 * Each of these functions will be called once per second of data, so if
 * you are dealing with high-rate data or vector data, make sure you handle
 * all the samples for a given second.
 */

static long	mindex[3] = {0, 0, 0};

/* -------------------------------------------------------------------- */
void sco(varp)
VARTBL	*varp;		/* Information about current variable	*/
{
	NR_TYPE	co;

	/* Get current value of CO.
	 */
	mindex[0] = CurrentInputRecordNumber;
	ncvarget1(InputFile, varp->inVarID, mindex, (void *)&co);

	co = -9999;

	/* Write out new CO
	 */
	mindex[0] = CurrentOutputRecordNumber;
	ncvarput1(OutputFile, varp->outVarID, mindex, (void *)&co);

}	/* END SCO */

/* -------------------------------------------------------------------- */
void scmode(varp)
VARTBL	*varp;		/* Information about current variable	*/
{
	NR_TYPE	cmode;

	/* Get current value of CMODE.
	 */
	mindex[0] = CurrentInputRecordNumber;
	ncvarget1(InputFile, varp->inVarID, mindex, (void *)&cmode);

	cmode = -9999;

	/* Write out new CMODE
	 */
	mindex[0] = CurrentOutputRecordNumber;
	ncvarput1(OutputFile, varp->outVarID, mindex, (void *)&cmode);

}	/* END SCMODE */

/* -------------------------------------------------------------------- */
void scocal(varp)
VARTBL	*varp;		/* Information about current variable	*/
{
	NR_TYPE	cocal;

	/* Get current value of COCAL.
	 */
	mindex[0] = CurrentInputRecordNumber;
	ncvarget1(InputFile, varp->inVarID, mindex, (void *)&cocal);

	cocal = -9999;

	/* Write out new COCAL
	 */
	mindex[0] = CurrentOutputRecordNumber;
	ncvarput1(OutputFile, varp->outVarID, mindex, (void *)&cocal);

}	/* END SCOCAL */

/* -------------------------------------------------------------------- */
void scozro(varp)
VARTBL	*varp;		/* Information about current variable	*/
{
	NR_TYPE	cozro;

	/* Get current value of COZRO.
	 */
	mindex[0] = CurrentInputRecordNumber;
	ncvarget1(InputFile, varp->inVarID, mindex, (void *)&cozro);

	cozro = -9999;

	/* Write out new COZRO
	 */
	mindex[0] = CurrentOutputRecordNumber;
	ncvarput1(OutputFile, varp->outVarID, mindex, (void *)&cozro);

}	/* END SCOZRO */

/* -------------------------------------------------------------------- */
void scocor(varp)
VARTBL	*varp;		/* Information about current variable	*/
{
	NR_TYPE	cocor;

	/* Get current value of COCOR.
	 */
	mindex[0] = CurrentInputRecordNumber;
	ncvarget1(InputFile, varp->inVarID, mindex, (void *)&cocor);

	cocor = -9999;

	/* Write out new COCOR
	 */
	mindex[0] = CurrentOutputRecordNumber;
	ncvarput1(OutputFile, varp->outVarID, mindex, (void *)&cocor);

}	/* END SCOCOR */

/* -------------------------------------------------------------------- */
void sxco2c(varp)
VARTBL	*varp;		/* Information about current variable	*/
{
	NR_TYPE	xco2c, hour, minute, second, xco2p, xco2s, xco2t, mr;

	static bool	first_time = TRUE;
	static int	inVarID[8];
	static float	driftrate, time, w, x;

	if (first_time)
		{
		/* Obtain ID's of input variables.
		 */
		inVarID[0] = ncvarid(InputFile, "XCO2C");
		inVarID[1] = ncvarid(InputFile, "HOUR"); 
		inVarID[2] = ncvarid(InputFile, "MINUTE"); 
		inVarID[3] = ncvarid(InputFile, "SECOND"); 
		inVarID[4] = ncvarid(InputFile, "XCO2P");
		inVarID[5] = ncvarid(InputFile, "XCO2S");
		inVarID[6] = ncvarid(InputFile, "XCO2T");
		inVarID[7] = ncvarid(InputFile, "MR");
		first_time = FALSE; 
		}

	/* Get current values of inputs.
	 */
	mindex[0] = CurrentInputRecordNumber;
	ncvarget1(InputFile, inVarID[0], mindex, (void *)&xco2c);
	ncvarget1(InputFile, inVarID[1], mindex, (void *)&hour);
	ncvarget1(InputFile, inVarID[2], mindex, (void *)&minute);
	ncvarget1(InputFile, inVarID[3], mindex, (void *)&second);
	ncvarget1(InputFile, inVarID[4], mindex, (void *)&xco2p);
	ncvarget1(InputFile, inVarID[5], mindex, (void *)&xco2s);
	ncvarget1(InputFile, inVarID[6], mindex, (void *)&xco2t);
	ncvarget1(InputFile, inVarID[7], mindex, (void *)&mr);

/* insert manipulation code */
	driftrate = 0.04762;
	time = hour*60 + second/60 + minute - 930;
	w = 29*mr/(18-0.011*mr)/1000 + 1;
	x = (xco2s)+(1013-xco2p)*0.002;
	xco2c = x*(146.08+x*(11.167+x*(6.7154+x*(-0.89997+x*(0.059722)))));
	xco2c = xco2c*w*pow((273.15+xco2t)/309.05,1.5);
	xco2c = xco2c*(1.0543-0.00012*time) - 1.009535+0.00317*time;
/* Write out new variable.
 */
	mindex[0] = CurrentOutputRecordNumber;
	ncvarput1(OutputFile, varp->outVarID, mindex, (void *)&xco2c);

}	/* END SXCO2C */

/* -------------------------------------------------------------------- */
void sxnoym(varp)
VARTBL	*varp;		/* Information about current variable	*/
{
	NR_TYPE	xnoym, xno[50], xnoy[50];
	long	start[3], count[3];
	int		i;

	static bool	first_time = TRUE;
	static int	inVarID[2];

	if (first_time)
		{
		/* Obtain ID's of input variables.
		 */
		inVarID[0] = ncvarid(InputFile, "XNO");
		inVarID[1] = ncvarid(InputFile, "XNOY");

		first_time = FALSE;
		}


	/* Example to get 50 samples of 1hz data

	start[0] = CurrentInputRecordNumber - 25,	start[1] = start[2] = 0;
	count[0] = 50, count[1] = 1,	count[2] = 0;
*/

	/* Example to get 50 samples of 50hz data

	start[0] = CurrentInputRecordNumber,		start[1] = start[2] = 0;
	count[0] = 1, count[1] = 50,	count[2] = 0;
*/

	/* Get current values of inputs.
	 */
	ncvarget(InputFile, inVarID[0], mindex, (void *)xno);
	ncvarget(InputFile, inVarID[1], mindex, (void *)xnoy);


	for (i = 0; i < 50; ++i)
		printf("%6.1f ", xno[i]);

	printf("\n");

	for (i = 0; i < 50; ++i)
		printf("%6.1f ", xnoy[i]);

	printf("\n");


	mindex[0] = CurrentOutputRecordNumber;
	ncvarput1(OutputFile, varp->outVarID, mindex, (void *)&xnoym);

}	/* END SXNOYM */

/* -------------------------------------------------------------------- */
/* Leave this function alone.
 */
void SetComputeFunctions()
{
	register int	i, indx;

	for (i = 0; derivftns[i].Compute; ++i)
		if ((indx = SearchTable(Variable,nVariables,derivftns[i].Name)) != ERR)
			Variable[indx]->Compute = derivftns[i].Compute;

}	/* END SETCOMPUTEFUNCTIONS */

/* END AMLIB.C */
