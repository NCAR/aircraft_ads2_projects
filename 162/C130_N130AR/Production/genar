#! /bin/csh -f
#
#   Script to create an arch.proj# c-shell script file from the data
#    available in the netCDF data files in the $PROD_DATA directory.
#    The script file is put in the user's current working directory and
#    will replace an extant version if it is not write-protected.
#
#    * * * * * * * * * * * * * * * * * * * * * * * * * *
#    *  Copyright 1995, 1998,  University Corporation  *
#    *  for Atmospheric Research, All Rights Reserved. *
#    * * * * * * * * * * * * * * * * * * * * * * * * * *
#
#  Written by Ronald L. Ruth on 23-4 March 1995
#  Revision  0 by RLR                                            24 Mar 1995
#  Revision  1 by RLR (change output file name to arch.proj#
#                   and use output file shell variable $TURBRT)  29 Mar 1995
#  Revision  2 by RLR (change hard-wired HRT to shell variable)  12 Apr 1995
#  Revision  3 by RLR (change how $PROD_DATA is handled and ask
#             user before overwriting an extant arch.$proj file   1 May 1995
#  Revision  4 by RLR (Use new lower-case file names)            20 Oct 1995
#  Revision  5 by RLR (MSS file saved under name=RAF and
#                                                 proj=41113009  22 Feb 1996
#  Revision  5a by RLR (temporary to write to a "NEW" subdir.)   21 May 1998
#
#  Requirements:
#   PROD_DATA -- Environment variable having netCDF data file directory
#   ncdump    -- netCDF dump utility
#   sed       -- UNIX stream editor
#   grep      -- UNIX search for string
#   ls        -- UNIX list files
#
#   Note:  For the script to be complete, all the netCDF files must
#            exist in the $PROD_DATA directory, and all must follow
#            a standard naming convention.  The naming convention is:
#              pppXfnn[s][h].cdf
#              where:  ppp is the 3-digit project number
#                        X is r, f or t (research, ferry or test)
#                        f is "f"
#                       nn is the flight number
#                      [s] is a possible segment letter (capitalized)
#                      [h] is a possible HRT (high-rate) indicator
#            There is one ambiguous case:  pppXfnnh.cdf.  The letter h may
#            indicate an LRT segment or an HRT file without a segment.
#            A test must be made on each of these occurrences to determine
#            if HRT data exist in the file.  At present, that means reading
#            the data file header and searching for the string with the
#            NIMBUS Predefined High Rate (HRT):
#               OutputRate = $HRT
#            If the string exists, then the file is HRT, else it is LRT.
#
#            This ambiguity can cause a problem if a segment H occurs for
#            a low-rate processed file, and the user does not abide by the
#            naming rules for high-rate files.  One could use the same name
#            for both and overwrite a valid data file.  Care is obviously
#            needed to avoid this situation.
#
#          Further editing of the generated script file may be necessary.
#
#  W A R N I N G:  The fiscal year is manually set in this script if it does
#                  not appear in the proj.info file in the $proj directory
#                  or if the proj.info file is missing.  It would be nice
#                  if there were an easy way to determine it independently.
#
#  usage:  genar <projno>
#
#
#     * * * * * * * * * * * * * * *
#    *                             *
#   *  Executable code starts here  *
#    *                             *
#     * * * * * * * * * * * * * * *
#
onintr abort
#
if ($#argv < 1) then
  echo "   usage:  genar <projno>"
  exit 1
endif
set proj = $argv[1]
#
echo ""
echo "$0"
echo " Script to create/replace an arch.$proj file in your present working"
echo "  directory using netCDF files in the directory $PROD_DATA."
echo ""
echo " Report bugs or give questions to Ron Ruth (ron@raf.atd.ucar.edu)."
set rev = "Revision 5a"
echo "     $rev   RLR  980521"
echo ""
#
#  Get started
#
#  Set NIMBUS Predefined High Rate (HRT)
set HRT = 25
#  Set NIMBUS Production Data Directory
set sdir = '$PROD_DATA'
#
#  Set boilerplate for nrnet command string
set nrnet1 = 'echo nrnet msput $SDIR/'$proj
set nrnet2 = "l df=tr r flnm=/RAF"
set nrnet3 = "rtpd=4095 name=RAF proj=41113009 w=RAFDMG mvn=CTRAFDMG"
#
#  Check for extant arch.$proj file
if (-e arch.$proj) then
  retry:
  echo -n " File arch.$proj already exists.  Overwrite (y,n, [r]=n)? "
  set input = $<
  if ($input == "") set input = n
  switch ($input)
    case [yY]:
      breaksw
    case [nN]:
     echo " Job abandoned."
     exit 1
      breaksw
    default
      goto retry
  endsw
endif
#
pushd $PROD_DATA >& /dev/null
#
#  Find the netCDF data files
ls ${proj}?f??.cdf >& /dev/null
set result1 = $status
if ($result1 == 0) set files1 = `ls ${proj}?f??.cdf`
ls ${proj}?f??[a-z].cdf >& /dev/null
set result2 = $status
if ($result2 == 0) set files2 = (`ls ${proj}?f??[a-z].cdf`)
ls ${proj}?f??[a-z]h.cdf >& /dev/null
set result3 = $status
if ($result3 == 0) set files3 = (`ls ${proj}?f??[a-z]h.cdf`)
#  Check results of search
if ( $result1 != 0 && $result2 != 0 && $result3 != 0 ) then
  echo No netCDF files match the standard naming conventions for this project.
  goto quit
endif
#
popd > /dev/null
set projname = no
#
#  Get project information
set pfile = $LOCAL/proj/$proj/Production/proj.info
if (-r $pfile) then
  set pj = `grep Information $pfile`
  @ presult = $status
  set pj = `echo $pj | sed "s/Information for Project //"`
  @ presult = $presult + $status
  set fy = `grep FY $pfile`
  @ presult = $presult + $status
  set fy = `echo $fy | sed "s/FY=//"`
  @ presult = $presult + $status
  set SC = `grep 'Scientist(s):' $pfile`
  @ presult = $presult + $status
  shift SC
else
#  One could choose to read header from one file and infer the fiscal year
#   from that flight's date, but it will not be definitive, because the
#   flight's date may not determine the project's fiscal year.
  set presult = 1
  set fy = 1995
  set pj
  set SC
  echo "Warning:  Could not access project's proj.info file, so please check"
  echo "           fiscal year and project name in file arch.$proj."
endif
#
#  Write out boiler plate
#
echo "#! /bin/csh -f" >! arch.$proj
if ($status != 0) then
  echo Problem writing file arch.$proj
  goto quit
endif
#
echo "#" >> arch.$proj
echo "#  archive NIMBUS netCDF output files for $pj ($SC)" >> arch.$proj
echo "#" >> arch.$proj
set now = `date`
echo "#  File created by '$0' $rev on $now" >> arch.$proj
echo "#" >> arch.$proj
echo "date" >> arch.$proj
echo "#" >> arch.$proj
echo "set YEAR = $fy" >> arch.$proj
echo "set PROJ = $proj" >> arch.$proj
echo "set SDIR = $sdir" >> arch.$proj
echo "#" >> arch.$proj
#
@ count = 0
#
#  Case #1, LRT without segments (assumption from file-naming convention)
if ($result1 == 0) then
  set files = (`echo $files1 | sed "s/$proj//g"`)
  echo "#" >> arch.$proj
  echo set TURBRT = LRT >> arch.$proj
  echo "#" >> arch.$proj
  @ num = 0
  foreach file ($files)
    @ num ++
    @ count ++
    set ofile = `echo $file | sed "s/\.cdf//"`
    set ofile = `echo $ofile | tr '[a-z]' '[A-Z]'`
    echo $nrnet1$file $nrnet2/\$YEAR/\$PROJ/NEW/\$TURBRT/${ofile}.cdf $nrnet3 >> arch.$proj
  end
  echo "#" >> arch.$proj
endif
#
#  Case #2, LRT with segments or HRT without segments
#    Need to check HRT/LRT for each file named ###rf##h.cdf
#    If string "OutputRate = $HRT" appears in its header, then file is HRT.
#    If file is HRT, then the h needs to be removed for the archived file
if ($result2 == 0) then
  set files = (`echo $files2 | sed "s/$proj//g"`)
  @ num = 0
  set trate = low
  foreach file ($files)
    @ num ++
    @ count ++
#  Find output rate for this file
    set test = `echo $file | grep -c 'h.cdf'`
    if ($test == 0) then
      if ($trate != "low") then
        set trate = low
        echo "#" >> arch.$proj
        echo set TURBRT = LRT >> arch.$proj
        echo "#" >> arch.$proj
      endif
      set ofile = `echo $file | sed "s/\.cdf//"`
      set ofile = `echo $ofile | tr '[a-z]' '[A-Z]'`
      echo $nrnet1$file $nrnet2/\$YEAR/\$PROJ/NEW/\$TURBRT/${ofile}.cdf $nrnet3 >> arch.$proj
    else
      set line = `ncdump -h $PROD_DATA/$proj$file | grep -c "OutputRate = $HRT"`
      if ($line == 0) then
        if ($trate != "low") then
          set trate = low
          echo "#" >> arch.$proj
          echo set TURBRT = LRT >> arch.$proj
          echo "#" >> arch.$proj
        endif
        set ofile = `echo $file | sed "s/\.cdf//"`
        set ofile = `echo $ofile | tr '[a-z]' '[A-Z]'`
        echo $nrnet1$file $nrnet2/\$YEAR/\$PROJ/NEW/\$TURBRT/${ofile}.cdf $nrnet3 >> arch.$proj
      else
        if ($trate != "high") then
          set trate = high
          echo "#" >> arch.$proj
          echo set TURBRT = HRT >> arch.$proj
          echo "#" >> arch.$proj
        endif
        set ofile = `echo $file | sed "s/h\.cdf//g"`
        set ofile = `echo $ofile | tr '[a-z]' '[A-Z]'`
        echo $nrnet1$file $nrnet2/\$YEAR/\$PROJ/NEW/\$TURBRT/${ofile}.cdf $nrnet3 >> arch.$proj
      endif
    endif
  end
  echo "#" >> arch.$proj
endif
#
#  Case #3, HRT with segments
if ($result3 == 0) then
  set files = (`echo $files3 | sed "s/$proj//g"`)
  set files = `echo $files | sed "s/h\.cdf/.cdf/g"`
  echo "#" >> arch.$proj
  echo set TURBRT = HRT >> arch.$proj
  echo "#" >> arch.$proj
  @ num = 0
  foreach file ($files)
    @ num ++
    @ count ++
    set ofile = `echo $file | sed "s/\.cdf//"`
    set ofile = `echo $ofile | tr '[a-z]' '[A-Z]'`
    echo $nrnet1$file $nrnet2/\$YEAR/\$PROJ/NEW/\$TURBRT/${ofile}.cdf $nrnet3 >> arch.$proj
  end
  echo "#" >> arch.$proj
endif
echo "exit" >> arch.$proj
echo "#" >> arch.$proj
echo "#  Job(s) submitted on " >> arch.$proj
echo "#" >> arch.$proj
#
echo " Script will set up jobs to archive $count netCDF files."
echo ""
#
#  Future enhancement (when running this script isn't so dangerous before
#    first checking it out for accuracy)
chmod a+x arch.$proj
echo " Done."
echo " Check the file 'arch.$proj' for accuracy.  When executed as generated, "
echo '  it will echo the "nrnet" commands to your screen.  Before this file '
echo "  will actually submit the archive jobs for these data, it must be edited"
echo '  to delete the "echo"s preceding the "nrnet" commands.'
echo '  ("vi" command to use is  :%s/^echo// )'
echo ""
exit
#
abort:
onintr -
#
quit:
echo " Quitting.  You may want to delete the file 'arch.$proj' (if it exists),"
echo "             since it would be incomplete."
exit 1
