Automated Ground Processing Script Documentation
"gndproc"  Version 2
  by Ron Ruth
   (rev. 1)    26 Jul 2002
   (rev. 1.1)  17 Apr 2003
   (rev. 1.2)  15 May 2003
   (rev. 1.3)  20 May 2003
   (rev. 1.4)   9 Jun 2003

The c-shell script "gndproc" is run on an RAF ground-processing system during
a field project to copy files from an aircraft's removable disc drive to the
ground system's local data data disc partition.  In addition, other specific
jobs can be done:
 - run the nimbus processor to produce a netCDF file;
 - run the n2asc program to produce an ASCII data file from a netCDF file;
 - run a file-transfer program to copy a file to a remote destination machine
    (assuming a network connection is active).

The script does its work based upon a series of files (one configuration
file and a number of job files) all located in a project's Production/gndproc
subdirectory.

Brief Explanation of Script's Job Flow
--------------------------------------
The script has one built-in job that always will be performed: it will search
the removable drive for any NEW raw data files that are not on the local data
disc and copy them over.  If no new files are found, then the script will
quit and not do any other jobs.  Therefore, this script cannot be used, for
example, to regenerate a lost netCDF file.  (The raw ADS file must be recopied
by removing it from or renaming it on the local data disc.  If one deletes a
file, however, make sure a copy of it exists on the removable drive so it can
be recopied.)

Once the new files are copied to the local disc, the removable drive will
be dismounted and can be taken out of the chassis with no further need for
user interaction.  From this point on, operation of the script is governed
by a series of job files that are located in the project's Production/gndproc
subdirectory.  (Example templates can be found at the end of the configuration
file, gndproc.conf.)  These files must have a specific naming convention;
otherwise the script will not recognize them.  The name is of the form:
type_sourcefile_user, where "type" is the job's type (nimbus, n2asc, copy),
"sourcefile" is the type of source file needed for the job (ads, cdf, asc)
and "user" is a name used to identify the output file's recipient.  (The
RAF job file names have the "user" name set to "raf", but the standard
output files for RAF have no "user" identity and are given standard names.)

Steps to Set Up Automated Processing For a Project with "gndproc"
-----------------------------------------------------------------
A script called "create_gndproc" is used to populate the ground-processing
files needed for a project.  The Project's directory must exist as well as
its Production subdirectory.  This script can be run only by the "nimbus"
login.
 - Log in as "nimbus"
 - Make sure that the project directory has a "Production" subdirectory
 - Run the script "create_gndproc" with the project's 3-digit number
     create_gndproc <projno> (copies standard versions of needed files)
 - Change to the project's gndproc subdirectory
     cd $PROJ_DIR/<projno>/Production/gndproc
 - Make sure all the files in this directory have write permission enabled
   for both user and group (If not, use the next command.)
     chmod 664 *
 - For all the following steps, the "nimbus" login is not required
 - Edit the configuration file (See "Editing the Configuration File for a
   Project" below for more details.)
     vi gndproc.conf
   - The script will send a completion message to everyone in the email
     list (e_names).  Note the comma instead of white space for multiple
     email addresses.  (This can be defeated if a firewall computer won't
     allow sending email.)
   - Set the raw data file types that will be generated for the project.
 - Edit the user instruction files, if needed.  (These tell a user how and
    when to mount and dismount the removable disc drive.  See "Instruction
    Files" below for more details.)
     vi Instructions_1 Instructions_2
 - Use the job file templates at the end of the configuration file to create
    the needed job files for this project.  These files need to be saved in
    the same "gndproc" subdirectory.  Make changes to settings as appropriate
    (e.g., specify the nimbus setup file to be used).  See "Generating Job
    Files for a Project" and "Setting Up File Copy Jobs" below for more
    details.
   - add the "fmod" setting to the "copy_set" line only if an unique data
      file is to be referenced.  This is not needed for standard RAF files.
      If "fmod" is needed, please give it a short character string, since
      it will become part of the file's name.
   - if "fmod" is used for "nimbus" and/or "n2asc," then remember to use
      the same "fmod" character string for any attendant "copy" job files.
 - Create nimbus setup files, if necessary.  Be sure to specify each setup
    file name in its associated job file.  See "Creating a Nimbus Setup File"
    below for more details.
One can use the BAMEX project directory as an example:
   $LOCAL/proj/303/Production/gndproc

Editing the Configuration File for a Project
--------------------------------------------
The "gndproc' script's configuration file is divided into three sections.
The first section has settings applicable to a project.  The second governs
the general configuration of the script and probably won't need to be changed
unless the Ground Station computer's configuration is changed.  The third
section has example job-file templates.

Section one has two "Project-Related Configuration" settings.  The first one
is the list of email addresses for sending log files.  (Depending on how the
network is set up, it may not be possible to send email off site as was the
case for BAMEX.)  The second tells the script what types of raw data files
will be present (ADS, PMS-2D, MCR) on the removable disc drive.

The second section, labeled "General Configuration," has many settings,
including:
 - a list of program aliases (used if a special version of a program or
    Linux/Unix command is needed.)
 - directory paths for the removable drive and local destination data
 - file names the script will manage
 - file name extents (e.g., nc == netCDF)
 - job types the script can handle (nimbus, n2asc and copy, at present)

The configuration file has extensive comment lines to help explain the
meaning of each setting.

Instruction Files
-----------------
Two files (Instructions_1, Instructions_2) are used to give a user
instructions for handling the removable disc drives.  The first one is used
before the data are copied from it; the second one is used after all copies
have been made.  These files may have to be created and/or modified for each
project.  (The default files were used for IHOP_2002 and modified slightly
for BAMEX.)

Generating Job Files for a Project
----------------------------------
Create a new job file using one of the templates in the "gndproc.conf" file.
Each job file has a number of settings:
 - transformation jobs (nimbus, n2asc)
  - name of program to be executed (e.g., nimbus)
  - the executing program's settings, if applicable
   - setup file (e.g., a nimbus setup file)
   - processing rate (to override a nimbus setup file's setting)
   - output format (e.g., a n2asc variable list)
  - the user's ID which will be incorporated into the output file name
     (if this is special user file and not a standard RAF file)
 - copy jobs
  - command to use for copying (scp, ftp, etc.)
  - gzip file before copy (yes/no)?
  - destination machine's IP address
  - destination login name
  - destination data path on destination machine
  - the user's ID which has been incorporated into the output file name
     (if not a standard RAF file)

The settings themselves are defined by the "copy_set" setting at the beginning
of the file.  Each setting's name is defined here.  Subsequent lines have a
setting name on the left with the value of the setting on the right after an
equals sign (=).  Settings can be ignored by putting the comment character (#)
at the beginning of the line.  However, all settings defined by the "copy_set"
must appear uncommented in the file.  If an optional setting will not be used,
remove it from the "copy_set" line.  (It is then ignored, even if it has not
been commented out.)

The "fmod" (user ID) setting in a job file will be used to uniquely identify a
file.  For example, if someone from RTF wants a special nimbus netCDF file, it
can be generated with an unique name, separate from the standard file that is
always generated for RAF.

Setting Up File Copy Jobs
-------------------------
One of the main jobs for this script is to transfer files off site.  At
present, there are two ways to do this: "scp" and "ftp."  ("sftp" has not
yet been set up for this script.)  

 1)  "scp" (version 2) 
   For "scp" to work, security key files must exist or be generated for the
   communicating machines.  If the ground station has keys and you don't
   think they need to be regenerated, then do the following:
     a)  Log in to the ground station as the user who will run the script.
     b)  Change to the user's ".ssh" subdirectory:
          cd ~/.ssh
     c)  See if security key files exist:
          ls id_dsa*
         You should see the files:
          id_dsa
          id_dsa.pub
     d)  If they exist, go to step h).
   If you want to regenerate the security key files or if one or both files
   don't exist, do the following:
     e)  From the user's home directory, create the subdirectory ".ssh" if
         it does not already exist:
          mkdir .ssh
     f)  Change to the ".ssh" subdirectory:
          cd .ssh
     g)  Run the following:
          ssh-keygen -d
         The program will issue the following prompts:
          "Enter file in which to save the key"
          "Enter passphrase (empty for no passphrase):"
          "Enter same passphrase again:"
         For all of these, use the [ENTER] key to select the default file
          and generate no passphrase.
         The program will then generate two keys, one of which is the
          public key file in the .ssh subdirectory:  id_dsa.pub
     h)  This key file needs to be sent to the login for each destination
         machine.  (As of May 2003, RAF's machine's name is "linus.")  So:
          scp id_dsa.pub <login>@<machine>:.ssh/id_dsa.pub.<ID>
         where:  <login> is the login to be used on the destination machine
               <machine> is the destination machine's name
                    <ID> is a tag you add to uniquely identify the file.
         You probably will be asked for the <login> password to copy the file
         to the destination machine.  If the .ssh directory does not exist on
         the destination machine, then copy the file temporarily to the home
         directory.  (The .ssh directory will need to be created later.)
     i)  The next step is to log on to the destination machine:
          ssh <login>@<machine>
         Again, you probably will be asked for a password.
     j)  If the .ssh directory does not exist, then create it:
          mkdir ~/.ssh
     k)  Change permissions to allow write only by owner:
          chmod 755 ~/.ssh
     l)  Change to the .ssh subdirectory:
          cd .ssh
     m)  Move the copied file (id_dsa.pub.<ID>) to the .ssh directory if it
         was put in the login's home directory:
          mv ../id_dsa.pub.<ID> .
     n)  Add the new public key file to the "authorized_keys2" file.  If the
         "authorized_keys2" file already exists:
          cat id_dsa.pub.<ID> >> authorized_keys2
         Otherwise:
          cp id_dsa.pub.<ID> authorized_keys2
     o)  Log out of the destination machine.
     p)  The destination login's .ssh directory may need an entry in the
         "known_hosts2" file.  If one does not exist, one can accomplish this
         by logging in to the groundstation from the destination machine:
          ssh -l user renegade
         You will be asked whether to continue login in, and if you say "yes,"
         it will add the machine to the known_hosts2 file.
     q)  The scp function should now be set up to allow file copies without
         having to interactively enter a password.  Test it with some dummy
         files to make sure it works.
     r)  There is an outside chance you may have to add the groundstation's
         login/machine-name pair to the destination machine's ~/.shosts file.
     s)  If, by chance, the destination machine is using ssh version 1
         instead of version 2, then file transfers cannot be done using this
         procedure.  (Seek system administration help.)

   The following "copy_set" options pertain to the "copy" job file
   (r = required, o = optional):
    a) r copy_type = scp
    b) o copy_p    = path name of scp program ((if missing, system's default
                         scp is used)
    c) o  zip      = yes, no (if missing, "no" is assumed)
    d) r login     = login name on destination machine
    e) r  dest      = full name of destination machine (IP address)
    f) r  ddp       = destination data path on destination machine
    g) o  fmod      = file name modifier for special data file

 2)  "ftp"
   For "ftp" to work with this script, "auto-login" needs to be enabled on the
   ground-processing machine in its present configuration.  (This may change
   in the future.)  The following "copy_set" options pertain to the "copy" job
   file (r = required, o = optional):
    a) r  copy_type = ftp
    b) o  copy_p    = path name of ftp program (if missing, system's default
                       ftp is used)
    c) o  zip       = gzip the file (yes, no); if missing, "no" is assumed
    d) r  login     = login name on destination machine
    e) r  pwd       = login password on destination machine
    f) r  dest      = full name of destination machine (IP address)
    g) r  ddp       = destination data path on destination machine
    h) o  fmod      = file name modifier for special data file

Setting Up "nimbus" and "n2asc" Jobs
------------------------------------
As with the copy job file, these job files have a list of settings followed
by their values.  For "nimbus" the list is called "nimbus_set," and for 
"n2asc" the list is called "n2asc_set."  The file template has detailed
comment lines to explain the various settings.

Creating a Nimbus Setup File
----------------------------
In a standard configuration, "nimbus" normally will be used to produce a
standard netCDF file.  Since, in this application, "nimbus" is run in batch
mode, a setup file must be created to specify, at least, the project number
and processing rate.  (It also can be used to generate a standard variable
list and/or to modify default settings.)  Do NOT specify input or output
file names in this file, since it is done automatically by the script at
run time.  If one or more special netCDF files needs to be created, a setup
file for each will be used to define the needed customization.  Setup files
should be put in the project's Production subdirectory.  Each full setup
file's name must be put in its associated job file.

--------
end (10 Jun 2003)


Enhancements to come??
----------------------
1) ability to handle new file types: CPI (.roi)
                                     pictures (.jpg, .gif, etc.)
2) ability (when run locally) to archive raw data files to the SCD Mass
    Store System (MSS) and ignore the "new file transfer" requirement
    (Uses the DCS command "msrcp").
RLR
Tue Jul 27 14:56:31 MDT 2004
