#! /bin/csh -f
#
#   Archive production netCDF data files for 2000-828 AESOP/TEXAQS-2000
#    using the new ATD directory path
#
#   Must be run from a project's Production subdirectory
#     (only "dmg" login allowed to archive from this script)
#
#  File adapted from file /jnet/local/proj/186/Production/atdarch.186
#    by Ron Ruth   13 October 2K
#
#   To find executable (non-comment) lines (from within `vi'), type:
#       /^[^#]
#
#  `vi' :map commands for annotating job completion:
#  :map g eea 
#  :map v AOK @ 
#
#
#  Check login (only "dmg" login allowed to run this script)
set user = `whoami`
if ($user == "dmg") then
   set dmg = "yes"
else
#  echo "${0}:  Only the 'dmg' login is allowed to run this script.  Quitting."
#  exit
   set dmg = "no"
endif
#
#  Get setup information for this project
@ plat = `pwd | sed -e "s/\(.*\)\([0-9][0-9][0-9]\)\(.*\)/\2/g"`
@ plat /= 100
if ($plat == 1) set PLATFORM = N130AR
if ($plat == 8) set PLATFORM = N308D
set YEAR = `grep CY proj.info | sed -e "s/CY=//"`
set PROJ = `cat ../ProjectName`
#
#  set extent for Production NIMBUS netCDF file
set EXT = PNI.nc
#
# Set correct turbulence type
set TYPE = LRT
#set TYPE = HRT
#
#  set source directory
#set SDIR = $TEMP
set SDIR = $PROD_DATA
#set SDIR = $DATA_DIR
#
#  1st wave
#set SFILES = ( \
#828rf01.cdf \
#828rf02.cdf \
#828rf03.cdf \
#828rf04.cdf \
#828rf05.cdf \
#828rf06.cdf \
#828rf07.cdf \
#828rf08.cdf \
#828rf09.cdf \
#828rf10.cdf \
#828rf11.cdf \
#828rf12.cdf \
#828rf13.cdf \
#828rf14.cdf \
#)
#set DFILES = ( \
#RF01 \
#RF02 \
#RF03 \
#RF04 \
#RF05 \
#RF06 \
#RF07 \
#RF08 \
#RF09 \
#RF10 \
#RF11 \
#RF12 \
#RF13 \
#RF14 \
#)
#
#  2nd wave (after reprocessing on 1 February 2001)
set SFILES = ( \
828rf07.cdf \
828rf08.cdf \
828rf09.cdf \
828rf10.cdf \
828rf11.cdf \
828rf12.cdf \
828rf13.cdf \
828rf14.cdf \
)
set DFILES = ( \
RF07 \
RF08 \
RF09 \
RF10 \
RF11 \
RF12 \
RF13 \
RF14 \
)
#
#  3rd wave
#set SFILES = ( \
#)
#set DFILES = ( \
#)
#
#   th wave
#set SFILES = ( \
#)
#set DFILES = ( \
#)
#
#
#  Get started:
date
if ($#SFILES != $#DFILES) then
  echo " Number of source and destination file names don't match.  Quitting"
  exit 1
endif
#
set todo = $#SFILES
set num = 1
while ($num <= $todo)
  set SFILE = $SFILES[$num]
  set DFILE = $DFILES[$num]
  if (-r $SDIR/$SFILE) then
#
# Compose extended bitfile name
#  get flight date
    set line = `ncdump -h $SDIR/$SFILE | grep FlightDate`
    if ($status != 0) then
      echo Could not find FlightDate in netCDF file $file
      goto quit
    endif
#   Get rid of double quotes
    set line = `echo $line  | sed -e 's/\"//g'`
#   Get rid of time zone in date field, if extant
    set line = `echo $line | sed -e 's/UTC//'`
#   Test for styles #1 & 2
    if ($#line == 4) then
      set incnt1 = `echo $line[3] | wc -c`
      if ($incnt1 == 11) then
#   Style #1 (mm/dd/yyyy)
        set fltdate = `echo $line[3]`
      else if ($incnt1 == 10) then
#   Style #2 (" m/dd/yyyy)
        set fltdate = 0$line[3]
      else
        echo "Bug in script $0 decoding Case #1 flight date.  Notify author."
        goto quit
      endif
    else if ($#line == 5) then
      set incnt1 = `echo $line[3] | wc -c`
      set incnt2 = `echo $line[4] | wc -c`
      if ($incnt1 == 3 && $incnt2 == 7) then
#   Style #3, ( m/ d/yyyy)
        set fltdate = `echo 0$line[3]0$line[4]`
#   Style #4 (mm/ d/yyyy)
      else if ($incnt1 == 4 && $incnt2 == 7) then
        set fltdate = `echo $line[3]0$line[4]`
      else
#   Unknown date style
        echo "Bug in script $0 decoding Case #1 flight date.  Notify author."
        goto quit
      endif
    else
#   Unknown date style
      echo "Bug in script $0 decoding Case #1 flight date.  Notify author."
      goto quit
    endif
    set DATE = `echo $fltdate | awk -F/ '{print $3$1$2}'`
#
#  Get time interval
    set tline = `ncdump -h $SDIR/$SFILE | grep TimeInterval`
    if ($status != 0) then
      echo Could not find TimeInterval in netCDF file $file
      goto quit
    endif
    shift tline
    shift tline
    @ pass = 1
newtime1:
    echo $tline | grep , >& /dev/null
#   Check for multiple time intervals
    if ($status == 0) then
      set multtime = "yes"
    else
      set multtime = "no"
    endif
#  Set time interval
    set flttime = `echo $tline[1] | sed -e 's/\"//g'`
    if ($status != 0) then
      echo Could not decode TimeInterval in netCDF file $file
      goto quit
    endif
    set flttime = `echo $flttime | sed -e 's/-/\ /'`
    if ($status != 0) then
      echo Could not decode TimeInterval in netCDF file $file
      goto quit
    endif
    if ($multtime == "yes") then
      set flttime = `echo $flttime | sed -e 's/\,//'`
      if ($status != 0) then
        echo Could not decode multiple TimeInterval in netCDF file $file
        goto quit
      endif
    endif
    set ST = `echo $flttime[1] | awk -F: '{print $1$2$3}'`
    set ET = `echo $flttime[2] | awk -F: '{print $1$2$3}'`
#
#  Archive the file (if the "dmg" login)
    if ($dmg == "yes") then
      echo \
      nrnet msput $SDIR/$SFILE l df=tr r \
        flnm=/ATD/DATA/$YEAR/$PROJ/$PLATFORM/$TYPE/$DFILE.$DATE.${ST}_$ET.$EXT \
        rtpd=32767 name=RAF proj=41113009 w=RAFDMG
    else
      echo msput $SDIR/$SFILE l df=tr r \
        flnm=/ATD/DATA/$YEAR/$PROJ/$PLATFORM/$TYPE/$DFILE.$DATE.${ST}_$ET.$EXT \
        rtpd=32767 name=RAF proj=41113009 w=RAFDMG
    endif
    @ num ++
  else
    echo " Cannot access file $SDIR/$SFILE"
    exit 1
  endif
end
#
exit
#
#  MSS path for all bitfiles listed below:  /ATD/DATA/2000/AESOP/N308D/LRT/
#
#  1st wave
#  Job(s) submitted on Fri Oct 20 14:34:00 MDT 2000
# Sequence number = LN1670 -- RF01.20000816.170300_213040.PNI.nc -- OK @ 20 Oct 2000 14:35:53
# Sequence number = LN1701 -- RF02.20000818.173700_215344.PNI.nc -- OK @ 20 Oct 2000 14:35:48
# Sequence number = LN1734 -- RF03.20000820.215500_032155.PNI.nc -- OK @ 20 Oct 2000 14:36:00
# Sequence number = LN1767 -- RF04.20000823.163200_225126.PNI.nc -- OK @ 20 Oct 2000 14:36:05
# Sequence number = LN1800 -- RF05.20000825.162800_223225.PNI.nc -- OK @ 20 Oct 2000 14:52:20
# Sequence number = LN1833 -- RF06.20000827.172900_234826.PNI.nc -- OK @ 20 Oct 2000 14:52:38
# Sequence number = LN1864 -- RF07.20000828.164700_230508.PNI.nc -- OK @ 20 Oct 2000 14:52:31
# Sequence number = LN1895 -- RF08.20000830.152100_223616.PNI.nc -- OK @ 20 Oct 2000 14:52:41
# Sequence number = LN1926 -- RF09.20000901.145200_205515.PNI.nc -- OK @ 20 Oct 2000 14:59:25
# Sequence number = LN1957 -- RF10.20000903.154900_221933.PNI.nc -- OK @ 20 Oct 2000 14:59:32
# Sequence number = LN1988 -- RF11.20000906.153400_215826.PNI.nc -- OK @ 20 Oct 2000 14:59:46
# Sequence number = LN2019 -- RF12.20000907.155500_222600.PNI.nc -- OK @ 20 Oct 2000 14:59:36
# Sequence number = LN2050 -- RF13.20000910.155200_215822.PNI.nc -- OK @ 20 Oct 2000 15:05:31
# Sequence number = LN2081 -- RF14.20000913.155300_214101.PNI.nc -- OK @ 20 Oct 2000 15:05:27
#
#  2nd wave (after reprocessing on 1 February 2001)
#  Job(s) submitted on Fri Feb  2 11:37:45 MST 2001
# Sequence number = LN0103 -- RF07.20000828.164700_230508.PNI.nc -- OK @ 2 Feb 2001 11:41:34
# Sequence number = LN0134 -- RF08.20000830.152100_223616.PNI.nc -- OK @ 2 Feb 2001 11:43:37
# Sequence number = LN0167 -- RF09.20000901.145200_205515.PNI.nc -- OK @ 2 Feb 2001 11:40:21
# Sequence number = LN0202 -- RF10.20000903.154900_221933.PNI.nc -- OK @ 2 Feb 2001 11:40:24
# Sequence number = LN0238 -- RF11.20000906.153400_215826.PNI.nc -- OK @ 2 Feb 2001 11:45:26
# Sequence number = LN0271 -- RF12.20000907.155500_222600.PNI.nc -- OK @ 2 Feb 2001 11:46:20
# Sequence number = LN0302 -- RF13.20000910.155200_215822.PNI.nc -- OK @ 2 Feb 2001 11:44:10
# Sequence number = LN0333 -- RF14.20000913.155300_214101.PNI.nc -- OK @ 2 Feb 2001 11:48:42
#
#  3rd wave
#  Job(s) submitted on 
#
#   th wave
#  Job(s) submitted on 
#
#  Job(s) submitted on 
#
