#! /bin/csh -f
#
#  Archive digital camera photo files for 2006-145 MIRAGE
#   (Don't forget to archive the movies, too!)
#
#  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#  *  Copyright 2004, 2005, 2006                                             *
#  *  University Corporation for Atmospheric Research, All Rights Reserved.  *
#  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#
#  Notes:  1) Create a copy of, modify and run this script from a project's
#              "Production/archive" subdirectory.  This script runs only
#              under the "dmg" login.
#          2) All picture files have a ".jpg" extension to their names.
#          3) Make changes to the code if file-naming conventions change.
#             This includes (leading "/" means "search for string"):
#              /set delim
#              /set fdate
#              /set ftime
#              /set Smeta
#              /set Emeta
#              /set Locn
#              / set OFILE
#
#  Usage:
#    archcam.ppp -{a,r} [-p] [-t] [-i shsmss ehemes [-m]] [-v] [-d]
#      -a -- use /ATD/DATA/ directory path for archived MSS tar files
#      -r -- use /RAF/ directory path for archived MSS tar files
#      Note:  MUST choose either -a or -r for script to run
#      -p -- production mode (archive the files to the SCD Mass Store System
#             instead of echoing their names locally)
#      -t -- if set, create archive files with one hour's worth of data;
#            otherwise, create archive files with a specified maximum size,
#            presently 600MB (See internal setting MAXSIZ below.), or the
#            maximum number of tar files that can be handled, presently 4600
#            (See internal setting MAXTAR below.), whichever results in the
#            shorter file.
#      -i -- use time interval (shsmss to ehemes)
#             Note:  This option sets the -t flag to divide the time interval
#                    into synchronized, 1-hour segments (First and last time
#                    segments may be less than one hour long.)
#             WARNING:  If present, this flag and its associated times must
#                       appear together.
#      -m -- time interval starts after midnight (i.e., has a time rollover)
#      -v -- verbose mode
#      -d -- debug mode
#
#    Examples:  archcam.ppp -a -p -t                     <-- typical
#               archcam.ppp -a -p -t -i shsmss ehemes
#
#  For future changes/enhancements, search for this string --> ##########
#
##########
#
#  Enhancement requirement:  design a way to pick up where I left off in
#                            case the archiving is aborted for some reason
#                            (One can now use start and end times but it
#                            doesn't automatically handle a midnight rollover
#                            [needs a command-line argument flag])
#  Desired enhancement:  Automatically archive based on proj.info file which
#                         would have jpg files' directory path
#                        This depends a lot on how the jpg files are stored on
#                         local servers and any changes in file-name format.
#  Desired enhancement:  Acquire source camera file name format for automatic
#                         decoding (from proj.info file?) rather than having
#                         to hard-wire it for each project.
#
##########
#
#  This file copied and significantly modified from file
#    $JLOCAL/proj/125/Production/archive/archcpi.125
#   by Ron Ruth  17 June to 13 August 2004
#  Revised by RLR (modify for RICO's file-naming convention)        24 Feb 2005
#  Revised by RLR (choose hourly or maximum-size tar files)         28 Feb 2005
#  Revised by RLR (choose files by start and end time)               1 Mar 2005
#  Revised by RLR (choose /RAF/ or /ATD/DATA/ MSS directory)         2 Mar 2005
#  Revised by RLR (write tar file if @ last file reached)            8 Mar 2005
#  Revised by RLR (change all "rsh" to "ssh")                       28 Oct 2005
#  Revised by RLR (add TREX project format changes)                  8 Mar 2006
#  Revised by RLR (change some quit code and echo messages)         14 Mar 2006
#  Revised by RLR (allow after-midnight time interval)              20 Mar 2006
#  Revised by RLR (fix midnight rollover argument from -a to -m)     1 Aug 2006
#  Revised by RLR (update to use new directory paths)                1 Aug 2006
#  Revised by RLR (process list of flights; progress to log file)    4 Aug 2006
#
#  To find executable (non-comment) lines (from within `vi'), type:
#   /^[^#]
#
#
#      * * * * * * * * * * * * * * *
#     *                             *
#    *  Executable code starts here  *
#     *                             *
#      * * * * * * * * * * * * * * *
#
onintr abort
#  Set abnormal exit flag
@ xit = 1
#
#  Capture beginning time
set btime = `date`
#
#  Note:  RICO/MIRAGE: file names are of the form c130_fwd_yemoda_homise.jpg
#           where:  ye == 2-digit year (I'd prefer a 4-digit year)
#                   mo == month (00-12)
#                   da == day (00-31)
#                   ho == hour (00-23)
#                   mi == minute (00-59)
#                   se == second (00-59)
#   Example:    c130_fwd_041221_134807.jpg
#set Sdir = "/mnt/usb1/Camera"
#  Note:  RICO:  flight subdirectories in above path are of the form "135xf##"
#  Note:  MIRAGE:  flight subdirectories in above path are of the form "145xf##"
#set Sdir = "/data/c130/video"
#  Note:  RICO:  flight subdirectories in above path are of the form "##"
#
#set Sdir = "/scr/raf/beaton/Trex"
#  Note:  T-REX:  file names are of the form 503?fnn/yemoda-homise.jpg
#           where:   ? == either "t" or "r" (test or research)
#                   nn == 2-digit flight number
#                   ye == 2-digit year (I'd prefer a 4-digit year)
#                   mo == month (00-12)
#                   da == day (00-31)
#                   ho == hour (00-23) (UTC)
#                   mi == minute (00-59)
#                   se == second (00-59)
#         The camera's location is not included in the file's name,
#          therefore, it must be hard-wired.
#
#  Set local source directory
#set Sdir = $TEMP
#set Sdir = $DATA_DIR
#set Sdir = "/jnet/win_jef2/cpi/?"
#set Sdir = "/net/ftp/pub/archive/RAF-projects/$project/CPI"
set Sdir = "/scr/raf/beaton/Mirage"
#
#  Set local source subdirectory paths (SSdirs is list)
#   and corresponding destination MSS subdirectory paths (DSdirs is list)
#145ff01 \
#145ff02 \
#145rf01 \
#145rf02 \
#145rf03 \
#145rf04 \
#145rf05 \
#145rf06 \
#145rf07 \
#145rf08 \
#145rf09 \
set SSdirs = ( \
145rf10 \
145rf11 \
145rf12 \
)
#FF01 \
#FF02 \
#RF01 \
#RF02 \
#RF03 \
#RF04 \
#RF05 \
#RF06 \
#RF07 \
#RF08 \
#RF09 \
set DSdirs = ( \
RF10 \
RF11 \
RF12 \
)
#
#  Set MSS Read PassWorD if restricted access
#   (Don't forget to add notation in file $PROJ/archives/msfiles/directory_map)
set RPWD = ""
#set RPWD = "-rpwd readonly"
#
#
# --------------------------------------------------------------------------
#
#  Maximum tar file size (bytes) if archiving by size
@ MAXSIZ = 600000000     #  to easily fit on a 700MB CD-ROM
#
#  Maximum number of tar file arguments
#   (based on current file name convention's character length)
#   (This is probably an operating-system-dependent parameter.)
@ MAXTAR = 4600
#
# --------------------------------------------------------------------------
#
#  Check login (only "dmg" login allowed to run this script)
if ($?USER) then
  set user = $USER
else
  set user = `whoami`
endif
if ($user != "dmg") then
  echo "${0}:  Only the 'dmg' login is allowed to run this script."
  goto quit
endif
#
#  Check current directory
set cdir = `pwd | awk -F/ '{print $NF}'`
if ($cdir != "archive") then
  echo '  This script is not being run from the "archive" subdirectory.'
  goto quit
endif
#
#  Initialize
#   Temporary file names
set Flist = "$TMPDIR/archcam_files.$$"
set Tfile = "$TMPDIR/tarit.archcam.$$"
set Afile = "$TMPDIR/archcam_$$.tar"
#
#   File name delimiter (hypen or underscore)
#set delim = "-"
set delim = "_"
#
#   Run-time options (optional command-line arguments)
#    Tar files in groups of one-hour increments with boundaries on the hour
@ tartime = 0              #  Default is no (save files by size)
#    Use start and end times on command line
@ ti = 0                   #  Default is no (use all times available)
#    After-midnight flag (for rollover detection)
@ mr = 0                   #  Default is no (time interval starts < midnight)
#    Tar file no-purge flag (keep tar file after archiving to the MSS)
@ nopurge = 0              #  Default is no (purge tar file)
#    Verbose flag (output progress messages as script is running)
@ vb = 0                   #  Default is no (not verbose)
#    Debug flag (output copious debug messages)
@ db = 0                   #  Default is no (no debug messages)
#    ATD directory path specified
@ atdp = 0                 #  Default is no (not specified)
#    RAF directory path specified
@ rafp = 0                 #  Default is no (not specified)
#    Production flag (created tar files are to be archived to the MSS)
@ pd = 0                   #  Default is no (do not archive the tar files)
#
#  Get command-line arguments (if any)
#echo "  $#argv arguments:  $argv"
@ n = 0
foreach arg ($argv)
  @ n ++
#  echo "  Argument is: $arg"
  set ar = `echo $arg | sed -e "s/\-//"`
#   Save files one hour at a time instead of by tar file size?
  if ($ar == "t") then
    @ tartime = 1
    continue
  endif
#   Use time interval
  if ($ar == "i") then
    @ ti = 1
    @ nti = $n
    continue
  endif
#   After-midnight flag (for rollover detection)
  if ($ar == "m") then
    @ mr = 1
    continue
  endif
#   Verbose?
  if ($ar == "v") then
    @ vb = 1
    continue
  endif
#   Debug?
  if ($ar == "d") then
    @ db = 1
    continue
  endif
#   /ATD/DATA/ directory path?
  if ($ar == "a") then
    @ atdp = 1
    set char = "."
    continue
  endif
#   /RAF/ directory path?
  if ($ar == "r") then
    @ rafp = 1
    set char = "/"
    continue
  endif
#   Production?
  if ($ar == "p") then
    @ pd = 1
    continue
  endif
end
#
#  Output beginning time if verbose or debug
if ($db || $vb) then
  echo " $0 began running at $btime"
endif
#
#  Check for a data path
if (! $rafp && ! $atdp) then
  echo "  No MSS destination path flag chosen"
  echo "   Must choose either -r (/RAF path) or -a (/ATD/DATA) flag"
  echo '   See "Usage" at beginning of '$0
  goto quit
endif
#
#  Check if both data paths were chosen
if ($rafp && $atdp) then
  echo "  Found both -r  (/RAF path) and -a (/ATD/DATA) command-line options"
  echo "   Must choose either -a (/ATD/DATA path) or -r (/RAF path)"
  goto quit
endif
#
#  Decode requested start and end times, if flags are set
if ($tartime && $ti) then
  @ nti ++
  set RStime = $argv[$nti]
  set RSho = `echo $RStime | sed -e 's/....$//'`
  set RSmi = `echo $RStime | sed -e 's/..\(..\)../\1/'`
  set RSse = `echo $RStime | sed -e 's/^....//'`
  @ RSsec = $RSho * 3600 + $RSmi * 60 + $RSse
  @ nti ++
  set REtime = $argv[$nti]
  set REho = `echo $REtime | sed -e 's/....$//'`
  set REmi = `echo $REtime | sed -e 's/..\(..\)../\1/'`
  set REse = `echo $REtime | sed -e 's/^....//'`
  @ REsec = $REho * 3600 + $REmi * 60 + $REse
#    Debug start
  if ($db) then
    echo " Requested start time = $RStime (${RSho}:${RSmi}:${RSse}) = $RSsec"
    echo " Requested  end  time = $REtime (${REho}:${REmi}:${REse}) = $REsec"
  endif
#    Debug end
endif
#
#  Get setup information for this project
#   Project's Production subdirectory
pushd .. >& /dev/null
set Pdir = `pwd`
#   Project directory
cd ..
set PROJDIR =  `pwd`
#   Project number
cd ..
set PROJ = `pwd | awk -F/ '{print $NF}'`
set result = $status
if ($result != 0) then
  echo " Cannot find project number in this directory path"
  goto quit
endif
popd >& /dev/null
#   Platform
@ plat = $PROJ / 100
switch ($plat)
  case [1]
    set PLATFORM = "C130_N130AR"
    breaksw
  case [2]
    set PLATFORM = "KingAir_N312D"
    breaksw
  case [3]
    set PLATFORM = "P3_NRL-P3"
    breaksw
  case [4]
    set PLATFORM = "QueenAir_N304D"
    breaksw
  case [5]
#    set PLATFORM = "Electra_N595KR"
    set PLATFORM = "GulfstreamV_N677F"
    breaksw
  case [6]
    set PLATFORM = "QueenAir_N306D"
    breaksw
  case [7]
    set PLATFORM = "Sabreliner_N307D"
    breaksw
  case [8]
    set PLATFORM = "Electra_N308D"
    breaksw
  case [9]
    set PLATFORM = "SailPlane_N9929J"
    breaksw
  default
    echo "  Illegal platform detected."
    goto quit
endsw
#
#   Archive-progress log-file (instead of echoing to terminal)
set Lfile = "$Pdir/archive/Camera_Archive/Archive_Log"
#   tar-file-directory-list file directory
set Adir = "$Pdir/archive/Camera_Archive/File_Lists"
#   Project's information file
set prfile = $Pdir/proj.info
if (! -r $prfile) then
  echo "  Cannot access project's $prfile"
  goto quit
endif
#   Project's full name
set PN = (`grep "Information for Project" $prfile`)
if ($status == 0 && $#PN > 4) then
  shift PN
  shift PN
  shift PN
  shift PN
else
  echo "  Project Name not found in $prfile -- cannot continue"
  goto quit
endif
#   Fiscal Year for directory path (if /RAF/ path)
if ($rafp) then
  set fy = `grep FY $prfile`
  if ($status == 0) then
    set YEAR = `echo $fy | sed -e "s/FY=//"`
  else
    echo "  Fiscal Year not found in $prfile -- cannot continue"
    goto quit
  endif
endif
if ($atdp) then
#   Calendar Year for directory path (if /ATD/DATA/ path)
  set cy = `grep CY $prfile`
  if ($status == 0) then
    set YEAR = `echo $cy | sed -e "s/CY=//"`
  else
    echo "  Calendar Year not found in $prfile -- cannot continue"
    goto quit
  endif
#   Project name
  set PROJECT = (`grep "MSS Project Directory Name" $prfile`)
  @ pdresult = $status
  if ($pdresult == 0 && $#PROJECT > 4) then
    shift PROJECT
    shift PROJECT
    shift PROJECT
    shift PROJECT
  else
    echo "  MSS Project Directory Name not found in $prfile -- cannot continue"
    goto quit
  endif
endif
#
#   File type
set TYPE = "CAMERA"
#
#  Set machine on which "msrcp" is to run
if ($?MSRCP_MACH) then
  set msrcpMachine = $MSRCP_MACH
else
  set msrcpMachine = "bora"
endif
#
if ($pd) then
  echo " ${0}:  This is a production run."
  echo "  Tar files WILL be archived to the SCD Mass Store System (MSS)."
else
  echo " ${0}:  This is a checkout run, since the -p option is not set."
  echo "  Tar files WILL NOT be archived to the SCD Mass Store System (MSS)."
endif
#
#
#  Get started:
#
#   Check for destination tar-file-directory-list file path
if (! -e $Adir) then
  echo "  Destination directory for tar-file lists ($Adir) doesn't exist."
  goto quit
endif
#
if (! -w $Adir) then
  echo "  Cannot write to Destination directory for tar-file lists ($Adir)."
  goto quit
endif
#
#   Check flight lists for consistency
if ($#SSdirs != $#DSdirs) then
  echo "  Number of source and destination directory paths don't agree."
  goto quit
endif
#
#   Initialize log file (if production run)
if ($pd) then
#    Does log file already exist?
  if (! -e $Lfile) then
#     No.  Create one.
    echo "   Log file for $PROJECT" >! $Lfile
    set result = $status
    if ($result != 0) then
      echo "   Error $result when trying to create log file $Lfile"
      goto quit
    endif
    echo "#  SCD Mass Store System (MSS) path for all bitfiles:" >> $Lfile
    echo "#     /ATD/DATA/$YEAR/$PROJECT/$PLATFORM/$TYPE/" >> $Lfile
    echo "#" >> $Lfile
  else
#     Yes.  Append to it
    if (-w $Lfile) then
      echo " " >> $Lfile
      set result = $status
      if ($result != 0) then
        echo "   Error $result when trying to append to $Lfile"
        goto quit
      endif
      echo "#  -----------------------------------------------------" >> $Lfile
      echo " " >> $Lfile
    else
      echo"   Cannot write to log file $Lfile" >> $Lfile
      goto quit
    endif
  endif
endif
#
#   Check source directory
if (! $?Sdir) then
  if ($pd) then
    echo "  Error:  source file directory not specified." >> $Lfile
  else
    echo "  Error:  source file directory not specified."
  endif
  goto quit
endif
#
#   Do all requested flights
@ wave = 0
foreach SSdir ($SSdirs)
#
  if ($?SSdir) then
#    Debug start
    if ($db) then
      echo "  Source directory is:  $Sdir/$SSdir"
    endif
#    Debug end
    ls $Sdir/$SSdir >! $Flist
    set result = $status
    if ($result != 0) then
      if ($pd) then
        echo "  Error $result when trying to get source file list from directory $Sdir/$SSdir" >> $Lfile
        echo "   Skipping." >> $Lfile
      else
        echo "  Error $result when trying to get source file list from"
        echo "   directory $Sdir/$SSdir"
        echo "   Skipping."
      endif
      break
    endif
#    Debug start
    if ($db) then
      head $Flist
    endif
#    Debug end
  else
    if ($pd) then
      echo "  Error:  source file subdirectory not specified." >> $Lfile
      echo "   Skipping." >> $Lfile
    else
      echo "  Error:  source file subdirectory not specified."
      echo "   Skipping."
    endif
    break
  endif
#
#  Initialize variables and get/set indices
#   Increment "wave" (flight)
  @ wave ++
#   Destination MSS directory path segment
  set DSdir = $DSdirs[$wave]
  if (! $?DSdir) then
    if ($pd) then
      echo "  Error:  MSS file subdirectory not specified." >> $Lfile
      echo "   Skipping." >> $Lfile
    else
      echo "  Error:  MSS file subdirectory not specified."
      echo "   Skipping."
    endif
    break
  endif
#
  if ($pd) then
    echo "#   Wave $wave began for $DSdir on `date`" >> $Lfile
  else
    echo "#   Wave $wave began for $DSdir on `date`"
  endif
  @ nfiles = `wc -l $Flist | awk '{print $1}'` # total number of files to archive
  @ NN = 0                                     # total no. of files in directory
  @ N = 0                                      # total number of files archived
  @ n = 0                                      # number of files in tar file
  @ f = 0                                      # number of tar files
  @ new = 1                                    # flag to start new tar file
  @ firstever = 1                              # process-initialization flag
  @ firsttime = 1                              # first-time-search flag
  @ last = 0                                   # last-file-to-process flag
  set ftyp = "jpg"                             # picture file type
  set pfile                                    # previous file
  set mise                                     # minutes/seconds string
  set pmise                                    # previous minutes/seconds string
  set ho                                       # hours
  set pho                                      # previous hours
  set fdate                                    # picture file date
  set pdate                                    # previous picture file date
  @ fztotal = 0                                # size of tar file (Bytes)
  @ pfsz = 0                                   # previous picture file size (B)
#
  if ($vb) then
    echo ""
    echo "  Number of files in directory $SSdir = $nfiles"
  endif
#
  pushd $Sdir/$SSdir >& /dev/null
  foreach file (`cat $Flist`)
    @ NN ++
    if ($new) then
#  If creating a new tar script file, write boiler-plate for it
      echo "#! /bin/csh -f" >! $Tfile
      set result = $status
      if ($result != 0) then
        if ($pd) then
          echo " Could not write temporary tar script file $Tfile" >> $Lfile
          echo "  (return status = $result)" >> $Lfile
        else
          echo " Could not write temporary tar script file $Tfile"
          echo "  (return status = $result)"
        endif
        goto quit
      endif
      echo "#" >> $Tfile
      echo "#  Prepare tar file for MSS archive" >> $Tfile
      echo "#  `date`" >> $Tfile
      echo "set OFILE = $Afile" >> $Tfile
      echo "#" >> $Tfile
      echo "cd $Sdir/$SSdir" >> $Tfile
      echo 'tar chvf $OFILE \' >> $Tfile
#   Save initial file name (with date/time info)
      if ( ($tartime) && ($f > 0) ) then
        set Sfile = $pfile
      else
        set Sfile = $file
      endif
      @ new = 0
    endif
#
#  I only archive $ftyp files (usually jpg)
    @ typ = `echo $file | grep -c $ftyp`
    if (! $typ) then
      continue
    endif
#
#  Get file's size
    @ fsz = `/bin/ls -l $file | awk '{print $5}'`
#    Debug start
    if ($db) then
      echo " Current file $file size = $fsz"
    endif
#    Debug end
#  Get and parse date
    set fdate = `echo $file | awk -F$delim '{print $3}'`  # MIRAGE C-130 format
#  set fdate = `echo $file | awk -F$delim '{print $3}'`  # RICO C-130 format
#  set fdate = `echo $file | awk -F$delim '{print $1}'`   #  T-REX G5 format
    set ye = `echo $fdate | sed -e 's/....$//'`
    set ye = "20$ye"                                 #  used a 2-digit year :(
#
#  If I am to archive based on tar file's time stamp, parse file name
    if ($tartime) then
#   Parse date
      set mo = `echo $fdate | sed -e 's/..\(..\)../\1/'`
      set da = `echo $fdate | sed -e 's/^....//'`
#   Get and parse time
      set ftime = `echo $file | awk -F$delim '{print $4}'`  # MIRAGE C-130 format
#      set ftime = `echo $file | awk -F$delim '{print $4}'`  # RICO C-130 format
#      set ftime = `echo $file | awk -F$delim '{print $2}'`  #  T-REX G5 format
      set ftime = `echo $ftime | sed -e "s/.jpg//"`
      set ho = `echo $ftime | sed -e 's/....$//'`
      set mi = `echo $ftime | sed -e 's/..\(..\)../\1/'`
      set se = `echo $ftime | sed -e 's/^....//'`
      set mise = `echo $ftime | sed -e 's/^..//'`
      @ sec = $ho * 3600 + $mi * 60 + $se
#    Debug start
      if ($db) then
        echo "  file date/time info:  ${mo}/${da}/${ye} ${ho}:${mi}:${se}"
      endif
#    Debug end
#
#  Set up once-only data
#   Set year (if /ATD/DATA/ path)
      if ($firstever) then
        if ($atdp) then
          set YEAR = "$ye"
        endif
#   Save initial (before midnight rollover) flight day
        if ($mr) then
          @ mrda = $da
        endif
        @ firstever = 0
      endif
#
#  Find start time
      if ($firsttime) then
#   If time interval requested, compare time with requested start time
        if ($ti) then
#    Check for midnight rollover flag (looking for start time on next day)
          if ($mr) then
            if ($da == $mrda) then
#    Debug start
              if ($db) then
                echo "  Tomorrow's date not yet reached; date = $da"
              endif
#    Debug end
              continue
            endif
          endif
#    If I haven't reached the start time, skip to next file
          if ($sec < $RSsec ) then
#    Debug start
            if ($db) then
              echo "  Start time not reached; Stime = $RSsec, Time = $sec"
            endif
#    Debug end
            continue
          endif
          set Sfile = $file
#    Debug start
          if ($db) then
            echo "  Start time reached; Stime = $RSsec, Time = $sec"
          endif
#    Debug end
        endif
      endif
#
#   If very first file to archive, must write files "one in arrears"
#    because the "end" detector is the transition from 59:59 to 00:00
##########
#   (I also have to test the case where the last file to be archived
#    is either a 59:59 or 00:00 to see if it can handle all cases.)
##########
      if ($firsttime) then
        @ pmise = $mise
        set pho = $ho
        set pdate = $fdate
        set pfile = $file
        @ firsttime = 0
        continue
      endif
#   Increment file counters
      @ N ++
      @ n ++
#   Check file for end of hour
      if ( ($mise > $pmise) && ($ho == $pho) && ($fdate == $pdate) ) then
        @ tarit = 0
      else
        @ tarit = 1
      endif
#
#   Check file for the end time (if requested)
      if ($ti) then
#    Debug start
        if ($db) then
          echo  "  Checking time ($sec) for requested end time ($REsec)"
        endif
#    Debug end
        if ($sec >= $REsec ) then
          @ tarit = 1
          @ last = 1
#    Debug start
          if ($db) then
            echo  "  Requested end time ($REsec) reached ($sec)"
          endif
#    Debug end
        endif
      endif
    else
#
#  Archive by size
#   Increment file counters
      @ N ++
      @ n ++
#   Check for a "full" tar file (size or # of files)
      if ( ($fztotal < $MAXSIZ) && ($n < $MAXTAR) ) then
        @ tarit = 0
      else
        @ tarit = 1
      endif
    endif
#
#  Have I reached the last file in the archive?
    if ( (! $last) && ($NN < $nfiles) ) then
      @ last = 0
    else
      @ last = 1
      @ tarit = 1
    endif
#
#  Do I archive the files
    if ($tarit) then
#   Yes !
      if ($tartime) then
        if ($last) then
          echo "$pfile \" >> $Tfile
          echo "$file" >> $Tfile
          set Efile = $file
        else
          echo "$pfile" >> $Tfile
          set Efile = $pfile
        endif
      else
        echo "$file" >> $Tfile
        set Efile = $file
      endif
      if ($vb) then
        echo "  First file in archive:  $Sfile"
        echo "  Last  file in archive:  $Efile"
        echo "  $n files to archive -- Total size = $fztotal"
      endif
#    Debug start
      if ($db) then
        echo "  Pause to view tar script file:  $Tfile"
        echo -n "   hit [r] to continue  "
        set input = "$<"
      endif
#    Debug end
#    Create tar file (using script just generated)
      if ($vb) then
        echo " Creating tar file $Afile"
      endif
      chmod +x $Tfile
      $Tfile >& /dev/null
      set result = $status
      if ($result != 0) then
        if ($pd) then
          echo "  Error $result when trying to create tar file $Tfile" >> $Lfile
        else
          echo "  Error $result when trying to create tar file $Tfile"
        endif
        goto quit
      endif
#
#    Get start/end times for archive (based on file's current name format)
#     Following code for RICO and MIRAGE projects
      set Smeta = `echo $Sfile | sed -e "s/.jpg//"`
      set Smeta = `(echo $Smeta | awk -F$delim '{print $1, $2, $3, $4}')`
      set Sdate = `echo $Smeta[3] | sed -e "s:\(..\)\(..\)\(..\):\2/\3/20\1:"`
      set Stime = `echo $Smeta[4] | sed -e "s/\(..\)\(..\)\(..\)/\1:\2:\3/"`
      set Emeta = `echo $Efile | sed -e "s/.jpg//"`
      set Emeta = `(echo $Emeta | awk -F$delim '{print $1, $2, $3, $4}')`
      set Edate = `echo $Emeta[3] | sed -e "s:\(..\)\(..\)\(..\):\2/\3/20\1:"`
      set Etime = `echo $Emeta[4] | sed -e "s/\(..\)\(..\)\(..\)/\1:\2:\3/"`
#    Get camera location
      set Locn = `echo $Smeta[2] | tr '[a-z]' '[A-Z]'`
#
#     Following code for TREX project
#      set Smeta = `echo $Sfile | sed -e "s/.jpg//"`
#      set Smeta = `(echo $Smeta | awk -F$delim '{print $1, $2}')`
#      set Sdate = `echo $Smeta[1] | sed -e "s:\(..\)\(..\)\(..\):\2/\3/20\1:"`
#      set Stime = `echo $Smeta[2] | sed -e "s/\(..\)\(..\)\(..\)/\1:\2:\3/"`
#      set Emeta = `echo $Efile | sed -e "s/.jpg//"`
#      set Emeta = `(echo $Emeta | awk -F$delim '{print $1, $2}')`
#      set Edate = `echo $Emeta[1] | sed -e "s:\(..\)\(..\)\(..\):\2/\3/20\1:"`
#      set Etime = `echo $Emeta[2] | sed -e "s/\(..\)\(..\)\(..\)/\1:\2:\3/"`
#      Get camera location
#      set Locn = "LEFT"
#
#    Debug start
      if ($db) then
        echo "  Dates/Times and camera location"
        echo "  Start = $Sdate  $Stime"
        echo "   End  = $Edate  $Etime"
        echo "  Camera location = $Locn"
      endif
#    Debug end
#
#    Compose archived tar file's MSS bitfile name (using metadata)
#     RICO/MIRAGE
      set OFILE = `echo ${Locn}.20${Smeta[3]}.${Smeta[4]}_${Emeta[4]}.jpg.tar`
#     TREX
#    set OFILE = `echo ${Locn}.20${Smeta[1]}.${Smeta[2]}_${Emeta[2]}.jpg.tar`
#
#    Compose full MSS bitfile name
#     /ATD/DATA/ path
      if ($atdp) then
        set bitfile = "/ATD/DATA/$YEAR/$PROJECT/$PLATFORM/$TYPE/$DSdir.$OFILE"
      endif
#     /RAF/ path
      if ($rafp) then
        set bitfile = "/RAF/$YEAR/$PROJ/$TYPE/$DSdir/$OFILE"
      endif
#    Create tar directory-list file (add header with metadata) and save it in
#     projects's archive subdirectory
#    Set file's full path name
      set dfile = "$Adir/$DSdir.$OFILE.dir"
      if ($vb) then
        echo " Creating tar directory file $dfile"
      endif
      echo " Directory list for MSS bitfile $bitfile" >! $dfile
      set result = $status
      if ($result != 0) then
        if ($pd) then
          echo "  Error $result when trying to create tar file's directory list" >> $Lfile
          echo "  Tar file $Afile will be saved" >> $Lfile
          echo "   If this archive needs to be redone, start with file:  $SSdir/$Sfile" >> $Lfile
          echo "   If continuing on, then use the next file after:  $SSdir/$Efile" >> $Lfile
        else
          echo "  Error $result when trying to create tar file's directory list"
          echo "  Tar file $Afile will be saved"
          echo "   If this archive needs to be redone, start with file:  $SSdir/$Sfile"
          echo "   If continuing on, then use the next file after:  $SSdir/$Efile"
        endif
        set nopurge = 1
        goto quit
      endif
      echo "  C-130Q digital photos (jpg format) from project $PN" >> $dfile
      echo " " >> $dfile
      echo "  $TYPE $DSdir $Locn starts:  $Sdate $Stime" >> $dfile
      echo "  $TYPE $DSdir $Locn   ends:  $Edate $Etime" >> $dfile
      echo "  Archive created on `date`" >> $dfile
      echo " " >> $dfile
      tar tvf $Afile >> $dfile
      if (-r $Afile) then
#    Write tar file to MSS if in production mode ($pd == true == 1)
        if ($pd) then
          if ($vb) then
            echo "  Archiving $DSdir$char$OFILE to MSS"
          endif
          echo "#  Job submitted on `date`" >> $Lfile
          ssh -x $msrcpMachine msput_job -pe 32767 -pr 41113009 -wpwd RAFDMG \
           $RPWD $Afile mss:${bitfile}
          set result = $status
        else
#    Debug start
          if ($vb || $db) then
            echo \
            ssh -x $msrcpMachine msput_job -pe 32767 -pr 41113009 -wpwd RAFDMG \
             $RPWD $Afile mss:${bitfile}
          endif
#    Debug end
          set result = 0
        endif
        if ($pd) then
          if ($result == 0) then
            echo "#  msrcp job for $DSdir$char$OFILE -- OK -- `date`" >> $Lfile
          else
            echo "#  msrcp job for $DSdir$char$OFILE -- Failed -- `date`" >> $Lfile
            echo "#                $DSdir$char$OFILE -- error code $result" >> $Lfile
          endif
        else
          if ($result == 0) then
            echo "#  msrcp job for $DSdir$char$OFILE -- OK -- `date`"
          else
            echo "#  msrcp job for $DSdir$char$OFILE -- Failed -- `date`"
            echo "#                $DSdir$char$OFILE -- error code $result"
          endif
        endif
      else
        if ($pd) then
          echo "#  msrcp job for $DSdir$char$OFILE -- Failed -- `date`" >> $Lfile
          echo "#   Cannot access tar file $Afile" >> $Lfile
        else
          echo "#  msrcp job for $DSdir$char$OFILE -- Failed -- `date`"
          echo "#   Cannot access tar file $Afile"
        endif
      endif
#
#    Write tar directory-list file to MSS if in production mode ($pd==true==1)
      if ($pd) then
        if ($vb) then
          echo "  Archiving tar directory file $OFILE.dir to MSS"
        endif
        echo "#  Job submitted on `date`" >> $Lfile
        ssh -x $msrcpMachine msput_job -pe 32767 -pr 41113009 -wpwd RAFDMG \
         $RPWD $dfile mss:${bitfile}.dir
        set result = $status
      else
        set result = 0
#    Debug start
        if ($vb || $db) then
          echo \
          ssh -x $msrcpMachine msput_job -pe 32767 -pr 41113009 -wpwd RAFDMG \
           $RPWD $dfile mss:${bitfile}.dir
        endif
#    Debug end
      endif
      if ($pd) then
        if ($result == 0) then
          echo "#  msrcp job for $DSdir$char$OFILE.dir -- OK -- `date`" >> $Lfile
        else
          echo "#  msrcp job for $DSdir$char$OFILE.dir -- Failed -- `date`" >> $Lfile
          echo "#                $DSdir$char$OFILE.dir -- error code $result" >> $Lfile
        endif
      else
        if ($result == 0) then
          echo "#  msrcp job for $DSdir$char$OFILE.dir -- OK -- `date`"
        else
          echo "#  msrcp job for $DSdir$char$OFILE.dir -- Failed -- `date`"
          echo "#                $DSdir$char$OFILE.dir -- error code $result"
        endif
      endif
#    Debug start
      if ($db || $vb) then
        echo "   Number of files archived so far = $N"
        echo "   Number of files in this archive = $n"
      endif
#    Debug end
#    Debug start
      if ($db) then
        echo "   Total number of files in this directory = $nfiles"
        echo "   List of files in this directory:  $Flist"
      endif
#    Debug end
      if ($vb) then
        echo "   Tar directory file:  $dfile"
      endif
      if (! $pd) then
        echo "  Since this is a checkout run, pause to view files:"
        echo "   Tar script file:  $Tfile"
        echo "   Tar file:  $Afile"
        echo -n "   hit [r] to continue  "
        set input = "$<"
      endif
#    Reset for next tar file
      \rm $Tfile
      \rm $Afile
      @ f ++
      @ n = 0
      @ fztotal = 0
      @ new = 1
    endif
#
#   If by time, save file name and set parameters for next pass
    if ($tartime) then
      echo "$pfile \" >> $Tfile
      @ fztotal = $fztotal + $pfsz
      set pmise = $mise
      set pho   = $ho
      set pdate = $fdate
      set pfile = $file
      set pfsz = $fsz
    else
      echo "$file \" >> $Tfile
      @ fztotal = $fztotal + $fsz
    endif
#    Debug start
    if ($db) then
      echo "   Total tar file size = $fztotal"
    endif
#    Debug end
#
#  Do I quit before the last known file?
    if ($tartime && $ti && $last) then
#   Yes!
#    Debug start
      if ($db) then
        echo  "  Breaking out of foreach loop"
      endif
#    Debug end
      break
    endif
  end
end
#
#  Done.
if ($pd) then
  echo "#   Completed on `date`" >> $Lfile
  echo "#   Total number of files: $N" >> $Lfile
else
  echo "#   Completed on `date`"
  echo "#   Total number of files: $N"
endif
if ($f == 1) then
  set msg = "file"
else
  set msg = "files"
endif
if ($pd)
  echo "#   $f tar $msg archived to MSS" >> $Lfile
else
  echo "#   $f tar $msg NOT archived to MSS"
endif
@ xit = 0
goto cleanup
#
quit:
echo "  Quitting"
abort:
onintr -
#  Delete tar directory file if abnormal exit
if ($?dfile) then
  if (-e $dfile) then
    \rm $dfile
  endif
endif
cleanup:
if (-e $Flist) then
  \rm $Flist
endif
if (-e $Tfile) then
  \rm $Tfile
endif
if (-e $Afile) then
  if (! $nopurge) then
    \rm $Afile
  endif
endif
exit $xit
#
#  See file ./Camera_Archive/Archive_Log for job-completion status
#   (Status no longer put here)
#
