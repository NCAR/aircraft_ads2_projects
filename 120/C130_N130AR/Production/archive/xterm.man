


xterm(1)                  User Commands                  xterm(1)



NAME
     xterm - terminal emulator for X

SYNOPSIS
     xterm [-_t_o_o_l_k_i_t_o_p_t_i_o_n ...] [-option ...]

DESCRIPTION
     The xterm program is a terminal emulator for  the  X  Window
     System.  It provides DEC VT102 and Tektronix 4014 compatible
     terminals for programs that  can't  use  the  window  system
     directly.   If the underlying operating system supports ter-
     minal resizing capabilities (for example, the SIGWINCH  sig-
     nal  in  systems  derived  from  4.3bsd), xterm will use the
     facilities to notify programs running in the window whenever
     it is resized.

     The VT102 and Tektronix 4014 terminals each have  their  own
     window so that you can edit text in one and look at graphics
     in the other at the same  time.   To  maintain  the  correct
     aspect ratio (height/width), Tektronix graphics will be res-
     tricted to the largest box with a 4014's aspect  ratio  that
     will  fit  in  the window.  This box is located in the upper
     left area of the window.

     Although both windows may be displayed at the same time, one
     of  them  is  considered the ``active'' window for receiving
     keyboard input and terminal output.  This is the window that
     contains  the  text cursor.  The active window can be chosen
     through escape sequences, the ``VT  Options''  menu  in  the
     VT102  window, and the ``Tek Options'' menu in the 4014 win-
     dow.

EMULATIONS
     The VT102 emulation is fairly complete, but does not support
     the  blinking  character  attribute  nor the double-wide and
     double-size character sets.  Termcap (5) entries  that  work
     with  xterm  include  ``xterm,''  ``vt102,''  ``vt100''  and
     ``ansi,'' and xterm automatically searches the termcap  file
     in  this  order for these entries and then sets the ``TERM''
     and the ``TERMCAP'' environment variables.

     Many of the special xterm features  (like  logging)  may  be
     modified  under  program  control  through  a  set of escape
     sequences  different  from   the   standard   VT102   escape
     sequences. (See the _X_t_e_r_m _C_o_n_t_r_o_l _S_e_q_u_e_n_c_e_s document.)

     The Tektronix 4014 emulation is also fairly good.  Four dif-
     ferent  font  sizes  and five different lines types are sup-
     ported.   The  Tektronix  text  and  graphics  commands  are
     recorded internally by xterm and may be written to a file by
     sending the COPY escape sequence (or through  the  Tektronix
     menu; see below).  The name of the file will be ``COPY_y_y-_M_M-



X Version 11         Last change: Release 5                     1






xterm(1)                  User Commands                  xterm(1)



     _d_d._h_h:_m_m:_s_s'', where _y_y, _M_M, _d_d, _h_h, _m_m and _s_s are the year,
     month,  day,  hour, minute and second when the COPY was per-
     formed (the file  is  created  in  the  directory  xterm  is
     started in, or the home directory for a login _x_t_e_r_m).

OTHER FEATURES
     Xterm automatically highlights  the  text  cursor  when  the
     pointer  enters  the  window  (selected) and unhighlights it
     when the pointer leaves the  window  (unselected).   If  the
     window  is  the  focus  window,  then  the  text  cursor  is
     highlighted no matter where the pointer is.

     In VT102 mode, there are escape sequences  to  activate  and
     deactivate  an  alternate  screen  buffer, which is the same
     size as the display area of the window.  When activated, the
     current  screen  is  saved  and  replaced with the alternate
     screen.  Saving of lines scrolled off the top of the  window
     is  disabled  until  the  normal  screen  is  restored.  The
     termcap (5) entry for xterm allows the visual  editor  vi(1)
     to switch to the alternate screen for editing and to restore
     the screen on exit.

     In  either  VT102  or  Tektronix  mode,  there  are   escape
     sequences to change the name of the windows and to specify a
     new log file name.  See _X_t_e_r_m _C_o_n_t_r_o_l _S_e_q_u_e_n_c_e_s for details.
     Enabling  the escape sequence to change the log file name is
     a compile-time option; by default this  escape  sequence  is
     ignored for security reasons.

OPTIONS
     The _x_t_e_r_m terminal emulator accepts all of  the  standard  X
     Toolkit  command  line  options as well as the following (if
     the option begins with a `+' instead of a `-', the option is
     restored to its default value):

     -help    This causes _x_t_e_r_m to print out  a  verbose  message
             describing its options.

     -132     Normally, the VT102 DECCOLM  escape  sequence  that
             switches  between 80 and 132 column mode is ignored.
             This option causes the DECCOLM escape sequence to be
             recognized,   and   the  xterm  window  will  resize
             appropriately.

     -ah      This option  indicates  that  xterm  should  always
             highlight  the  text cursor.  By default, _x_t_e_r_m will
             display a hollow text cursor whenever the  focus  is
             lost or the pointer leaves the window.

     +ah     This option indicates that xterm should do text cur-
             sor highlighting based on focus.




X Version 11         Last change: Release 5                     2






xterm(1)                  User Commands                  xterm(1)



     -b _n_u_m_b_e_r
             This option specifies the size of the  inner  border
             (the  distance between the outer edge of the charac-
             ters and the window border) in pixels.  The  default
             is 2.

     -cc _c_h_a_r_a_c_t_e_r_c_l_a_s_s_r_a_n_g_e:_v_a_l_u_e[,...]
             This sets classes indicated by the given ranges  for
             using in selecting by words.  See the section speci-
             fying character classes.

     -cn      This option indicates that newlines should  not  be
             cut in line-mode selections.

     +cn     This option indicates that newlines should be cut in
             line-mode selections.

     -cr _c_o_l_o_r
             This option specifies the color to use for text cur-
             sor.   The  default  is  to  use the same foreground
             color that is used for text.

     -cu      This option indicates that _x_t_e_r_m should work around
             a  bug  in the curses(3x) cursor motion package that
             causes the more(1) program to display lines that are
             exactly  the width of the window and are followed by
             a  line  beginning  with  a  tab  to  be   displayed
             incorrectly (the leading tabs are not displayed).

     +cu     This option indicates that  that  _x_t_e_r_m  should  not
             work around the _c_u_r_s_e_s(3x) bug mentioned above.

     -e _p_r_o_g_r_a_m [_a_r_g_u_m_e_n_t_s ...]
             This option specifies the program (and  its  command
             line  arguments)  to be run in the _x_t_e_r_m window.  It
             also sets the window title and icon name to  be  the
             basename of the program being executed if neither -_T
             nor -_n are given on the command line.  This must  be
             the last option on the command line.

     -fb _f_o_n_t
             This  option  specifies  a  font  to  be  used  when
             displaying  bold  text.  This  font must be the same
             height and width as the normal font.  If only one of
             the  normal  or  bold fonts is specified, it will be
             used as the normal font and the bold  font  will  be
             produced  by overstriking this font.  The default is
             to do overstriking of the normal font.

     -j       This option indicates that  xterm  should  do  jump
             scrolling.  Normally, text is scrolled one line at a
             time; this option  allows  xterm  to  move  multiple



X Version 11         Last change: Release 5                     3






xterm(1)                  User Commands                  xterm(1)



             lines  at  a  time  so  that  it doesn't fall as far
             behind.  Its use is strongly  recommended  since  it
             make  xterm  much faster when scanning through large
             amounts of text.  The  VT100  escape  sequences  for
             enabling  and disabling smooth scroll as well as the
             ``VT Options'' menu can be used to turn this feature
             on or off.

     +j      This option indicates that xterm should not do  jump
             scrolling.

     -l       This option indicates that xterm  should  send  all
             terminal  output  to  a  log  file as well as to the
             screen.  This option  can  be  enabled  or  disabled
             using the ``VT Options'' menu.

     +l      This option indicates that xterm should not do  log-
             ging.

     -lf _f_i_l_e_n_a_m_e
             This option specifies the name of the file to  which
             the  output log described above is written.  If _f_i_l_e
             begins with a pipe  symbol  (|),  the  rest  of  the
             string  is assumed to be a command to be used as the
             endpoint of a pipe.  The ability to log to a pipe is
             a  compile-time  option which is disabled by default
             for  security  reasons.   The  default  filename  is
             ``XtermLog._X_X_X_X_X'' (where _X_X_X_X_X is the process id of
             xterm ) and is created in the directory  from  which
             xterm  was  started (or the user's home directory in
             the case of a login window).

     -ls      This  option  indicates  that  the  shell  that  is
             started  in  the xterm window be a login shell (i.e.
             the first character of argv[0] will be a dash, indi-
             cating  to  the shell that it should read the user's
             .login or .profile).

     +ls     This option indicates that the shell that is started
             should  not be a login shell (i.e. it will be a nor-
             mal ``subshell'').

     -mb      This option indicates that xterm should ring a mar-
             gin bell when the user types near the right end of a
             line.  This option can be turned on and off from the
             ``VT Options'' menu.

     +mb     This option indicates that margin bell should not be
             rung.

     -mc milliseconds
             This  option  specifies  the  maximum  time  between



X Version 11         Last change: Release 5                     4






xterm(1)                  User Commands                  xterm(1)



             multi-click selections.

     -ms _c_o_l_o_r
             This option specifies the color to be used  for  the
             pointer  cursor.   The  default  is to use the fore-
             ground color.

     -nb _n_u_m_b_e_r
             This option specifies the number of characters  from
             the right end of a line at which the margin bell, if
             enabled, will ring.  The default is 10.

      - rw      This  option  indicates  that  reverse-wraparound
             should  be  allowed.  This allows the cursor to back
             up from the leftmost  column  of  one  line  to  the
             rightmost column of the previous line.  This is very
             useful for editing long shell command lines  and  is
             encouraged.   This  option  can be turned on and off
             from the ``VT Options'' menu.

     +rw     This option indicates that reverse-wraparound should
             not be allowed.

     -aw      This option indicates that  auto-wraparound  should
             be allowed.  This allows the cursor to automatically
             wrap to the beginning of the next line when when  it
             is  at  the rightmost position of a line and text is
             output.

     +aw     This option indicates  that  auto-wraparound  should
             not be allowed.

     -s       This option indicates that xterm may  scroll  asyn-
             chronously, meaning that the screen does not have to
             be kept completely up to date while scrolling.  This
             allows  xterm  to  run faster when network latencies
             are very high and is typically useful  when  running
             across a very large internet or many gateways.

     +s      This option indicates that xterm should scroll  syn-
             chronously.

     -sb      This option indicates that  some  number  of  lines
             that  are  scrolled off the top of the window should
             be saved and that a scrollbar should be displayed so
             that  those lines can be viewed.  This option may be
             turned on and off from the ``VT Options'' menu.

     +sb     This option indicates that a scrollbar should not be
             displayed.

     -sf      This option indicates that Sun Function Key  escape



X Version 11         Last change: Release 5                     5






xterm(1)                  User Commands                  xterm(1)



             codes should be generated for function keys.

     +sf     This option indicates that the standard escape codes
             should be generated for function keys.

     -si      This option  indicates  that  output  to  a  window
             should  not  automatically  reposition the screen to
             the bottom of the scrolling region. This option  can
             be turned on and off from the ``VT Options'' menu.

     +si     This option indicates that output to a window should
             cause it to scroll to the bottom.

     -sk      This option indicates that  pressing  a  key  while
             using the scrollbar to review previous lines of text
             should cause the window to be repositioned automati-
             cally  in  the  normal position at the bottom of the
             scroll region.

     +sk     This option indicates  that  pressing  a  key  while
             using  the  scrollbar should not cause the window to
             be repositioned.

     -sl _n_u_m_b_e_r
             This option specifies the number of  lines  to  save
             that  have  been scrolled off the top of the screen.
             The default is 64.

     -t       This option indicates that xterm  should  start  in
             Tektronix  mode, rather than in VT102 mode.  Switch-
             ing between  the  two  windows  is  done  using  the
             ``Options'' menus.

     +t      This option indicates that  xterm  should  start  in
             VT102 mode.

     -tm _s_t_r_i_n_g
             This option specifies a series of  terminal  setting
             keywords  followed  by the characters that should be
             bound to those functions, similar to the  _s_t_t_y  pro-
             gram.    Allowable  keywords  include:  intr,  quit,
             erase, kill, eof,  eol,  swtch,  start,  stop,  brk,
             susp,  dsusp,  rprnt, flush, weras, and lnext.  Con-
             trol characters may be specified as ^char  (e.g.  ^c
             or ^u) and ^? may be used to indicate delete.

     -tn _n_a_m_e
             This option specifies the name of the terminal  type
             to  be  set  in the TERM environment variable.  This
             terminal type must exist in the _t_e_r_m_c_a_p(_5)  database
             and should have _l_i# and _c_o# entries.




X Version 11         Last change: Release 5                     6






xterm(1)                  User Commands                  xterm(1)



     -ut      This option indicates that _x_t_e_r_m shouldn't write  a
             record into the the system log file /_e_t_c/_u_t_m_p.

     +ut     This option indicates  that  _x_t_e_r_m  should  write  a
             record into the system log file /_e_t_c/_u_t_m_p.

     -vb      This option indicates that a visual  bell  is  pre-
             ferred  over an audible one.  Instead of ringing the
             terminal bell whenever a Control-G is received,  the
             window will be flashed.

     +vb     This option indicates that a visual bell should  not
             be used.

     -wf      This option indicates that xterm  should  wait  for
             the window to be mapped the first time before start-
             ing the subprocess so that the initial terminal size
             settings  and environment variables are correct.  It
             is the application's responsibility to catch  subse-
             quent terminal size changes.

     +wf     This option  indicates  that  xterm  show  not  wait
             before starting the subprocess.

     -C       This  option  indicates  that  this  window  should
             receive  console  output.   This is not supported on
             all systems.  To obtain console output, you must  be
             the  owner  of the console device, and you must have
             read and write permission for it.  If you  are  run-
             ning  X under _x_d_m on the console screen you may need
             to have  the  session  startup  and  reset  programs
             explicitly  change the ownership of the console dev-
             ice in order to get this option to work.

     -S_c_c_n    This option specifies the last two letters  of  the
             name  of a pseudoterminal to use in slave mode, plus
             the number of the inherited  file  descriptor.   The
             option  is  parsed ``%c%c%d''.  This allows xterm to
             be used as an input and output channel for an exist-
             ing  program  and  is  sometimes used in specialized
             applications.

     The following command line arguments are provided for compa-
     tibility  with older versions.  They may not be supported in
     the next release as the X Toolkit provides standard  options
     that accomplish the same task.

     %_g_e_o_m   This option specifies the preferred size  and  posi-
             tion  of  the Tektronix window.  It is shorthand for
             specifying the ``*_t_e_k_G_e_o_m_e_t_r_y'' resource.

     #_g_e_o_m   This option specifies the preferred position of  the



X Version 11         Last change: Release 5                     7






xterm(1)                  User Commands                  xterm(1)



             icon  window.   It  is  shorthand for specifying the
             ``*_i_c_o_n_G_e_o_m_e_t_r_y'' resource.

     -T _s_t_r_i_n_g
             This option specifies the  title  for  xterm  It  is
             equivalent to -title.

     -n _s_t_r_i_n_g
             This option specifies the icon name for xterm It  is
             shorthand for specifying the ``*_i_c_o_n_N_a_m_e'' resource.
             Note that this is not the same as the toolkit option
             - name  (see  below).   The default icon name is the
             application name.

     -r       This option indicates that reverse video should  be
             simulated  by swapping the foreground and background
             colors.  It is equivalent to -reversevideo or -rv.

     -w _n_u_m_b_e_r
             This option specifies the width  in  pixels  of  the
             border  surrounding the window.  It is equivalent to
             -borderwidth or -bw.

     The following standard X Toolkit command line arguments  are
     commonly used with _x_t_e_r_m:

     -bg _c_o_l_o_r
             This option specifies the color to use for the back-
             ground of the window. The default is ``white.''

     -bd _c_o_l_o_r
             This option specifies  the  color  to  use  for  the
             border of the window.  The default is ``black.''

     -bw _n_u_m_b_e_r
             This option specifies the width  in  pixels  of  the
             border surrounding the window.

     -fg _c_o_l_o_r
             This option specifies the color to use for  display-
             ing text.  The default is ``black.''

     -fn _f_o_n_t
             This option  specifies  the  font  to  be  used  for
             displaying normal text.  The default is _f_i_x_e_d.

     -name _n_a_m_e
             This option specifies  the  application  name  under
             which  resources are to be obtained, rather than the
             default executable file name.  _N_a_m_e should not  con-
             tain ``.'' or ``*'' characters.




X Version 11         Last change: Release 5                     8






xterm(1)                  User Commands                  xterm(1)



     -title _s_t_r_i_n_g
             This option specifies the window title string, which
             may  be  displayed by window managers if the user so
             chooses.  The default  title  is  the  command  line
             specified after the -e option, if any, otherwise the
             application name.

     -rv      This option indicates that reverse video should  be
             simulated  by swapping the foreground and background
             colors.

     -geometry _g_e_o_m_e_t_r_y
             This option specifies the preferred size  and  posi-
             tion of the VT102 window; see _X(_1).

     -display _d_i_s_p_l_a_y
             This option specifies the X server to  contact;  see
             _X(_1).

     -xrm _r_e_s_o_u_r_c_e_s_t_r_i_n_g
             This option specifies a resource string to be  used.
             This is especially useful for setting resources that
             do not have separate command line options.

     -iconic  This option indicates that  _x_t_e_r_m  should  ask  the
             window manager to start it as an icon rather than as
             the normal window.

RESOURCES
     The program understands all of the core X  Toolkit  resource
     names and classes as well as:

     iconGeometry (class IconGeometry)
             Specifies the preferred size  and  position  of  the
             application  when  iconified.  It is not necessarily
             obeyed by all window managers.

     termName (class TermName)
             Specifies the terminal type name to be  set  in  the
             TERM environment variable.

     title (class Title)
             Specifies a string that may be used  by  the  window
             manager when displaying this application.

     ttyModes (class TtyModes)
             Specifies a string containing terminal setting  key-
             words and the characters to which they may be bound.
             Allowable keywords include: intr, quit, erase, kill,
             eof,  eol,  swtch,  start,  stop,  brk, susp, dsusp,
             rprnt, flush, weras, and lnext.  Control  characters
             may be specified as ^char (e.g. ^c or ^u) and ^? may



X Version 11         Last change: Release 5                     9






xterm(1)                  User Commands                  xterm(1)



             be used to indicate Delete.  This is very useful for
             overriding  the  default  terminal  settings without
             having to do an _s_t_t_y every time an _x_t_e_r_m is started.

     utmpInhibit (class UtmpInhibit)
             Specifies whether or not _x_t_e_r_m should try to  record
             the user's terminal in /_e_t_c/_u_t_m_p.

     sunFunctionKeys (class SunFunctionKeys)
             Specifies whether or not  Sun  Function  Key  escape
             codes  should be generated for function keys instead
             of standard escape sequences.

     waitForMap (class WaitForMap)
             Specifies whether or not _x_t_e_r_m should wait  for  the
             initial  window  map before starting the subprocess.
             The default is ``false.''


     The following resources are specified as part of  the  _v_t_1_0_0
     widget (class _V_T_1_0_0):

     allowSendEvents (class AllowSendEvents)
             Specifies whether or not synthetic  key  and  button
             events  (generated  using  the  X protocol SendEvent
             request) should be interpreted  or  discarded.   The
             default  is  ``false''  meaning  they are discarded.
             Note that allowing such events creates a very  large
             security hole.


     alwaysHighlight (class AlwaysHighlight)
             Specifies whether or not _x_t_e_r_m should always display
             a  highlighted  text  cursor.   By default, a hollow
             text cursor is displayed whenever the pointer  moves
             out  of  the  window  or  the window loses the input
             focus.

     appcursorDefault (class AppcursorDefault)
             If ``true,'' the cursor keys are initially in appli-
             cation mode.  The default is ``false.''

     appkeypadDefault (class AppkeypadDefault)
             If ``true,'' the keypad keys are initially in appli-
             cation mode.  The default is ``false.''

     autoWrap (class AutoWrap)
             Specifies whether or not auto-wraparound  should  be
             enabled.  The default is ``true.''

     bellSuppressTime (class BellSuppressTime)
             Number of milliseconds after a bell command is  sent



X Version 11         Last change: Release 5                    10






xterm(1)                  User Commands                  xterm(1)



             during  which  additional  bells will be suppressed.
             Default is 200.  If set non-zero,  additional  bells
             will  also  be  suppressed  until the server reports
             that processing of the  first  bell  has  been  com-
             pleted; this feature is most useful with the visible
             bell.

     boldFont (class BoldFont)
             Specifies the name of the bold font to  use  instead
             of overstriking.

     c132 (class C132)
             Specifies whether or not the  VT102  DECCOLM  escape
             sequence   should   be   honored.   The  default  is
             ``false.''

     charClass (class CharClass)
             Specifies comma-separated lists of  character  class
             bindings  of  the  form [_l_o_w-]_h_i_g_h:_v_a_l_u_e.  These are
             used in determining which sets of characters  should
             be  treated  the same when doing cut and paste.  See
             the section on specifying character classes.

     curses (class Curses)
             Specifies whether or not  the  last  column  bug  in
             _c_u_r_s_e_s(3x)  should be worked around.  The default is
             ``false.''

     background (class Background)
             Specifies the color to use for the background of the
             window.  The default is ``white.''

     foreground (class Foreground)
             Specifies the color to use for  displaying  text  in
             the  window.   Setting the class name instead of the
             instance name is an easy way to have everything that
             would  normally  appear  in  the "text" color change
             color.  The default is ``black.''

     cursorColor (class Foreground)
             Specifies the color to use for the text cursor.  The
             default is ``black.''

     eightBitInput (class EightBitInput)
             If true, Meta characters input from the keyboard are
             presented  as a single character with the eighth bit
             turned on.  If false, Meta characters are  converted
             into  a  two-character  sequence  with the character
             itself preceded by ESC.  The default is ``true.''

     eightBitOutput (class EightBitOutput)
             Specifies whether or not eight-bit  characters  sent



X Version 11         Last change: Release 5                    11






xterm(1)                  User Commands                  xterm(1)



             from  the  host should be accepted as is or stripped
             when printed.  The default is ``true.''

     font (class Font)
             Specifies the name of the normal font.  The  default
             is ``fixed.''

     font1 (class Font1)
             Specifies the name of the first alternative font.

     font2 (class Font2)
             Specifies the name of the second alternative font.

     font3 (class Font3)
             Specifies the name of the third alternative font.

     font4 (class Font4)
             Specifies the name of the fourth alternative font.

     font5 (class Font5)
             Specifies the name of the fifth alternative font.

     font6 (class Font6)
             Specifies the name of the sixth alternative font.

     geometry (class Geometry)
             Specifies the preferred size  and  position  of  the
             VT102 window.

     internalBorder (class BorderWidth)
             Specifies the number of pixels between  the  charac-
             ters and the window border.  The default is 2.

     jumpScroll (class JumpScroll)
             Specifies whether or not jump scroll should be used.
             The default is ``true.''

     logFile (class Logfile)
             Specifies the name of the file to which  a  terminal
             session     is     logged.      The    default    is
             ``XtermLog._X_X_X_X_X'' (where _X_X_X_X_X is the process id of
             _x_t_e_r_m).

     logging (class Logging)
             Specifies whether or not a terminal  session  should
             be logged.  The default is ``false.''

     logInhibit (class LogInhibit)
             Specifies whether or not  terminal  session  logging
             should be inhibited.  The default is ``false.''

     loginShell (class LoginShell)



X Version 11         Last change: Release 5                    12






xterm(1)                  User Commands                  xterm(1)



             Specifies whether or not the shell to be run in  the
             window  should  be  started  as  a login shell.  The
             default is ``false.''

     marginBell (class MarginBell)
             Specifies whether or not the bell should be run when
             the  user  types near the right margin.  The default
             is ``false.''

     multiClickTime (class MultiClickTime)
             Specifies the maximum time in  milliseconds  between
             multi-click  select events.  The default is 250 mil-
             liseconds.

     multiScroll (class MultiScroll)
             Specifies whether or not scrolling  should  be  done
             asynchronously.  The default is ``false.''

     nMarginBell (class Column)
             Specifies the number of characters  from  the  right
             margin at which the margin bell should be rung, when
             enabled.

     pointerColor (class Foreground)
             Specifies the foreground color of the pointer.   The
             default is ``XtDefaultForeground.''

     pointerColorBackground (class Background)
             Specifies the background color of the pointer.   The
             default is ``XtDefaultBackground.''

     pointerShape (class Cursor)
             Specifies the name of the shape of the pointer.  The
             default is ``xterm.''

     resizeGravity (class ResizeGravity)
             Affects the behavior when the window is  resized  to
             be  taller or shorter.  NorthWest specifies that the
             top line of text on the screen stay fixed.   If  the
             window  is  made shorter, lines are dropped from the
             bottom; if the window is made  taller,  blank  lines
             are  added  at  the bottom.  This is compatible with
             the behavior in R4.  SouthWest (the default)  speci-
             fies that the bottom line of text on the screen stay
             fixed.  If the window  is  made  taller,  additional
             saved  lines  will be scrolled down onto the screen;
             if  the  window  is  made  shorter,  lines  will  be
             scrolled  off  the  top  of  the screen, and the top
             saved lines will be dropped.

     reverseVideo (class ReverseVideo)
             Specifies whether or not  reverse  video  should  be



X Version 11         Last change: Release 5                    13






xterm(1)                  User Commands                  xterm(1)



             simulated.  The default is ``false.''

     reverseWrap (class ReverseWrap)
             Specifies whether or not  reverse-wraparound  should
             be enabled.  The default is ``false.''

     saveLines (class SaveLines)
             Specifies the number of lines to save beyond the top
             of  the  screen  when a scrollbar is turned on.  The
             default is 64.

     scrollBar (class ScrollBar)
             Specifies whether or not  the  scrollbar  should  be
             displayed.  The default is ``false.''

     scrollTtyOutput (class ScrollCond)
             Specifies whether or  not  output  to  the  terminal
             should  automatically  cause  the scrollbar to go to
             the bottom of the scrolling region.  The default  is
             ``true.''

     scrollKey (class ScrollCond)
             Specifies whether  or  not  pressing  a  key  should
             automatically  cause the scrollbar to go to the bot-
             tom  of  the  scrolling  region.   The  default   is
             ``false.''

     scrollLines (class ScrollLines)
             Specifies the number of lines that  the  _s_c_r_o_l_l-_b_a_c_k
             and  _s_c_r_o_l_l-_f_o_r_w  actions  should  use as a default.
             The default value is 1.

     signalInhibit (class SignalInhibit)
             Specifies whether or not the entries in  the  ``Main
             Options''  menu  for sending signals to _x_t_e_r_m should
             be disallowed.  The default is ``false.''

     tekGeometry (class Geometry)
             Specifies the preferred size  and  position  of  the
             Tektronix window.

     tekInhibit (class TekInhibit)
             Specifies whether or not Tektronix  mode  should  be
             disallowed.  The default is ``false.''

     tekSmall (class TekSmall)
             Specifies whether or not the Tektronix  mode  window
             should  start  in  its  smallest size if no explicit
             geometry is given.   This  is  useful  when  running
             _x_t_e_r_m  on  displays with small screens.  The default
             is ``false.''




X Version 11         Last change: Release 5                    14






xterm(1)                  User Commands                  xterm(1)



     tekStartup (class TekStartup)
             Specifies whether or not _x_t_e_r_m should  start  up  in
             Tektronix mode.  The default is ``false.''

     titeInhibit (class TiteInhibit)
             Specifies whether or not _x_t_e_r_m should remove  remove
             _t_i  and  _t_e  termcap entries (used to switch between
             alternate screens on startup of many screen-oriented
             programs)  from  the  TERMCAP string.  If set, _x_t_e_r_m
             also ignores the escape sequence to  switch  to  the
             alternate screen.

     translations (class Translations)
             Specifies the key and  button  bindings  for  menus,
             selections,   ``programmed   strings,''   etc.   See
             ACTIONS below.

     visualBell (class VisualBell)
             Specifies whether or not a visible bell (i.e. flash-
             ing)  should be used instead of an audible bell when
             Control-G is received.  The default is ``false.''


     The following resources are specified as part of the _t_e_k_4_0_1_4
     widget (class _T_e_k_4_0_1_4):

     width (class Width)
             Specifies the width of the Tektronix window in  pix-
             els.

     height (class Height)
             Specifies the height of the Tektronix window in pix-
             els.

     fontLarge (class Font)
             Specifies the large font to  use  in  the  Tektronix
             window.

     font2 (class Font)
             Specifies font number 2 to use in the Tektronix win-
             dow.

     font3 (class Font)
             Specifies font number 3 to use in the Tektronix win-
             dow.

     fontSmall (class Font)
             Specifies the small font to  use  in  the  Tektronix
             window.

     initialFont (class InitialFont)
             Specifies which of the four Tektronix fonts  to  use



X Version 11         Last change: Release 5                    15






xterm(1)                  User Commands                  xterm(1)



             initially.   Values are the same as for the _s_e_t-_t_e_k-
             _t_e_x_t action.  The default is ``large.''

     ginTerminator (class GinTerminator)
             Specifies what  character(s)  should  follow  a  GIN
             report  or  status  report.   The  possibilities are
             ``none,'' which  sends  no  terminating  characters,
             ``CRonly,''  which  sends  CR, and ``CR&EOT,'' which
             sends both CR and EOT.  The default is ``none.''


     The resources that may be specified for  the  various  menus
     are described in the documentation for the Athena SimpleMenu
     widget.  The name and classes of the entries in each of  the
     menus are listed below.

     The _m_a_i_n_M_e_n_u has the following entries:

     securekbd (class SmeBSB)
             This entry invokes the secure() action.

     allowsends (class SmeBSB)
             This  entry  invokes  the  allow-send-events(toggle)
             action.

     logging (class SmeBSB)
             This entry invokes the set-logging(toggle) action.

     redraw (class SmeBSB)
             This entry invokes the redraw() action.

     line1 (class SmeLine)
             This is a separator.

     suspend (class SmeBSB)
             This entry invokes the send-signal(tstp)  action  on
             systems that support job control.

     continue (class SmeBSB)
             This entry invokes the send-signal(cont)  action  on
             systems that support job control.

     interrupt (class SmeBSB)
             This entry invokes the send-signal(int) action.

     hangup (class SmeBSB)
             This entry invokes the send-signal(hup) action.

     terminate (class SmeBSB)
             This entry invokes the send-signal(term) action.

     kill (class SmeBSB)



X Version 11         Last change: Release 5                    16






xterm(1)                  User Commands                  xterm(1)



             This entry invokes the send-signal(kill) action.

     line2 (class SmeLine)
             This is a separator.

     quit (class SmeBSB)
             This entry invokes the quit() action.


     The _v_t_M_e_n_u has the following entries:

     scrollbar (class SmeBSB)
             This entry invokes the set-scrollbar(toggle) action.

     jumpscroll (class SmeBSB)
             This  entry   invokes   the   set-jumpscroll(toggle)
             action.

     reversevideo (class SmeBSB)
             This  entry  invokes  the  set-reverse-video(toggle)
             action.

     autowrap (class SmeBSB)
             This entry invokes the set-autowrap(toggle) action.

     reversewrap (class SmeBSB)
             This  entry  invokes   the   set-reversewrap(toggle)
             action.

     autolinefeed (class SmeBSB)
             This  entry  invokes  the   set-autolinefeed(toggle)
             action.

     appcursor (class SmeBSB)
             This entry invokes the set-appcursor(toggle) action.

     appkeypad (class SmeBSB)
             This entry invokes the set-appkeypad(toggle) action.

     scrollkey (class SmeBSB)
             This  entry  invokes  the  set-scroll-on-key(toggle)
             action.

     scrollttyoutput (class SmeBSB)
             This   entry    invokes    the    set-scroll-on-tty-
             output(toggle) action.

     allow132 (class SmeBSB)
             This entry invokes the set-allow132(toggle) action.

     cursesemul (class SmeBSB)
             This  entry   invokes   the   set-cursesemul(toggle)



X Version 11         Last change: Release 5                    17






xterm(1)                  User Commands                  xterm(1)



             action.

     visualbell (class SmeBSB)
             This  entry   invokes   the   set-visualbell(toggle)
             action.

     marginbell (class SmeBSB)
             This  entry   invokes   the   set-marginbell(toggle)
             action.

     altscreen (class SmeBSB)
             This entry is currently disabled.

     line1 (class SmeLine)
             This is a separator.

     softreset (class SmeBSB)
             This entry invokes the soft-reset() action.

     hardreset (class SmeBSB)
             This entry invokes the hard-reset() action.

     clearsavedlines (class SmeBSB)
             This entry invokes the clear-saved-lines() action.

     line2 (class SmeLine)
             This is a separator.

     tekshow (class SmeBSB)
             This entry  invokes  the  set-visibility(tek,toggle)
             action.

     tekmode (class SmeBSB)
             This  entry   invokes   the   set-terminal-type(tek)
             action.

     vthide (class SmeBSB)
             This  entry   invokes   the   set-visibility(vt,off)
             action.


     The _f_o_n_t_M_e_n_u has the following entries:

     fontdefault (class SmeBSB)
             This entry invokes the set-vt-font(d) action.

     font1 (class SmeBSB)
             This entry invokes the set-vt-font(1) action.

     font2 (class SmeBSB)
             This entry invokes the set-vt-font(2) action.




X Version 11         Last change: Release 5                    18






xterm(1)                  User Commands                  xterm(1)



     font3 (class SmeBSB)
             This entry invokes the set-vt-font(3) action.

     font4 (class SmeBSB)
             This entry invokes the set-vt-font(4) action.

     font5 (class SmeBSB)
             This entry invokes the set-vt-font(5) action.

     font6 (class SmeBSB)
             This entry invokes the set-vt-font(6) action.

     fontescape (class SmeBSB)
             This entry invokes the set-vt-font(e) action.

     fontsel (class SmeBSB)
             This entry invokes the set-vt-font(s) action.


     The _t_e_k_M_e_n_u has the following entries:

     tektextlarge (class SmeBSB)
             This entry invokes the set-tek-text(l) action.

     tektext2 (class SmeBSB)
             This entry invokes the set-tek-text(2) action.

     tektext3 (class SmeBSB)
             This entry invokes the set-tek-text(3) action.

     tektextsmall (class SmeBSB)
             This entry invokes the set-tek-text(s) action.

     line1 (class SmeLine)
             This is a separator.

     tekpage (class SmeBSB)
             This entry invokes the tek-page() action.

     tekreset (class SmeBSB)
             This entry invokes the tek-reset() action.

     tekcopy (class SmeBSB)
             This entry invokes the tek-copy() action.

     line2 (class SmeLine)
             This is a separator.

     vtshow (class SmeBSB)
             This  entry  invokes  the  set-visibility(vt,toggle)
             action.




X Version 11         Last change: Release 5                    19






xterm(1)                  User Commands                  xterm(1)



     vtmode (class SmeBSB)
             This entry invokes the set-terminal-type(vt) action.

     tekhide (class SmeBSB)
             This entry  invokes  the  set-visibility(tek,toggle)
             action.


     The following resources are useful when  specified  for  the
     Athena Scrollbar widget:

     thickness (class Thickness)
             Specifies the width in pixels of the scrollbar.

     background (class Background)
             Specifies the color to use for the background of the
             scrollbar.

     foreground (class Foreground)
             Specifies the color to use for the foreground of the
             scrollbar.  The ``thumb'' of the scrollbar is a sim-
             ple  checkerboard  pattern  alternating  pixels  for
             foreground and background color.

POINTER USAGE
     Once the VT102 window is created, _x_t_e_r_m allows you to select
     text and copy it within the same or other windows.

     The selection functions are invoked when the pointer buttons
     are  used with no modifiers, and when they are used with the
     ``shift'' key.  The assignment of  the  functions  described
     below  to  keys  and  buttons  may  be  changed  through the
     resource database; see ACTIONS below.

     Pointer button one (usually left) is used to save text  into
     the  cut  buffer.  Move the cursor to beginning of the text,
     and then hold the button down while moving the cursor to the
     end  of  the  region and releasing the button.  The selected
     text is highlighted and is saved in the  global  cut  buffer
     and  made the PRIMARY selection when the button is released.
     Double-clicking selects by words.   Triple-clicking  selects
     by  lines.  Quadruple-clicking goes back to characters, etc.
     Multiple-click is determined by the time from button  up  to
     button  down,  so  you  can change the selection unit in the
     middle of a selection.  If the key/button  bindings  specify
     that  an  X  selection  is  to be made, _x_t_e_r_m will leave the
     selected text highlighted for as long as it is the selection
     owner.

     Pointer button two (usually  middle)  `types'  (pastes)  the
     text  from the PRIMARY selection, if any, otherwise from the
     cut buffer, inserting it as keyboard input.



X Version 11         Last change: Release 5                    20






xterm(1)                  User Commands                  xterm(1)



     Pointer button three (usually  right)  extends  the  current
     selection.   (Without  loss  of  generality,  you  can  swap
     ``right'' and ``left'' everywhere in the rest of this  para-
     graph.)   If  pressed  while closer to the right edge of the
     selection than the left, it extends/contracts the right edge
     of  the  selection.   If you contract the selection past the
     left edge of the selection, _x_t_e_r_m assumes you  really  meant
     the   left  edge,  restores  the  original  selection,  then
     extends/contracts the left edge of the selection.  Extension
     starts in the selection unit mode that the last selection or
     extension was performed in; you can multiple-click to  cycle
     through them.

     By cutting and pasting pieces of text without  trailing  new
     lines,  you  can  take text from several places in different
     windows and form a command to the  shell,  for  example,  or
     take  output from a program and insert it into your favorite
     editor.  Since the cut buffer is globally shared among  dif-
     ferent  applications, you should regard it as a `file' whose
     contents you know.  The terminal  emulator  and  other  text
     programs  should  be  treating it as if it were a text file,
     i.e., the text is delimited by new lines.

     The scroll region displays the position and amount  of  text
     currently  showing  in  the window (highlighted) relative to
     the amount of text actually saved.  As more  text  is  saved
     (up  to  the  maximum),  the  size  of  the highlighted area
     decreases.

     Clicking button one with the pointer in  the  scroll  region
     moves the adjacent line to the top of the display window.

     Clicking button three moves the top line of the display win-
     dow down to the pointer position.

     Clicking button two moves the display to a position  in  the
     saved text that corresponds to the pointer's position in the
     scrollbar.

     Unlike the VT102 window, the Tektronix window dows not allow
     the  copying of text.  It does allow Tektronix GIN mode, and
     in this mode the cursor will  change  from  an  arrow  to  a
     cross.   Pressing any key will send that key and the current
     coordinate of the cross cursor.  Pressing button  one,  two,
     or  three will return the letters `l', `m', and `r', respec-
     tively.  If the `shift' key is pressed when a pointer button
     is pressed, the corresponding upper case letter is sent.  To
     distinguish a pointer button from a key, the high bit of the
     character  is  set  (but  this  is  bit is normally stripped
     unless the terminal mode is RAW; see _t_t_y(4) for details).





X Version 11         Last change: Release 5                    21






xterm(1)                  User Commands                  xterm(1)



MENUS
     _X_t_e_r_m has four menus, named _m_a_i_n_M_e_n_u, _v_t_M_e_n_u, _f_o_n_t_M_e_n_u,  and
     _t_e_k_M_e_n_u.   Each  menu pops up under the correct combinations
     of key and button presses.  Most menus are divided into  two
     section,  separated  by  a horizontal line.  The top portion
     contains various modes that can be altered.   A  check  mark
     appears  next to a mode that is currently active.  Selecting
     one of these modes toggles its state.  The bottom portion of
     the  menu  are  command entries; selecting one of these per-
     forms the indicated function.

     The xterm menu pops up when the ``control'' key and  pointer
     button  one  are pressed in a window.  The _m_a_i_n_M_e_n_u contains
     items that apply to both the VT102  and  Tektronix  windows.
     The Secure Keyboard mode is be used when typing in passwords
     or other sensitive data  in  an  unsecure  environment;  see
     SECURITY  below.   Notable entries in the command section of
     the menu are the Continue, Suspend, Interrupt, Hangup,  Ter-
     minate  and  Kill  which sends the SIGCONT, SIGTSTP, SIGINT,
     SIGHUP, SIGTERM and SIGKILL signals,  respectively,  to  the
     process  group  of  the process running under _x_t_e_r_m (usually
     the shell).  The Continue function is especially  useful  if
     the  user has accidentally typed CTRL-Z, suspending the pro-
     cess.

     The _v_t_M_e_n_u sets various modes in the VT102 emulation, and is
     popped  up  when  the ``control'' key and pointer button two
     are pressed in the VT102 window.  In the command section  of
     this  menu,  the soft reset entry will reset scroll regions.
     This can be convenient when some program has left the scroll
     regions  set  incorrectly (often a problem when using VMS or
     TOPS-20).  The full reset entry will clear the screen, reset
     tabs  to  every  eight columns, and reset the terminal modes
     (such as wrap and smooth scroll)  to  their  initial  states
     just  after  _x_t_e_r_m  has finished processing the command line
     options.

     The _f_o_n_t_M_e_n_u sets the font used in  the  VT102  window.   In
     addition  to  the  default font and a number of alternatives
     that are set with resources, the menu offers the  font  last
     specified  by the Set Font escape sequence (see the document
     _X_t_e_r_m _C_o_n_t_r_o_l _S_e_q_u_e_n_c_e_s) and the current selection as a font
     name (if the PRIMARY selection is owned).

     The _t_e_k_M_e_n_u sets various modes in the  Tektronix  emulation,
     and is popped up when the ``control'' key and pointer button
     two are pressed in the Tektronix window.  The  current  font
     size  is checked in the modes section of the menu.  The PAGE
     entry in the command section clears the Tektronix window.

SECURITY




X Version 11         Last change: Release 5                    22






xterm(1)                  User Commands                  xterm(1)



     X environments differ in their security consciousness.   MIT
     servers,  run  under  _x_d_m,  are  capable  of using a ``magic
     cookie'' authorization scheme that can provide a  reasonable
     level  of  security for many people.  If your server is only
     using a host-based mechanism to control access to the server
     (see  _x_h_o_s_t(_1)),  then  if  you enable access for a host and
     other users are also permitted to run clients on  that  same
     host,  there  is  every  possibility that someone can run an
     application that will use the basic services of the X proto-
     col  to  snoop  on  your activities, potentially capturing a
     transcript of everything you type at the keyboard.  This  is
     of particular concern when you want to type in a password or
     other sensitive data.  The best solution to this problem  is
     to use a better authorization mechanism that host-based con-
     trol, but a simple mechanism exists for protecting  keyboard
     input in _x_t_e_r_m.

     The xterm menu (see MENUS above) contains a Secure  Keyboard
     entry  which,  when enabled, ensures that all keyboard input
     is directed _o_n_l_y to _x_t_e_r_m (using the  GrabKeyboard  protocol
     request).   When  an  application prompts you for a password
     (or other sensitive data), you can  enable  Secure  Keyboard
     using  the  menu,  type in the data, and then disable Secure
     Keyboard using the menu again.  Only one X client at a  time
     can  secure  the  keyboard,  so  when  you attempt to enable
     Secure Keyboard it may fail.  In this case,  the  bell  will
     sound.   If the Secure Keyboard succeeds, the foreground and
     background colors will be exchanged (as if you selected  the
     Reverse  Video  entry  in  the  Modes  menu);  they  will be
     exchanged again when you exit secure mode.  If the colors do
     _n_o_t  switch, then you should be _v_e_r_y suspicious that you are
     being spoofed.  If the application you are running  displays
     a  prompt  before  asking  for the password, it is safest to
     enter secure mode _b_e_f_o_r_e the prompt gets displayed,  and  to
     make  sure  that the prompt gets displayed correctly (in the
     new colors), to minimize the probability of  spoofing.   You
     can  also bring up the menu again and make sure that a check
     mark appears next to the entry.

     Secure Keyboard mode will be disabled automatically if  your
     xterm  window  becomes iconified (or otherwise unmapped), or
     if you start up a reparenting window manager (that places  a
     title  bar  or  other decoration around the window) while in
     Secure Keyboard mode.  (This is a feature of the X  protocol
     not easily overcome.)  When this happens, the foreground and
     background colors will be switched back and  the  bell  will
     sound in warning.

CHARACTER CLASSES
     Clicking the middle mouse button twice in  rapid  succession
     will  cause  all characters of the same class (e.g. letters,
     white space, punctuation) to be selected.   Since  different



X Version 11         Last change: Release 5                    23






xterm(1)                  User Commands                  xterm(1)



     people   have  different  preferences  for  what  should  be
     selected (for example, should filenames  be  selected  as  a
     whole  or  only  the separate subnames), the default mapping
     can be overridden through the use of  the  _c_h_a_r_C_l_a_s_s  (class
     _C_h_a_r_C_l_a_s_s) resource.

     This resource is simply a list of  _r_a_n_g_e:_v_a_l_u_e  pairs  where
     the range is either a single number or _l_o_w-_h_i_g_h in the range
     of 0 to 127, corresponding to the ASCII code for the charac-
     ter  or  characters  to  be  set.   The  _v_a_l_u_e is arbitrary,
     although the default table uses the character number of  the
     first character occurring in the set.

     The default table is:

             static int charClass[128] = {
             /* NUL  SOH  STX  ETX  EOT  ENQ  ACK  BEL */
                 32,   1,   1,   1,   1,   1,   1,   1,
             /*  BS   HT   NL   VT   NP   CR   SO   SI */
                  1,  32,   1,   1,   1,   1,   1,   1,
             /* DLE  DC1  DC2  DC3  DC4  NAK  SYN  ETB */
                  1,   1,   1,   1,   1,   1,   1,   1,
             /* CAN   EM  SUB  ESC   FS   GS   RS   US */
                  1,   1,   1,   1,   1,   1,   1,   1,
             /*  SP    !    "    #    $    %    &    ' */
                 32,  33,  34,  35,  36,  37,  38,  39,
             /*   (    )    *    +    ,    -    .    / */
                 40,  41,  42,  43,  44,  45,  46,  47,
             /*   0    1    2    3    4    5    6    7 */
                 48,  48,  48,  48,  48,  48,  48,  48,
             /*   8    9    :    ;    <    =    >    ? */
                 48,  48,  58,  59,  60,  61,  62,  63,
             /*   @    A    B    C    D    E    F    G */
                 64,  48,  48,  48,  48,  48,  48,  48,
             /*   H    I    J    K    L    M    N    O */
                 48,  48,  48,  48,  48,  48,  48,  48,
             /*   P    Q    R    S    T    U    V    W */
                 48,  48,  48,  48,  48,  48,  48,  48,
             /*   X    Y    Z    [    \    ]    ^    _ */
                 48,  48,  48,  91,  92,  93,  94,  48,
             /*   `    a    b    c    d    e    f    g */
                 96,  48,  48,  48,  48,  48,  48,  48,
             /*   h    i    j    k    l    m    n    o */
                 48,  48,  48,  48,  48,  48,  48,  48,
             /*   p    q    r    s    t    u    v    w */
                 48,  48,  48,  48,  48,  48,  48,  48,
             /*   x    y    z    {    |    }    ~  DEL */
                 48,  48,  48, 123, 124, 125, 126,   1};

     For example, the string ``33:48,37:48,45-47:48,64:48'' indi-
     cates that the exclamation mark, percent sign, dash, period,
     slash, and ampersand characters should be treated  the  same



X Version 11         Last change: Release 5                    24






xterm(1)                  User Commands                  xterm(1)



     way as characters and numbers.  This is very useful for cut-
     ting and pasting electronic mailing addresses and filenames.

ACTIONS
     It is possible to rebind keys  (or  sequences  of  keys)  to
     arbitrary  strings  for  input, by changing the translations
     for the vt100 or tek4014 widgets.  Changing the translations
     for events other than key and button events is not expected,
     and  will  cause  unpredictable  behavior.   The   following
     actions  are  provided for using within the _v_t_1_0_0 or _t_e_k_4_0_1_4
     translations resources:

     bell([_p_e_r_c_e_n_t])
             This action rings the keyboard bell at the specified
             percentage above or below the base volume.

     ignore()
             This action ignores the event but checks for special
             pointer position escape sequences.

     insert()
             This action inserts the character or string  associ-
             ated with the key that was pressed.

     insert-seven-bit()
             This action is a synonym for insert()

     insert-eight-bit()
             This action inserts an eight-bit (Meta)  version  of
             the character or string associated with the key that
             was pressed.  The exact action depends on the  value
             of the eightBitInput resource.

     insert-selection(_s_o_u_r_c_e_n_a_m_e [, ...])
             This action inserts the string found in  the  selec-
             tion  or cutbuffer indicated by _s_o_u_r_c_e_n_a_m_e.  Sources
             are checked in the order given (case is significant)
             until   one   is  found.   Commonly-used  selections
             include:  _P_R_I_M_A_R_Y, _S_E_C_O_N_D_A_R_Y,  and  _C_L_I_P_B_O_A_R_D.   Cut
             buffers  are  typically  named  _C_U_T__B_U_F_F_E_R_0  through
             _C_U_T__B_U_F_F_E_R_7.

     keymap(_n_a_m_e)
             This action dynamically defines  a  new  translation
             table  whose  resource  name is _n_a_m_e with the suffix
             _K_e_y_m_a_p  (case  is  significant).   The   name   _N_o_n_e
             restores the original translation table.

     popup-menu(_m_e_n_u_n_a_m_e)
             This  action  displays  the  specified  popup  menu.
             Valid  names  (case  is significant) include:  _m_a_i_n_-
             _M_e_n_u, _v_t_M_e_n_u, _f_o_n_t_M_e_n_u, and _t_e_k_M_e_n_u.



X Version 11         Last change: Release 5                    25






xterm(1)                  User Commands                  xterm(1)



     secure()
             This  action  toggles  the  _S_e_c_u_r_e   _K_e_y_b_o_a_r_d   mode
             described  in  the  section  named  SECURITY, and is
             invoked from the securekbd entry in _m_a_i_n_M_e_n_u.

     select-start()
             This action begins text  selection  at  the  current
             pointer  location.  See the section on POINTER USAGE
             for information on making selections.

     select-extend()
             This action  tracks  the  pointer  and  extends  the
             selection.   It  should  only  be  bound  to  Motion
             events.

     select-end(_d_e_s_t_n_a_m_e [, ...])
             This action puts the currently  selected  text  into
             all  of  the  selections  or cutbuffers specified by
             _d_e_s_t_n_a_m_e.

     select-cursor-start()
             This action is similar to select-start  except  that
             it  begins  the selection at the current text cursor
             position.

     select-cursor-end(_d_e_s_t_n_a_m_e [, ...])
             This action is similar to select-end except that  it
             should be used with select-cursor-start.

     set-vt-font(_d/_1/_2/_3/_4/_5/_6/_e/_s [,_n_o_r_m_a_l_f_o_n_t [, _b_o_l_d_f_o_n_t]])
             This action sets the font or fonts  currently  being
             used  in  the VT102 window.  The first argument is a
             single character that specifies the font to be used:
             _d or _D indicate the default font (the font initially
             used when _x_t_e_r_m was started), _1 through  _6  indicate
             the  fonts  specified  by  the  _f_o_n_t_1  through _f_o_n_t_6
             resources, _e or _E indicate the normal and bold fonts
             that  have  been set through escape codes (or speci-
             fied as  the  second  and  third  action  arguments,
             respectively),  and  _s or _S indicate the font selec-
             tion (as made by programs such as _x_f_o_n_t_s_e_l(_1)) indi-
             cated by the second action argument.

     start-extend()
             This action is similar to select-start  except  that
             the  selection  is  extended  to the current pointer
             location.

     start-cursor-extend()
             This action is similar to select-extend except  that
             the selection is extended to the current text cursor
             position.



X Version 11         Last change: Release 5                    26






xterm(1)                  User Commands                  xterm(1)



     string(_s_t_r_i_n_g)
             This action inserts the specified text string as  if
             it  had  been  typed.  Quotation is necessary if the
             string contains whitespace or non-alphanumeric char-
             acters.   If  the  string  argument  begins with the
             characters ``0x'', it is interpreted as a hex  char-
             acter constant.

     scroll-back(_c_o_u_n_t [,_u_n_i_t_s])
             This action scrolls the text window backward so that
             text that had previously scrolled off the top of the
             screen is now visible.  The _c_o_u_n_t argument indicates
             the  number  of  _u_n_i_t_s (which may be _p_a_g_e, _h_a_l_f_p_a_g_e,
             _p_i_x_e_l, or _l_i_n_e) by which to scroll.

     scroll-forw(_c_o_u_n_t [,_u_n_i_t_s])
             This action scrolls is similar to scroll-back except
             that it scrolls the other direction.

     allow-send-events(_o_n/_o_f_f/_t_o_g_g_l_e)
             This  action  set  or  toggles  the  allowSendEvents
             resource and is also invoked by the allowsends entry
             in _m_a_i_n_M_e_n_u.

     set-logging(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the logging resource and is also
             invoked by the logging entry in _m_a_i_n_M_e_n_u.

     redraw()
             This action redraws the window and is  also  invoked
             by the _r_e_d_r_a_w entry in _m_a_i_n_M_e_n_u.

     send-signal(_s_i_g_n_a_m_e)
             This action sends the signal named by _s_i_g_n_a_m_e to the
             _x_t_e_r_m  subprocess  (the  shell  or program specified
             with the -_e command line option) and is also invoked
             by  the  suspend,  continue, interrupt, hangup, ter-
             minate, and _k_i_l_l  entries  in  _m_a_i_n_M_e_n_u.   Allowable
             signal  names  are  (case is not significant):  _t_s_t_p
             (if supported  by  the  operating  system),  _s_u_s_p_e_n_d
             (same  as _t_s_t_p), _c_o_n_t (if supported by the operating
             system), _i_n_t, _h_u_p, _t_e_r_m, _q_u_i_t, _a_l_r_m, _a_l_a_r_m (same  as
             _a_l_r_m) and _k_i_l_l.

     quit()  This action sends a SIGHUP  to  the  subprogram  and
             exits.   It  is  also  invoked  by the quit entry in
             _m_a_i_n_M_e_n_u.

     set-scrollbar(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the scrollbar  resource  and  is
             also invoked by the scrollbar entry in _v_t_M_e_n_u.




X Version 11         Last change: Release 5                    27






xterm(1)                  User Commands                  xterm(1)



     set-jumpscroll(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the jumpscroll resource  and  is
             also invoked by the jumpscroll entry in _v_t_M_e_n_u.

     set-reverse-video(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the _r_e_v_e_r_s_e_V_i_d_e_o resource and is
             also invoked by the reversevideo entry in _v_t_M_e_n_u.

     set-autowrap(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles automatic wrapping of long lines
             and is also invoked by the autowrap entry in _v_t_M_e_n_u.

     set-reversewrap(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the reverseWrap resource and  is
             also invoked by the reversewrap entry in _v_t_M_e_n_u.

     set-autolinefeed(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles automatic insertion of linefeeds
             and  is  also  invoked  by the autolinefeed entry in
             _v_t_M_e_n_u.

     set-appcursor(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the handling Application  Cursor
             Key mode and is also invoked by the Bappcursor entry
             in _v_t_M_e_n_u.

     set-appkeypad(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action  toggles  the  handling  of  Application
             Keypad  mode  and  is  also invoked by the appkeypad
             entry in _v_t_M_e_n_u.

     set-scroll-on-key(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the scrollKey  resource  and  is
             also invoked from the scrollkey entry in _v_t_M_e_n_u.

     set-scroll-on-tty-output(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the scrollTtyOutput resource and
             is  also  invoked  from the scrollttyoutput entry in
             _v_t_M_e_n_u.

     set-allow132(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the c132 resource  and  is  also
             invoked from the allow132 entry in _v_t_M_e_n_u.

     set-cursesemul(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the curses resource and is  also
             invoked from the cursesemul entry in _v_t_M_e_n_u.

     set-visual-bell(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the visualBell resource  and  is
             also invoked by the visualbell entry in _v_t_M_e_n_u.




X Version 11         Last change: Release 5                    28






xterm(1)                  User Commands                  xterm(1)



     set-marginbell(_o_n/_o_f_f/_t_o_g_g_l_e)
             This action toggles the marginBell resource  and  is
             also invoked from the marginbell entry in _v_t_M_e_n_u.

     set-altscreen(_o_n/_o_f_f/_t_o_g_g_l_e)
             This  action  toggles  between  the  alternate   and
             current screens.

     soft-reset()
             This action resets the scrolling region and is  also
             invoked from the softreset entry in _v_t_M_e_n_u.

     hard-reset()
             This action resets the scrolling region, tabs,  win-
             dow size, and cursor keys and clears the screen.  It
             is also invoked from the hardreset entry in _v_t_M_e_n_u.

     clear-saved-lines()
             This action does hard-reset() (see above)  and  also
             clears the history of lines saved off the top of the
             screen.  It is also invoked from the clearsavedlines
             entry in _v_t_M_e_n_u.

     set-terminal-type(_t_y_p_e)
             This action directs output to either the _v_t  or  _t_e_k
             windows,  according  to the _t_y_p_e string.  It is also
             invoked by the  tekmode  entry  in  _v_t_M_e_n_u  and  the
             vtmode entry in _t_e_k_M_e_n_u.

     set-visibility(_v_t/_t_e_k,_o_n/_o_f_f/_t_o_g_g_l_e)
             This action controls whether or not the  _v_t  or  _t_e_k
             windows  are  visible.   It is also invoked from the
             tekshow and vthide entries in _v_t_M_e_n_u and the  vtshow
             and tekhide entries in _t_e_k_M_e_n_u.

     set-tek-text(_l_a_r_g_e/_2/_3/_s_m_a_l_l)
             This action sets font used in the  Tektronix  window
             to  the  value  of  the resources tektextlarge, tek-
             text2, tektext3, and tektextsmall according  to  the
             argument.   It  is  also  by the entries of the same
             names as the resources in _t_e_k_M_e_n_u.

     tek-page()
             This action clears the Tektronix window and is  also
             invoked by the tekpage entry in _t_e_k_M_e_n_u.

     tek-reset()
             This action resets the Tektronix window and is  also
             invoked by the _t_e_k_r_e_s_e_t entry in _t_e_k_M_e_n_u.

     tek-copy()
             This action copies the escape codes used to generate



X Version 11         Last change: Release 5                    29






xterm(1)                  User Commands                  xterm(1)



             the current window contents to a file in the current
             directory beginning with the name COPY.  It is  also
             invoked from the _t_e_k_c_o_p_y entry in _t_e_k_M_e_n_u.

     visual-bell()
             This action flashes the window quickly.

     The Tektronix window also has the following action:

     gin-press(_l/_L/_m/_M/_r/_R)
             This action sends the indicated graphics input code.

     The default bindings in the VT102 window are:

          Shift <KeyPress> Prior: scroll-back(1,halfpage) \n\
           Shift <KeyPress> Next: scroll-forw(1,halfpage) \n\
         Shift <KeyPress> Select: select-cursor-start() \
                                  select-cursor-end(PRIMARY, CUT_BUFFER0) \n\
         Shift <KeyPress> Insert: insert-selection(PRIMARY, CUT_BUFFER0) \n\
                 ~Meta<KeyPress>: insert-seven-bit() \n\
                  Meta<KeyPress>: insert-eight-bit() \n\
                !Ctrl <Btn1Down>: popup-menu(mainMenu) \n\
           !Lock Ctrl <Btn1Down>: popup-menu(mainMenu) \n\
                ~Meta <Btn1Down>: select-start() \n\
              ~Meta <Btn1Motion>: select-extend() \n\
                !Ctrl <Btn2Down>: popup-menu(vtMenu) \n\
           !Lock Ctrl <Btn2Down>: popup-menu(vtMenu) \n\
          ~Ctrl ~Meta <Btn2Down>: ignore() \n\
            ~Ctrl ~Meta <Btn2Up>: insert-selection(PRIMARY, CUT_BUFFER0) \n\
                !Ctrl <Btn3Down>: popup-menu(fontMenu) \n\
           !Lock Ctrl <Btn3Down>: popup-menu(fontMenu) \n\
          ~Ctrl ~Meta <Btn3Down>: start-extend() \n\
              ~Meta <Btn3Motion>: select-extend() \n\
                                          <BtnUp>:select-end(PRIMARY, CUT_BUFFER0) \n\
                       <BtnDown>: bell(0)


     The default bindings in the Tektronix window are:

               ~Meta<KeyPress>:   insert-seven-bit() \n\
                Meta<KeyPress>:   insert-eight-bit() \n\
              !Ctrl <Btn1Down>:   popup-menu(mainMenu) \n\
         !Lock Ctrl <Btn1Down>:   popup-menu(mainMenu) \n\
              !Ctrl <Btn2Down>:   popup-menu(tekMenu) \n\
         !Lock Ctrl <Btn2Down>:   popup-menu(tekMenu) \n\
         Shift ~Meta<Btn1Down>:   gin-press(L) \n\
               ~Meta<Btn1Down>:   gin-press(l) \n\
         Shift ~Meta<Btn2Down>:   gin-press(M) \n\
               ~Meta<Btn2Down>:   gin-press(m) \n\
         Shift ~Meta<Btn3Down>:   gin-press(R) \n\
               ~Meta<Btn3Down>:   gin-press(r)




X Version 11         Last change: Release 5                    30






xterm(1)                  User Commands                  xterm(1)



     Below is a sample how of the keymap() action is used to  add
     special keys for entering commonly-typed works:

         *VT100.Translations: #override <Key>F13: keymap(dbx)
         *VT100.dbxKeymap.translations: \
              <Key>F14: keymap(None) \n\
              <Key>F17: string("next") string(0x0d) \n\
              <Key>F18: string("step") string(0x0d) \n\
              <Key>F19: string("continue") string(0x0d) \n\
              <Key>F20: string("print ") insert-selection(PRIMARY, CUT_BUFFER0)


ENVIRONMENT
     Xterm  sets   the   environment   variables   ``TERM''   and
     ``TERMCAP''  properly  for the size window you have created.
     It also uses and sets the environment  variable  ``DISPLAY''
     to  specify  which  bit  map  display  terminal to use.  The
     environment variable ``WINDOWID'' is set to the X window  id
     number of the _x_t_e_r_m window.

SEE ALSO
     resize(1), X11(7), tty(1)
     _X_t_e_r_m _C_o_n_t_r_o_l _S_e_q_u_e_n_c_e_s (in the xterm source directory)

BUGS
     Large pastes do not work on some systems.  This is not a bug
     in  xterm  ;  it  is  a bug in the pseudo terminal driver of
     those systems.  xterm feeds large pastes to the will  accept
     data,  but some pty drivers do not return enough information
     to know if the write has succeeded.

     Many of the options are not resettable after xterm starts.

     The Tek widget does not support key/button re-binding.

     Only fixed-width, character-cell fonts are supported.

     This program still needs to  be  rewritten.   It  should  be
     split into very modular sections, with the various emulators
     being completely separate widgets that don't know about each
     other.   Ideally,  you'd  like to be able to pick and choose
     emulator widgets  and  stick  them  into  a  single  control
     widget.

     There needs to be a dialog box to allow entry  of  log  file
     name and the COPY file name.

COPYRIGHT
     Copyright 1989, Massachusetts Institute of Technology.
     See X11(7) for a full statement of rights and permissions.





X Version 11         Last change: Release 5                    31






xterm(1)                  User Commands                  xterm(1)



AUTHORS
     Far too many people, including:

     Loretta Guarino Reid  (DEC-UEG-WSL),  Joel  McCormack  (DEC-
     UEG-WSL),  Terry  Weissman (DEC-UEG-WSL), Edward Moy (Berke-
     ley), Ralph R. Swick (MIT-Athena),  Mark  Vandevoorde  (MIT-
     Athena),  Bob  McNamara  (DEC-MAD), Jim Gettys (MIT-Athena),
     Bob Scheifler (MIT X Consortium),  Doug  Mink  (SAO),  Steve
     Pitschke (Stellar), Ron Newman (MIT-Athena), Jim Fulton (MIT
     X Consortium), Dave  Serisky  (HP),  Jonathan  Kamens  (MIT-
     Athena)












































X Version 11         Last change: Release 5                    32



