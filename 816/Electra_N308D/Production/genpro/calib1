C*****************************************************************************
C Changed order of moisture variable calculations -- June 1991 -- Ron Ruth
C Originally done for project 1-739 Smith/Kok
C Necessitated by use of cryogenic hygrometer whose output occurs in LEVEL 3
C Moisture calculations now in LEVELs 4 and 5, allowing the cryogenic
C   hygrometer to be used as a reference, if desired
c
c Mods for Harp Project:   Jan. 1991  -cc
c BIAS added for TASF
c Commented out some input information on PLWC
C
      SUBROUTINE CALIB1
.REPL
.USE  TBLANK
.USE  TCYCVAR
.USE  TIOUNIT
.USE  TOP
.USE  BLANK
.USE  CYCVAR
.USE  OP
.USE  ERROR
.USE  IOUNIT
.USE  CALCOM
.NOREP
      INTEGER TITLE,UNITS,CONSU
      DIMENSION NAMQC(2),NAMSOU(9),LRGUST(8),LRGUSTR(8)
      DIMENSION NGUST(8),KTSV(500),NRGUST(8),CONA(50),KUNIT(10)
     1         ,KONSN(50),KONU(50),KONN(50),KONVN(10),CONV(10),KONVU(10)
      COMMON/QC/IPQC1,IPQC2,LRTQC1,LRTQC2
      COMMON/GUSTIN/IPGUST(8)
      COMMON/GUSTINR/IRGUST(8)
      COMMON/PWRITE/ARAY(20),IY,IXK
      COMMON/HIST/LT(5),NCELLS,SIZE(64),NSIZE
      COMMON/PFSSP/TAU1,TAU2,TAU3,CWD(4),CBIAS(4),DOF,BDIA,NCSUMF,
     1             THRESHF,KRANGE,KSTROB,KRESET,MRATEF,MWORDF,MCELLF,
     2             SIZEF(15)
      COMMON/PASAS/NCSUMA,THRESHA,MRATEA,MWORDA,MCELLA
      COMMON/PX200/NCSUMX,THRESHX,MRATEX,MWORDX,MCELLX,SIZEX
      COMMON/PX260/NCSUM6,THRESH6,MRATE6,MWORD6,MCELL6,SIZE6
      COMMON/PY200/NCSUMY,THRESHY,MRATEY,MWORDY,MCELLY,SIZEY
      COMMON/PLWC/TWIRE,CN1,EN1
      COMMON/DLA/CX(4),XC,CX1(4),XC1
C
C-----------------------------------------------------------------------------
      DATA NATFR /8HATFR    /,NRHORF /8HRHORF   /
      DATA NTVCRH/8HTVCRH   /,NPCNC  /8HPCNC    /,NFCNC   /8HFCNC    /,
     1     NCONCNC/8HCONCNC  /,NXICNC/8HXICNC   /,NRHOCR  /8HRHOCR   /,
     2     NCNC  /8HCNC     / ,NCRYOC/8HCRYOC   /
      DATA NATF20/8HATF20   /,NPALT20/8HPALT20  /,NPSFDC20/8HPSFDC20 /,
     1     NQCFC20/8HQCFC20  /
      DATA NAKDF /8HAKDF    /,NAKFXL /8HAKFXL   /,NAKFXR  /8HAKFXR   /,
     A     NAKRD /8HAKRD    /,NAMASS /8HAMASS   /,NATB    /8HATB     /,
     A     NATBH /8HATBH    /,NATF   /8HATF     /,NATFH   /8HATFH    /,
     A     NATKP /8HATKP    /,NATK3  /8HATK3    /,NATRF   /8HATRF    /,
     A     NATW  /8HNATW    /,
     A     NASAS /8HASAS    /,NATWH  /8HATWH    /,NAVOLF  /8HAVOLF   /,
     A     NATOPH/8HATOPH   /,NATRW  /8HATRW    /,NATRE   /8HATRE    /,
     A     NATB1 /8HATB1    /,NATR3  /8HATR3    /,NATR6   /8HATR6    /
      DATA NBETA3/8HBETA3   /,NBMACH /8HBMACH   /,NATKPR  /8HATKPR   /,
     B     NBMACH2/8HBMACH2  /,NBRE  /8HBRE     /, NCONSN /8HFUNCTION/,
     C     NCONC2C/8HCONC2C  /,NCONC2P/8HCONC2P  /,NCONC2P2/8HCONC2P2 /,
     C     NCVI   /8HCVI     /,NDPCVC /8HDPCVC   /,NRHOCD  /8HRHOCD   /,
     C     NCLDHT /8HCLDHT   /,
     C     NCOC  /8HCOC     /,NDPCRC /8HDPCRC   /,
     D     NDA   /8HDA      /,NDIF   /2HDF/      ,NDO3C   /8HDO3C    /,
     D     NDLA  /8HDLA     /,NDLA1  /8HDLA1    /,NDMEC   /8HDMEC    /,
     D     NDPBC /8HDPBC    /,NDPC   /8HDPC     /,NDPTC   /8HDPTC    /,
     D     NSCLWC/8HSCLWC   /,NDVALU /8HDVALU   /,NDPGEC  /8HDPGEC   /
      DATA NFMACH/8HFMACH   /,NFMACH2/8HFMACH2  /,NFSSP   /8HFSSP    /,
     E     NETHETAK/8HETHETAK /,
     G     NGEDPC/8HGEDPC   /,NGERHOTD/8HGERHOTD /,
     G     NGMACH/8HGMACH   /,NGMACH2/8HGMACH2  /,NGUSTD  /8HGUSTD   /,
     G     NGSF  /8HGSF     /,NGUSTO /8HGUSTO   /,NGUSTR  /8HGUSTR   /,
     I     NIAS  /8HIAS     /,NIRBC  /8HIRBC    /,NIRTC   /8HIRTC    /,
     K     NKRA /8HKRA     /,NHRDFAFX/8HHRDFAFX /,NHRDFBFX/8HHRDFBFX /,
     L     NLWCC /8HLWCC    /,NLYAPX /8HLYAPX   /,NLYAP1  /8HLYAP1   /,
     L     NLWCCF/8HLWCCF   /,NLWCCZ/8HLWCCZ   /,
     L     NHGME /8HHGME    /,
     M     NMR   /8HMR      /,
     N     NNETI /8HNETI    /,NNETT  /8HNETT    /,NNETV   /8HNETV    /
      DATA NPALT /8HPALT    /,NPLCL  /8HPLCL    /,NPLWCC  /8HPLWCC   /,
     P     NPLWCCZ/8HPLWCCZ  /,   NPD/8HPD      /,
     P     NPLWCCF/8HPLWCCF   /,
     P     NPALTF/8HPALTF   /,NPSBC  /8HPSBC    /,NPSFC  /8HPSFC    /,
     P     NPSFDC/8HPSFDC   /,NPSURF /8HPSURF   /,NPSWC  /8HPSWC    /,
     P     NP210M/8HP210M   /,NPOSDF /8HPOSDF   /,NP2DFLG/8HP2DFLG  /,
     Q     NQCBC /8HQCBC    /,NQCFC  /8HQCFC    /,NQCGC  /8HQCGC    /,
     Q     NQCR  /8HQCR     /,NQCRC  /8HQCRC    /,NQCWC  /8HQCWC    /,
     Q     NQMR  /8HQMR     /,NTHETAQ/8HTHETAQ  /,NQCRCC /8HQCRCC   /,
     Q     NQCDC /8HQCDC    /
      DATA NRATIO/2HRZ/      ,NRE    /8HRE      /,NRHODGE/8HRHODGE  /,
     R     NRHODB/8HRHODB   /,NRHODT /8HRHODT   /,NRHUM  /8HRHUM    /,
     R     NRMACH/8HRMACH   /,NRMACH2/8HRMACH2  /,
     S     NSPHUM/8HSPHUM   /,NSSDF  /8HSSDF    /,NSSFXB /8HSSFXB   /,
     S     NSSFXT/8HSSFXT   /,NSSRD  /8HSSRD    /,NSUM   /2HSM/      ,
     T     NTASB /8HTASB    /,NTASF  /8HTASF    /,NTASD  /8HTASD    /,
     T     NTASG /8HTASG    /,NTASR  /8HTASR    /,NTASW  /8HTASW    /,
     T     NTHETA/8HTHETA   /,NTHETAE/8HTHETAE  /,NTHETAK/8HTHETAK  /,
     T     NTHETAV/8HTHETAV  /,NTLCL /8HTLCL    /,NTRKI  /8HTRKI    /,
     T     NTVIR /8HTVIR    /,NTEO3C /8HTEO3C   /,NTEPC  /8HTEPC    /,
     W     NWMACH/8HWMACH   /,NWMACH2/8HWMACH2  /,
     X     NX200/8HX200    /, NX260  /8HX260    /,
     X     NXXXXXX/8HXXXXXX  /, 
     Y     NY200/8HY200    /, NVARED /8HVARED   /,
     Y     NYYYYY /8HYYYYY   /,
     Z     NZPG    /8HZPG     /
      DATA MAXSOU/9/
C ** NEW VARIABLE NAMES CAN BE ADDED IN SAVE BLOCK ADDNVAR
.USE  ADDNVAR
C
C-----------------------------------------------------------------------
 3000 FORMAT(' CALIB WARNING: AT ',F3.1,' IERR=',I2,' THISOP=',I3,
     1 ' NSTAGE=',I3)
C------------------
C**1.0 THIS SECTION PERFORMS INITIALIZATIONS, EDITING, AND CONSISTENCY
C      CHECKING.
C**1.1 NSTAGE = 1, OR UNDEFINED.  ILLEGAL VALUES IN AN OPERATION.
      IF(NSTAGE .EQ. 1)
       AT = 1.1
       IERR = IERR + 1
       WRITE(KERR,3000) AT,IERR,THISOP,NSTAGE
       RETURN
C-----------------
C**1.2 NSTAGE = 2, CHECK CONTROLS, COMPUTE NEEDED OVERLAP, AND STATE
C      SAV AND SCR SPACE REQUIREMENTS.
C      ALLOCATE SAVE SPACE FOR LAST VALUES OF GUSTO/GUSTR VARIABLES
C      QTHETA,ETHETA,ATXH,DLA/SLYAP(LYMAN ALPHA VARS),LWCCZ,PLWCCZ,DMEC
C
C SUBNAME:POINTER (LOCATION) IN SAVE SPACE
C
C SGUSTO:  1-HX;2-HXX;3-WP3;4-HI3;5-PITCH0;6-THF0;7-VZIO;
C SGUSTR: 11-RHX;12-RHXX;13-RWP3;14-RHI3;15-RPITCH0;16-RTHF0;17-RVZIO
C STHETAQ: 8-SVQTA
C SRICE  : 9-RLAST;51-KCNT
C SETHETA:18-SVETA;
C SATXH  :19-ATBH; 20-ATFH;21-ATWH
c stpl:    22,23,24 (tiso3,4,5)
C SCOUNTS:25-SPRZC
C SAMASS :26-AMXC
C SLYAP1/SDLA : 31-N1;32-RHOLA;33-CORC1
C SYLAP2/SDLA1: 41-N1;42-RHOLA1;43-CORC1
C SLWCCZ : 34-INCLD;35-AJWOFF
C SPLWCCZ: 44-INCLD;45-TWIRE
C SDMEC  : USING SAVE STATEMENT FOR ITIMES,XCORR,YCORR,ISTATN,LASTFQ,
C          INDFRQ,NUMSTATS,VRTLN,VRTLT,STNALT,FQIND
C SCLRAN : 51-CFLAG
      OR IF(NSTAGE .EQ. 2)
       LENSAV(THISOP) = 100
       RETURN
C-----------------
C**1.3 NSTAGE = 3, INITIALIZE FOR THE SPACE WHICH HAS BEEN ALLOCATED
      OR IF(NSTAGE .EQ. 3)
       RETURN
      END IF
C-----------------
C**1.4 NSTAGE = 4, THIS IS THE FIRST CALL WITH NCDO CYCLES OF REAL DATA
C      END OF INITIALIZATION
C**1.5 NSTAGE = 4 OR 5.  WE ARE PROCESSING.  THIS IS NCDO CYCLES OF
C      REAL DATA AT NUMCAL(THISOP) .GE. 1
C---------------------------------------------------------------------
C****** ACCESS THE GENERAL  CONTROLS
C  DEFGEN=1-NAMEOP;2-NAMPD;3-NAMLIB;4-NUMCYC;5-ITYPOP;6-PROJECT(5);
C         7-QCREF(2);8-GUSTIN(8):(1)-LAT,(2)-ALPHA,
C           (3)-XVI,(4)-YVI,(5)-PITCH,(6)-ROLL,(7)-VZI,(8)-PALT
C         9-GUSTR(8)
C PMS FSSP PROBE:10-NCSUMF;11-THRESHF;12-TAU1;13-TAU2;14-TAU3;15-DOF;
C                16-BDIA;17-CWD(4);18-CBIAS(4);19-KRANGE;20-KSTROB;
C                21-KRESET;22-MRATEF;23-MWORDF;24-MCELLF;
C PMS ASASP PROBE:25-NCSUMA;26-THRESHA;27-MRATEA;28-MWORDA;29-MCELLA;
C PMS X200 PROBE:30-NCSUMX;31-THRESHX;32-MRATEX;33-MWORDX;34-MCELLX;
C PMS X260 PROBE:35-NCSUM6;36-THRESH6;37-MRATE6;38-MWORD6;39-MCELL6;
C PMS Y200 PROBE:40-NCSUMY;41-THRESHY;42-MRATEY;43-MWORDY;44-MCELLY;
C PMS LWC       :45-TWIRE;46-CN1;47-EN1
C PMS FSSP SIZEF:48-62
C PMS X200 SIZEX:49
C PMS X260 SIZE6:50
C PMS Y200 SIZEY:51
C     MRATE - PMS PROBE SAMPLING RATE
C     MWORD - TOTAL NO OF WORDS PER SAMPLE OF A PMS PROBE BLOCK
C     MCELL - TOTAL NO OF CELLS PER SAMPLE
C     KRANGE - LOCATION OF FSSP RANGE WORD
C     KSTROB - LOCATION OF FSSP STROBE WORD
C     KRESET - LOCATION OF FSSP RESET WORD
C     NCSUM = THE NO OF CELLS TO BE SUM UP FOR THRESH CHECK
C     THRESH= THRESH FOR PLOTING HISTOGRAM
C     TAU'S ARE MEASURED FSSP PROBE DELAYS IN SECONDS
C     DOF = FSSP MEASURED DEPTH OF FIELD (MM)
C     BDIA = FSSP MEASURED BEAM DIAMETER(MM)
C     FSSP CELL WIDTHS CORRESPONDING TO RANGES(IRANGE)1,2,3,4,(MICRONS)
C     CBIAS = CALIBRATED CELL WIDTH OFFSET     (MICRONS)
C
      INDST =1
.USE  INDEX
C** VALUES OF THE GENERAL CONTROLS STARTS AT ICON(INDVAL+INDEX FOR GEN)
C   WHERE INDEX= INDOFF + ITEM NUMBER
C   LT - PROJECT TITLE FOR PMS HISTOGRAMS
C   NAMQC - NAMES OF QC  USED FOR REFERENCE
C
      INDPJ = INDVAL + ICON(INDOFF+6)
      DO(K=1,5)
       LT(K)=ICON(INDPJ+K-1)
      END DO
      INDQC= INDVAL + ICON(INDOFF+7)
      DO(K= 1,2)
        NAMQC(K)=ICON(INDQC + K -1)
      END DO
      INGUST = INDVAL + ICON(INDOFF+8)
      DO(K= 1,8)
        NGUST(K)=ICON(INGUST+ K -1)
      END DO
      IGUSTR = INDVAL + ICON(INDOFF+9)
      DO(K= 1,8)
        NRGUST(K)=ICON(IGUSTR+ K -1)
      END DO
C** PMS FSSP CALIBRATION COEFS
      ISUMF = INDVAL + ICON(INDOFF+10)
      NCSUMF= ICON(ISUMF)
      ITHRF  = INDVAL + ICON(INDOFF+11)
      THRESHF=  CON(ITHRF)
      ITAU1 = INDVAL + ICON(INDOFF+12)
      TAU1  =  CON(ITAU1)
      ITAU2 = INDVAL + ICON(INDOFF+13)
      TAU2  =  CON(ITAU2)
      ITAU3 = INDVAL + ICON(INDOFF+14)
      TAU3  =  CON(ITAU3)
      IDOF  = INDVAL + ICON(INDOFF+15)
      DOF   =  CON(IDOF)
      IBDIA = INDVAL + ICON(INDOFF+16)
      BDIA  =  CON(IBDIA)
      IFW = INDVAL + ICON(INDOFF+17)
      IFB = INDVAL + ICON(INDOFF+18)
      DO(IL=1,4)
        CWD(IL)  = CON(IFW+IL-1)
        CBIAS(IL)= CON(IFB+IL-1)
      END DO
      IRANGE = INDVAL + ICON(INDOFF+19)
      KRANGE= ICON(IRANGE)
      ISTROB = INDVAL + ICON(INDOFF+20)
      KSTROB= ICON(ISTROB)
      IRESET = INDVAL + ICON(INDOFF+21)
      KRESET= ICON(IRESET)
      IRATEF = INDVAL + ICON(INDOFF+22)
      MRATEF= ICON(IRATEF)
      IWORDF = INDVAL + ICON(INDOFF+23)
      MWORDF= ICON(IWORDF)
      ICELLF = INDVAL + ICON(INDOFF+24)
      MCELLF= ICON(ICELLF)
C** PMS ASASP CALIBRATION COEFS
      ISUMA = INDVAL + ICON(INDOFF+25)
      NCSUMA= ICON(ISUMA )
      ITHRA  = INDVAL + ICON(INDOFF+26)
      THRESHA=  CON(ITHRA)
      IRATEA = INDVAL + ICON(INDOFF+27)
      MRATEA= ICON(IRATEA)
      IWORDA = INDVAL + ICON(INDOFF+28)
      MWORDA= ICON(IWORDA)
      ICELLA= INDVAL + ICON(INDOFF+29)
      MCELLA= ICON(ICELLA)
C** PMS X200 CALIBRATION COEFS
      ISUMX = INDVAL + ICON(INDOFF+30)
      NCSUMX= ICON(ISUMX)
      ITHRX  = INDVAL + ICON(INDOFF+31)
      THRESHX=  CON(ITHRX)
      IRATEX= INDVAL + ICON(INDOFF+32)
      MRATEX= ICON(IRATEX)
      IWORDX= INDVAL + ICON(INDOFF+33)
      MWORDX= ICON(IWORDX)
      ICELLX= INDVAL + ICON(INDOFF+34)
      MCELLX= ICON(ICELLX)
C** PMS X260 CALIBRATION COEFS
      ISUM6 = INDVAL + ICON(INDOFF+35)
      NCSUM6= ICON(ISUM6)
      ITHR6  = INDVAL + ICON(INDOFF+36)
      THRESH6=  CON(ITHR6)
      IRATE6= INDVAL + ICON(INDOFF+37)
      MRATE6= ICON(IRATE6)
      IWORD6 = INDVAL + ICON(INDOFF+38)
      MWORD6= ICON(IWORD6)
      ICELL6= INDVAL + ICON(INDOFF+39)
      MCELL6= ICON(ICELL6)
C** PMS Y200 CALIBRATION COEFS
      ISUMY = INDVAL + ICON(INDOFF+40)
      NCSUMY= ICON(ISUMY )
      ITHRY = INDVAL + ICON(INDOFF+41)
      THRESHY=  CON(ITHRY)
      IRATEY = INDVAL + ICON(INDOFF+42)
      MRATEY= ICON(IRATEY)
      IWORDY = INDVAL + ICON(INDOFF+43)
      MWORDY= ICON(IWORDY)
      ICELLY = INDVAL + ICON(INDOFF+44)
      MCELLY= ICON(ICELLY)
C** PMS LIQUIT WATER CONSTANTS:TWIRE,CN1,EN1
      ITWIRE = INDVAL + ICON(INDOFF+45)
      TWIRE = CON(ITWIRE)
      ICN1  = INDVAL + ICON(INDOFF+46)
      CN1   = CON(ICN1)
      IEN1 = INDVAL + ICON(INDOFF+47)
      EN1  = CON(IEN1)
C** PMS CELL SIZE TABLE OR CALCULATION CONSTANT
      ISZF= INDVAL + ICON(INDOFF+48)
      DO(IL=1,15)
        SIZEF(IL)= CON(ISZF+IL-1)
      END DO
      ISZX= INDVAL + ICON(INDOFF+49)
      SIZEX = CON(ISZX)
      ISZ6= INDVAL + ICON(INDOFF+50)
      SIZE6 = CON(ISZ6)
      ISZY= INDVAL + ICON(INDOFF+51)
      SIZEY = CON(ISZY)
C** CONSTANTS USED IN DERIVING LAYMAN ALPHA VARIABLES (DLA/DLA1)
C** DLA
      ICX = INDVAL + ICON(INDOFF+52)
      DO(IC=1,4)
        CX(IC)= CON(ICX+IC-1)
      END DO
      IXC= INDVAL + ICON(INDOFF+53)
      XC = CON(IXC)
C** DLA1
      ICX1 = INDVAL + ICON(INDOFF+54)
      DO(IC=1,4)
        CX1(IC)= CON(ICX1+IC-1)
      END DO
      IXC1= INDVAL + ICON(INDOFF+55)
      XC1 = CON(IXC1)
C--------------------------------------------------------------------
C       ACCESS THE VARIABLE CONTROLS
C   DEFVAR =1-NAMVAR;2-INDGET;3-INRATE;4-INDPUT;5-RATE;6-UNITS,7-TITLE;
C           8-CONS1;9-CONSN;10-CONSU;11-NUMSOU;12-DERIVE();13-CONVERT;
C           14-KONVU
C  1 NAMVAR   THE NAME OF THE VARIABLE
C  2 INDGET   INDEX GET
C  3 INRATE   INPUT RATE
C  4 INDPUT   INDEX PUT
C  5 RATE     OUTPUT RATE
C  6 UNITS    THE UNIT FOR EACH PARAMETER
C  7 TITLE    TITLE OF EACH PARAMETER (UP TO 40 CHAR)
C  8 CONS1    CONSTANT TO BE ADDED OR MULTIPLIED TO A DERIVED VARIABLE
C  9 CONSN    CONSTANT NAME ('BIAS','OFFSET',...)
C 10 CONSU    UNIT FOR THE CONSTANT
C 11 NUMSOU   NUMBER OF INPUT SOURCE VARIABLES USED IN DERIVATION OF
C             A DERIVED VARIABLE
C 12 DERIVE   INDICES OF INPUT SOURCE VARIABLES WHICH ARE NEEDED
C             BY THE DERIVED-VARIABLE
C 13 CONVERT  CONSTANT USED TO CONVERT A VALUE FROM ONE UNIT TO ANOTHER
C 14 KONVUF   CONVERSION UNITS FROM  ( 'M/S')
C-----------------------------------------------------------------------
      INDST =2
.USE  INDEX
C      IF(NSTAGE.EQ.4)CALL CPRINT(0,6,128,8,5,DUM,0)
      IOFF01= ICON(INDOFF+  1)
      IOFF02= ICON(INDOFF+  2)
      IOFF03= ICON(INDOFF+  3)
      IOFF04= ICON(INDOFF+  4)
      IOFF05= ICON(INDOFF+  5)
      IOFF06= ICON(INDOFF+  6)
      IOFF07= ICON(INDOFF+  7)
      IOFF08= ICON(INDOFF+  8)
      IOFF09= ICON(INDOFF+  9)
      IOFF10= ICON(INDOFF+ 10)
      IOFF11= ICON(INDOFF+ 11)
      IOFF12= ICON(INDOFF+ 12)
      IOFF13= ICON(INDOFF+ 13)
      IOFF14= ICON(INDOFF+ 14)
C-----------------------------------------------------------------------
      IY= 1000
      IXK = 0
      KT0 = 0
      KT1 = 0
      KT2 = 0
      KT3 = 0
      KT4 = 0
      KT5 = 0
      KT6 = 0
      KT7 = 0
      KT8 = 0
      KONS = 0
      KONV = 0
      DO (K=1,NUMVEC)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR=ICON(IND +IOFF01)
       INDGET   = ICON(IND+IOFF02)
       INRATE   = ICON(IND+IOFF03)
       INDPUT   = ICON(IND+IOFF04)
       LRATE    = ICON(IND+IOFF05)
       UNITS    = ICON(IND+IOFF06)
       CONS1 = CON(IND+IOFF08)
       CONSN = ICON(IND+IOFF09)
       CONSU = ICON(IND+IOFF10)
C      IF(NSTAGE.EQ.4 .AND. CONS1 .NE. 99999.0)
C       KONS= KONS + 1
C       KONSN(KONS)= NAMVAR
C       CONA(KONS) = CONS1
C       KONN(KONS) = CONSN
C       KONU(KONS) = CONSU
C      END IF
       CONVERT= CON(IND+IOFF13)
       KONVUFT= ICON(IND+IOFF14)
C      IF(NSTAGE.EQ.4 .AND. CONVERT.NE. 1.0)
C       KONV= KONV + 1
C       KONVN(KONV)= NAMVAR
C       CONV(KONV) = CONVERT
C       KONVU(KONV)=KONVUFT
C       KUNIT(KONV)=UNITS
C      END IF
       IF(NAMVAR.EQ. NAMQC(1)  )
        IPQC1 = INDPUT
        LRTQC1 = LRATE
      END IF
      IF(NAMVAR.EQ. NAMQC(2)  )
        IPQC2 = INDPUT
        LRTQC2 = LRATE
       END IF
       DO (KG=1,8)
        IF(NAMVAR.EQ. NGUST(KG))
         IPGUST(KG) = INDPUT
         LRGUST(KG) = LRATE
        END IF
       END DO
       DO (KG=1,8)
        IF(NAMVAR.EQ. NRGUST(KG))
         IRGUST(KG) = INDPUT
         LRGUSTR(KG) = LRATE
        END IF
       END DO
       LDO = NCDO * LRATE
       NUMSOU   = ICON(IND+IOFF11)
C-----------------------------------------------------------------------
C** INRATE.GT.0 - CALL MOVESP TO MOVE INPUT DATA FROM INDGET TO INDPUT
C               - CALL SMOVE TO MOVE DATA WITH OFFSET(CONSTANT) ADDED
C               - MOVE HAS TO BE DONE BEFORE DERIVATION BEGINS
C               - IN A MOVE INPUT RATE MUST AGREE WITH THE OUTPUT RATE
       IF(INRATE .GT. 0 .AND. NUMSOU.EQ.0)
        IF(INRATE.NE. LRATE)
         IF(NSTAGE.EQ.4)WRITE(KPROC,90) NAMVAR,INRATE,LRATE
         GO TO 9
        END IF
        IF(CONS1 .EQ. 99999.0)
         CALL MOVESP(DATA,INDGET,1,DATA,INDPUT,1,LDO)
        ELSE
         CALL SMOVE
        END IF
       END IF
C----------------------------------------------------------------------
C** NUMSOU.GT.0 - DERIVATION REQUIRED
C** INRATE.EQ.0 - DATA TO BE DERIVED FROM OTHER VARIABLES IN A
C               A) SINGLE OUTPUT SUBROUTINE ;
C               B) MULTIPLE OUTPUT SUBROUTINE (FOR PMS/GUSTO VARIABLES)
       IF( NUMSOU.GT.0 )
C----------------------------------------------------------------------
C** NSTAGE=4 --  PRINT OUT BIAS/CONS/OFFSET,CONVERTION FACTOR AND
C   DERIVATION INFORMATION ON PAPER OUTPUT AND  MICROFILM VIA PWRT
C
        IF(NSTAGE.EQ.4)
C**      PICK UP THE SOURCE VARIABLE NAMES HERE
         DO(J=1,NUMSOU)
          INDKS = IND+(J-1) + IOFF12
          KSOU  = ICON(INDKS )
          INDNS = INDVAL+LENCON*(KSOU-1) + IOFF01
          NAMSOU( J) = ICON(INDNS)
         END DO
  109    FORMAT(' CALIB: ',A8,' IS DERIVED FROM VARIABLES ',9A8)
         WRITE(KPROC,109)NAMVAR,(NAMSOU(KV),KV=1,NUMSOU)
         ENCODE(115,109,ARAY) NAMVAR,(NAMSOU(KV),KV=1,NUMSOU)
         CALL PWRIT(CPUX(10),CPUY(IY),ARAY,115,0,0,-1)
.USE  LINPR
  108  FORMAT(' CALIB: ',A8,' USES CONSTANT ',A8,' = ',G15.7,' UNIT = ',
     1 A8,' IN THE COMPUTATION')
  419  FORMAT(' CALIB: ',A8,' USES FUNCTION RECOVERY FACTOR ')
        IF(CONS1 .NE. 99999.)
         IF(CONSN.EQ.NCONSN)
          PRINT 419, NAMVAR
         ELSE
          ENCODE(92,108,ARAY) NAMVAR,CONSN,CONS1,CONSU
          WRITE(KPROC,108) NAMVAR,CONSN,CONS1,CONSU
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,92,0,0,-1)
.USE  LINPR
         END IF
        END IF
  107  FORMAT(' CALIB: ',A8,' USES A FACTOR = ',G15.7,
     1 ' TO CONVERT UNITS FROM ',A8,' TO ',A8)
  707  FORMAT(' CALIB: ',A8,' USES A BIAS OF ',G15.7)
        IF(CONVERT.NE.1.0)
         if(namvar.eq.ntasf)
          ENCODE(47,707,ARAY) NAMVAR,CONVERT
          WRITE(KPROC,707) NAMVAR,CONVERT
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,47,0,0,-1)
         else
          ENCODE(91,107,ARAY) NAMVAR,CONVERT,KONVUFT,UNITS
          WRITE(KPROC,107) NAMVAR,CONVERT,KONVUFT,UNITS
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,91,0,0,-1)
         end if
.USE  LINPR
        END IF
C
         IF(NAMVAR.EQ.NGUSTO)
  284 FORMAT(' CALIB:',8A8,' ARE USED IN COMP. OF GUST VARIABLES')
          ENCODE(107,284,ARAY) NGUST
          WRITE(KPROC,284) NGUST
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,107,0,0,-1)
.USE  LINPR
C
         OR IF(NAMVAR.EQ.NGUSTR .OR. NAMVAR.EQ.NGUSTD)
  285 FORMAT(' CALIB:',8A8,' ARE USED IN COMP. OF GUSTR VARIABLES')
          ENCODE(108,285,ARAY) NGUST
          WRITE(KPROC,285) NGUST
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,108,0,0,-1)
.USE  LINPR
C
         OR IF(NAMVAR.EQ.NFSSP)
  201 FORMAT(' SUM OF RAW COUNTS OF THE 1ST ',I2,1X,A4,' PROBE CELLS',
     1' EXCEEDS ',F5.1,' IN ',F5.1,' SEC, A HISTOGRAM WILL BE PLOTTED')
  202 FORMAT(' PMS PROBE ',A8,' SAMPLING RATE PER SEC = ',I2,
     1',NO OF WORDS PER SAMPLE = ',I4,',NO OF CELLS = ',I3)
  205 FORMAT(' PMS FSSP PROBE WORD LOCATION FOR RANGE = ',I3,
     1',STROBE = ',I3,',RESET = ',I3)
  206 FORMAT(' CALIB: ',A8,' USES PMS CALIBRATION COEFS:  ',
     1' CELL WIDTH -- CWD(4) ',4F9.3 )
  207 FORMAT(36X,' CALIBRATED CELL WIDTH OFFSET -- CBIAS(4) ',4F9.3)
  208 FORMAT(36X,' SLOW RESET(TAU1),FAST RESET(TAU2),TAU3 ',3F12.9)
  209 FORMAT(36X,' DEPTH OF FIELD(DOF), BEAM DIAMETER(BDIA) ',2G15.7)
  301 FORMAT(' FSSP SIZE TABLE ',15F6.2)
  303 FORMAT(' PMS PROBE ',A8,' SAMPLING RATE PER SEC = ',I2,
     1',NO OF WORDS PER SAMPLE = ',I4,',NO OF CELLS = ',I3,
     2',SIZE CONS= ',F5.1)
C         WRITE(KPROC,301) SIZEF
C         ENCODE(107,301,ARAY) SIZEF
C         CALL PWRIT(CPUX(10),CPUY(IY),ARAY,107,0,0,-1)
C .USE  LINPR
          WRITE(KPROC,202) NAMVAR,MRATEF,MWORDF,MCELLF
          ENCODE(94,202,ARAY) NAMVAR,MRATEF,MWORDF,MCELLF
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,94,0,0,-1)
.USE  LINPR
C         WRITE(KPROC,206) NAMVAR,CWD
C         ENCODE(104,206,ARAY) NAMVAR,CWD
C         CALL PWRIT(CPUX(10),CPUY(IY),ARAY,104,0,0,-1)
C .USE  LINPR
C          WRITE(KPROC,207) CBIAS
C          ENCODE(114,207,ARAY) CBIAS
C          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,114,0,0,-1)
C  .USE  LINPR
          WRITE(KPROC,208) TAU1,TAU2,TAU3
          ENCODE(112,208,ARAY) TAU1,TAU2,TAU3
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,112,0,0,-1)
.USE  LINPR
          WRITE(KPROC,209) DOF,BDIA
          ENCODE(108,209,ARAY) DOF,BDIA
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,108,0,0,-1)
.USE  LINPR
          WRITE(KPROC,201) NCSUMF,NAMVAR,THRESHF,CONS1
          ENCODE(105,201,ARAY) NCSUMF,NAMVAR,THRESHF,CONS1
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,105,0,0,-1)
.USE  LINPR
          WRITE(KPROC,205) KRANGE,KSTROB,KRESET
          ENCODE(70,205,ARAY) KRANGE,KSTROB,KRESET
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,70,0,0,-1)
.USE  LINPR
C
         OR IF(NAMVAR.EQ.NY200)
          WRITE(KPROC,303) NAMVAR,MRATEY,MWORDY,MCELLY,SIZEY
          ENCODE(111,303,ARAY) NAMVAR,MRATEY,MWORDY,MCELLY,SIZEY
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,111,0,0,-1)
.USE  LINPR
          WRITE(KPROC,201) NCSUMY,NAMVAR,THRESHY,CONS1
          ENCODE(105,201,ARAY) NCSUMY,NAMVAR,THRESHY,CONS1
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,105,0,0,-1)
.USE  LINPR
C
         OR IF(NAMVAR.EQ.NASAS)
          WRITE(KPROC,202) NAMVAR,MRATEA,MWORDA,MCELLA
          ENCODE(94,202,ARAY) NAMVAR,MRATEA,MWORDA,MCELLA
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,94,0,0,-1)
.USE  LINPR
          WRITE(KPROC,201) NCSUMA,NAMVAR,THRESHA,CONS1
          ENCODE(105,201,ARAY) NCSUMA,NAMVAR,THRESHA,CONS1
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,105,0,0,-1)
.USE  LINPR
C
         OR IF(NAMVAR.EQ.NX200)
          WRITE(KPROC,303) NAMVAR,MRATEX,MWORDX,MCELLX,SIZEX
          ENCODE(111,303,ARAY) NAMVAR,MRATEX,MWORDX,MCELLX,SIZEX
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,111,0,0,-1)
.USE  LINPR
          WRITE(KPROC,201) NCSUMX,NAMVAR,THRESHX,CONS1
          ENCODE(105,201,ARAY) NCSUMX,NAMVAR,THRESHX,CONS1
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,105,0,0,-1)
.USE  LINPR
C
         OR IF(NAMVAR.EQ.NX260)
          WRITE(KPROC,303) NAMVAR,MRATE6,MWORD6,MCELL6,SIZE6
          ENCODE(111,303,ARAY) NAMVAR,MRATE6,MWORD6,MCELL6,SIZE6
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,111,0,0,-1)
.USE  LINPR
          WRITE(KPROC,201) NCSUM6,NAMVAR,THRESH6,CONS1
          ENCODE(105,201,ARAY) NCSUM6,NAMVAR,THRESH6,CONS1
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,105,0,0,-1)
c.USE  LINPR
C
c         OR IF(NAMVAR.EQ.NPLWCC)
c          WRITE(KPROC,302) NAMVAR,TWIRE,CN1,EN1
c  302 FORMAT(' CALIB: ',A8,' USES TWIRE= ',F9.2 ,',CN1= ',F8.3 ,
c     1',EN1= ',F8.3 ,' IN THE CALCULATON OF ANUP=CN1*REYNO**EN1')
c          ENCODE(107,302,ARAY) NAMVAR,TWIRE,CN1,EN1
c          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,107,0,0,-1)
.USE  LINPR
C
         OR IF(NAMVAR.EQ.NPLWCC)
          WRITE(KPROC,302) NAMVAR,TWIRE
  302 FORMAT(' CALIB: ',A8,' USES TWIRE = ',G15.7)
          ENCODE(45,302,ARAY) NAMVAR,TWIRE
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,45,0,0,-1)
.USE  LINPR
         OR IF(NAMVAR.EQ.NDLA)
  403 FORMAT(' CALIB: ',A8,' USES COEFFICIENTS FROM EMPIRICAL FIT ',
     1       4F8.3,' PATHLENGTH OF LYMAN ALPHA= ',F6.2 )
          WRITE(KPROC,403) NAMVAR,CX,XC
          ENCODE(120,403,ARAY) NAMVAR,CX,XC
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,120,0,0,-1)
.USE  LINPR
         OR IF(NAMVAR.EQ.NDLA1)
          WRITE(KPROC,403) NAMVAR,CX1,XC1
          ENCODE(120,403,ARAY) NAMVAR,CX1,XC1
          CALL PWRIT(CPUX(10),CPUY(IY),ARAY,120,0,0,-1)
.USE  LINPR
         END IF
       END IF
C** END OF NSTAGE=4 CHECK-------------------------------------
C-----------------------------------------------------------------------
   90 FORMAT(' CALIB WARNING: ',A8,' INRATE= ',I2,' LRATE= ',I2,
     1' DATA VALUE SET TO 99999. FOR THIS VARIABLE OUTPUT AT LRATE')
   92 FORMAT(' CALIB WARNING: NAMVAR= ',A8,' LRATE=',I3,' NAMSOU= ',A8,
     1 'RATE=',I2,/,' --CHECK THE RATES OF YOUR SOURCE/OUTPUT VARS !!!',
     2' DIF. RATE OF TASX USED IN PMS SUBS -OK;DF/SMXX -1PT PICK OFF ',/
     3,' DMEC OK FOR ALAT,ALON,PALT; PLWCCZ OK FOR CONCF')
   91 FORMAT(' CALIB WARNING: ',A8,' NEEDS ',I2,' SOURCE VAR. ',A8,
     1  ' NOT ON THE VECVAR LIST. 99999. STORED AT LRATE')
C
        ISFLAG = 0
        DO(J=1,NUMSOU)
         INDD= IND+IOFF12+(J-1)
         KSOU= ICON(INDD)
         NAMSOU(J) = ICON(INDS+IOFF01)
         IF(KSOU.LE.0)
          ISFLAG = ISFLAG+1
          IF(NSTAGE.EQ.4) WRITE(KPROC,91) NAMVAR,NUMSOU,NAMSOU(J)
         ELSE
C
          ENCODE(2,13,KEYWD) NAMVAR
          IF(NAMVAR.EQ.NASAS.OR.NAMVAR.EQ.NFSSP.OR.NAMVAR.EQ.NX200
     1       .OR.NAMVAR.EQ.NX260.OR.NAMVAR.EQ.NY200) GO TO 88
          IF(KEYWD.EQ. NDIF .OR. KEYWD.EQ.NSUM) GO TO 88
C-------------------------------------------------
C** PICK UP THE SOURCE VARIABLE RATES HERE - IF INPUT VARIABLE RATES
C   DIFFER FROM OUTPUT VAR. RATE, WARNING MSG PRINTED
          INDS = INDVAL + LENCON *(KSOU-1)
          NAMSOU(J) = ICON(INDS+IOFF01)
          LRTSOU(J) = ICON(INDS + IOFF05)
          IF(LRTSOU(J).NE.LRATE.AND.NSTAGE.EQ.4)
     1      PRINT 92, NAMVAR,LRATE,NAMSOU(J),LRTSOU(J)
         END IF
   88    CONTINUE
        END DO
        IF(ISFLAG.GT.0)
.USE   D99999
         GO TO 9
        END IF
C-------
        KT0 = KT0 + 1
        KTSV(KT0) = K
       END IF
   9   CONTINUE
       IF(CONS1.NE.99999. .AND. NSTAGE.EQ.4 .AND. NUMSOU.LE.0)
        ENCODE(87,108,ARAY) NAMVAR,CONSN,CONS1,CONSU
        WRITE(KPROC,108) NAMVAR,CONSN,CONS1,CONSU
        CALL PWRIT(CPUX(10),CPUY(IY),ARAY,87,0,0,-1)
.USE  LINPR
       END IF
      END DO
C----------------------------------------------------------------------
C**    PRINT OUT BIAS/CONS/OFFSET INFORMATON ON THE MICROFILM VIA PWRT
C 108  FORMAT(' CALIB: ',A8,' USES CONSTANT ',A8,' = ',F10.3,' UNIT = ',
C    1 A8,' IN THE COMPUTATION')
C      IF(NSTAGE.EQ.4 )
C       DO (KC=1,KONS)
C        ENCODE(87,108,ARAY) KONSN(KC),KONN(KC),CONA(KC),KONU(KC)
C        WRITE(KPROC,108) KONSN(KC),KONN(KC),CONA(KC),KONU(KC)
C        CALL PWRIT(CPUX(10),CPUY(IY),ARAY,87,0,0,-1)
C USE  LINPR
C       END DO
C 107  FORMAT(' CALIB: ',A8,' USES A FACTOR= ',F10.3,
C    1 ' TO CONVERT UNITS FROM ',A8,' TO ',A8)
C       DO (KC=1,KONV)
C        ENCODE(85,107,ARAY) KONVN(KC),CONV(KC),KONVU(KC),KUNIT(KC)
C        WRITE(KPROC,107) KONVN(KC),CONV(KC),KONVU(KC),KUNIT(KC)
C        CALL PWRIT(CPUX(10),CPUY(IY),ARAY,85,0,0,-1)
C USE  LINPR
C       END DO
C
C**   PRINT OUT GENERAL CONTROLS ON THE MICROFILM VIA PWRT
  282   FORMAT(' CALIB: ',2A8,' ARE USED AS QC REFERENCE VARS.')
  283   FORMAT(' ALL HUMIDITY AND WATER VAPOR CALCULATIONS ARE BASED',
     1         ' ON GOFF-GRATCH FORMULATON.  AN ENHANCEMENT FACTOR IS')
  294   FORMAT(' INCORPORATED INTO THIS CALCULATION TO ACCOUNT FOR THE',
     1         ' DIFFERENCES BETWEEN PURE WATER VAPOR AND MOIST AIR.' )
  295   FORMAT(' PLEASE SEE NCAR/RAF BULLETIN 9 FOR MORE INFORMATION.')
C
       IF(NSTAGE.EQ.4)
        ENCODE(105,283,ARAY)
        WRITE(KPROC,283)
        CALL PWRIT(CPUX(10),CPUY(IY),ARAY,105,0,0,-1)
.USE  LINPR
        ENCODE(106,294,ARAY)
        WRITE(KPROC,294)
        CALL PWRIT(CPUX(10),CPUY(IY),ARAY,106,0,0,-1)
.USE  LINPR
        ENCODE( 53,295,ARAY)
        WRITE(KPROC,295)
        CALL PWRIT(CPUX(10),CPUY(IY),ARAY,53,0,0,-1)
.USE  LINPR
        ENCODE(55,282,ARAY) NAMQC
        WRITE(KPROC,282) NAMQC
        CALL PWRIT(CPUX(10),CPUY(IY),ARAY,55,0,0,-1)
.USE  LINPR
      END IF
C***************************************************************************
C****************       LEVEL ONE DERIVATION        ************************
C***************************************************************************
      IF(KT0.GT.0)
      DO (KT=1,KT0)
       K= KTSV(KT)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR =ICON(IND +IOFF01)
       INDGET = ICON(IND+IOFF02)
       INDPUT = ICON(IND+IOFF04)
       LRATE  = ICON(IND+IOFF05)
       CONS1  =  CON(IND+IOFF08)
       NUMSOU = ICON(IND+IOFF11)
       LDO    = NCDO*LRATE
       DO (N=1,MAXSOU)
        LRTSOU(N) = 1
        IPSOU(N) = 0
       END DO
       DO(J=1,NUMSOU)
        INDD= IND+IOFF12+(J-1)
        KSOU= ICON(INDD)
C**     PICK UP THE SOURCE VARIABLE'S RATE AND INDPUT HERE
        INDS = INDVAL + LENCON *(KSOU-1)
        LRTSOU(J) = ICON  (INDS + IOFF05)
        IPSOU(J ) = ICON(INDS + IOFF04)
       END DO
C------------------------------------------------ DPC,DPRBC,DPRTC
C** DEWPOINT TEMPERATURE (THERMOELEC) (C)
      IF(NAMVAR.EQ.NDPC .OR. NAMVAR.EQ.NDPBC .OR. NAMVAR.EQ.NDPTC
     1      .OR. NAMVAR.EQ.NDPGEC .OR. NAMVAR.EQ.NDPCVC)
       CALL SDPC
C------------------------------------------------ GSF
C** GROUND SPEED
      OR IF(NAMVAR   .EQ. NGSF     )
       CALL  SGSF
C------------------------------------------------ IRBC,IRTC,TPYGC2
C** CORRECTED PYRGEOMTER IRRADIANCE (TOP/BOTTOM)(WATTS/M2)
      OR IF(NAMVAR.EQ.NIRBC.OR.NAMVAR.EQ.NIRTC)
        CALL SIRTBC
C------------------------------------------------ POSDF
C** DIFF. IN POSITION BETWEEN INS AND LORAN C (NMI)
      OR IF(NAMVAR   .EQ.NPOSDF   )
        CALL SPOSDF
C------------------------------------------------ PSFC,PSWC
C** CORRECTED STATIC PRESSURE (FUSELAGE/FUSELAGE DIGITAL/WING)
      OR IF(NAMVAR.EQ.NPSFC .OR. NAMVAR.EQ.NPSBC .OR. NAMVAR.EQ.NPSWC
     1       .OR. NAMVAR.EQ.NPSFDC .OR. NAMVAR.EQ.NPSFDC20)
         CALL SPSXC
C------------------------------------------------ QCFC,QCWC
C** CORRECTED DYNAMIC PRESSURE (FUSELAGE/WING) (MB)
      OR IF(NAMVAR.EQ.NQCWC .OR. NAMVAR.EQ.NQCGC
     1 .OR. NAMVAR.EQ.NQCBC .OR. NAMVAR.EQ.NQCDC .OR. NAMVAR.EQ.NQCFC20)
       CALL SQCXC
S     OR IF(NAMVAR.EQ.NQCFC)
S      CALL SQCXC
Q     OR IF(NAMVAR.EQ.NQCFC)
Q      CALL SQCXC
C  ELECTRA PROJECT ONLY (308)
E     OR IF(NAMVAR.EQ.NQCFC )
E      CALL SQCFC
C------------------------------------------------ QCRC
C** CORRECTED RADOME PRESS. (MB)
      OR IF(NAMVAR   .EQ.NQCRC  )
        CALL SQCRC
C--------------------------------------------------- ATOPH
C** OPHIR RADIOMETER AMBIENT TEMPERATURE (C)
      OR IF(NAMVAR .EQ. NATOPH     )
        CALL SATOPH
C------------------------------------------------ TEPC
C** CORRECTED INTERNAL SAMPLING PRESSURE (MB)
      OR IF(NAMVAR   .EQ.NTEPC )
         CALL STEPC
C------------------------------------------------ COUNTS
C** COUNTS DIFFERENCE OF SPARE ICE NUCLEI COUNTER
C     OR IF(NAMVAR.EQ.NCOUNTS )
C        CALL SCOUNTS
C------------------------------------------------ ZPG
C** GEOPOTENTIAL HEIGHT (M)
C     OR IF(NAMVAR .EQ. NZPG       )
C       CALL SZPG
C-----------------------------------------------------------------------
C **  ADD LEVEL ONE NEW DERIVED VARIABLE IN SAVE BLOCK: ADDV1
.USE  ADDV1
C-----------------------------------------------------------------------
      ELSE
       KT1 = KT1+1
       KTSV(KT1) = K
      END IF
      END DO
      END IF
C***************************************************************************
C****************       LEVEL TWO DERIVATION        ************************
C***************************************************************************
      IF(KT1.GT.0)
      DO (KT=1,KT1)
       K= KTSV(KT)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR =ICON(IND +IOFF01)
       INDGET = ICON(IND+IOFF02)
       INDPUT = ICON(IND+IOFF04)
       LRATE  = ICON(IND+IOFF05)
       CONS1  =  CON(IND+IOFF08)
       CONSN = ICON(IND+IOFF09)
       NUMSOU = ICON(IND+IOFF11)
       LDO    = NCDO*LRATE
       DO (N=1,MAXSOU)
        LRTSOU(N) = 1
        IPSOU(N) = 0
       END DO
       DO(J=1,NUMSOU)
        INDD= IND+IOFF12+(J-1)
        KSOU= ICON(INDD)
        INDS = INDVAL + LENCON *(KSOU-1)
        LRTSOU(J) = ICON  (INDS + IOFF05)
        IPSOU(J ) = ICON(INDS + IOFF04)
       END DO
C------------------------------------------- AKFXL,AKFXR,SSFXB,SSFXT
C** ATTACK ANGLE (FIXED VANE) (DEG)
C** SIDESLIP ANGLE (FIXED VANE) (DEG)
      IF(NAMVAR.EQ.NAKFXL.OR.NAMVAR.EQ.NAKFXR.OR.NAMVAR.EQ.NSSFXB
     1  .OR.NAMVAR.EQ.NSSFXT)
        CALL SABFIX
C------------------------------------------------ AKDF,SSDF
C** ATTACK ANGLE/SIDESLIP ANGLE(ROSEMOUNT) (DEG)
      OR IF(NAMVAR.EQ.NAKDF .OR.NAMVAR.EQ.NSSDF    )
        CALL SATKSLP
C------------------------------------------------ ATRF
C** AMBIENT TEMPERATURE (REVERSE FLOW   ) (C)
      OR IF(NAMVAR   .EQ.NATRF    )
        CALL SATRF
C------------------------------------------------ ATB,ATB2,ATF,ATKP,ATW
C** AMBIENT TEMPERATURE (BOOM/ROSEMOUNT/FAST RESPONSE/FUSELAGE/WING)   (C)
      OR IF(NAMVAR.EQ.NATB.OR.NAMVAR.EQ.NATF.OR.NAMVAR.EQ.NATKP
     1  .OR.NAMVAR.EQ. NATW .OR. NAMVAR.EQ.NATRW.OR.NAMVAR.EQ.NATFR)
       CALL  SATX
      OR IF(NAMVAR.EQ.NATB1.OR.NAMVAR.EQ.NATR3.OR.NAMVAR.EQ.NATR6
     1  .OR.NAMVAR.EQ.NATRE.OR.NAMVAR.EQ.NATKPR .OR.NAMVAR.EQ.NATF20)
       CALL  SATX
C------------------------------------------------ ATBH,ATFH,ATWH
C** AMBIENT TEMPERATURE (DEICED ROSEMOUNT) (BOOM/FUSELAGE/WING)
      OR IF(NAMVAR.EQ.NATBH .OR. NAMVAR.EQ.NATFH .OR. NAMVAR.EQ.NATWH)
        CALL SATXH
C------------------------------------------------ IAS
C** INDICATED AIRSPEED (M/S)
      OR IF(NAMVAR .EQ. NIAS      )
        CALL SIAS
C------------------------------------------------ PALT
C** NCAA PRESSURE ALTITUDE (M)
      OR IF(NAMVAR .EQ. NPALT .OR. NAMVAR.EQ.NPALT20 )
       CALL  SPALT
C------------------------------------------------ PALTF
C**      PRESSURE ALTITUDE (FT)
      OR IF(NAMVAR .EQ. NPALTF     )
       CALL  SPALTF
C ---------------------------------------- TASD, TASB,TASF,TASG,TASW
C******* AIRCRAFT TRUE AIRSPEED (BOOM/FUSELAGE/GUST PROBE/WING)   (M/S)
      OR IF(NAMVAR.EQ.NTASB.OR.NAMVAR.EQ.NTASF.OR.NAMVAR.EQ.NTASG
     1 .OR. NAMVAR.EQ.NTASW .OR. NAMVAR.EQ.NTASR .OR. NAMVAR.EQ.NTASD)
       CALL  STASX
C-------------------------------------------------  MACH(B/F/G/W)
      OR IF(NAMVAR.EQ.NBMACH.OR.NAMVAR.EQ.NFMACH .OR. NAMVAR.EQ.NRMACH
     1 .OR. NAMVAR.EQ.NGMACH.OR.NAMVAR.EQ.NWMACH)
         CALL SXMACH
C-------------------------------------------------  MACH2(B/F/G/W)
      OR IF(NAMVAR.EQ.NBMACH2.OR.NAMVAR.EQ.NFMACH2.OR.NAMVAR.EQ.NRMACH2
     1 .OR. NAMVAR.EQ.NGMACH2.OR.NAMVAR.EQ.NWMACH2)
         CALL SXMACH2
C------------------------------------------------ HGME
C** Corrected Geometric Radar Altitude (APN-159)
C    Added by RLR 12DEC91 for 1-815
      OR IF(NAMVAR   .EQ.NHGME )
         CALL SHGME
C------------------------------------------------ CRFLO
C** CORRECTED VOL. FLOW RATE PROJ 240
C     OR IF(NAMVAR   .EQ.NCRFLO )
C        CALL SCRFLO
C------------------------------------------------ CLDHT
C** LIDAR - HEIGHT TO CLOUD BOUNDARY
C     OR IF(NAMVAR   .EQ.NCLDHT )
C        CALL SCLDHT
C-----------------------------------------------------------------------
C **  ADD LEVEL TWO NEW DERIVED VARIABLE IN SAVE BLOCK: ADDV2
.USE  ADDV2
C-----------------------------------------------------------------------------
      ELSE
       KT2 = KT2+1
       KTSV(KT2) = K
      END IF
      END DO
      END IF
C***************************************************************************
C****************       LEVEL THREE DERIVATION        **********************
C***************************************************************************
      IF(KT2.GT.0)
      DO (KT=1,KT2)
       K= KTSV(KT)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR =ICON(IND +IOFF01)
       INDGET = ICON(IND+IOFF02)
       INDPUT = ICON(IND+IOFF04)
       LRATE  = ICON(IND+IOFF05)
       CONS1  =  CON(IND+IOFF08)
       NUMSOU = ICON(IND+IOFF11)
       LDO    = NCDO*LRATE
       DO (N=1,MAXSOU)
        LRTSOU(N) = 1
        IPSOU(N) = 0
       END DO
       DO(J=1,NUMSOU)
        INDD= IND+IOFF12+(J-1)
        KSOU= ICON(INDD)
        INDS = INDVAL + LENCON *(KSOU-1)
        LRTSOU(J) = ICON  (INDS + IOFF05)
        IPSOU(J ) = ICON(INDS + IOFF04)
       END DO
C------------------------------------------------ CONC2C
C** TWO-D(C) CONCENTRATION FROM SHADOW - OR
      IF(NAMVAR   .EQ.NCONC2C )
        CALL SCONC2C
C------------------------------------------------ CONC2P
C** TWO-D(P) CONCENTRATION FROM SHADOW - OR
      OR IF(NAMVAR   .EQ.NCONC2P )
        CALL SCONC2P
C------------------------------------------------ CONC2P2
C** TWO-D(P)-2 CONCENTRATION FROM SHADOW - OR - 2
C      OR IF(NAMVAR   .EQ.NCONC2P2 )
C        CALL SCONC2P2
C------------------------------------------------ DO3C
C** CORRECTED OZONE CONCENTRATION (PARTS PER BILLION-PPB)
      OR IF(NAMVAR   .EQ.NDO3C  )
        CALL SDO3C
C------------------------------------------------ COC
C** CORRECTED CARBON MONOXIDE OUTPUT (PARTS PER BILLION-PPB)
      OR IF(NAMVAR   .EQ.NCOC   )
        CALL SCOC
C------------------------------------------------- SCLWC
C** SUPERCOOLED LIQUID WATER CONTENT
      OR IF(NAMVAR .EQ. NSCLWC     )
        CALL SSCLWC
C------------------------------------------------ DVALU
C** D-VALUE  (HGME - HP)  (FT)
      OR IF(NAMVAR   .EQ.NDVALU  )
        CALL SDIF
C------------------------------------------------ DPCRC
C** CORRECTED CRYOGENIC DEW POINT
      OR IF(NAMVAR   .EQ.NDPCRC )
         CALL SDPCRC
C------------------------------------------------ CRYOC
C** CORRECTED CRYOGENIC VARIABLES
      OR IF(NAMVAR   .EQ.NCRYOC )
         CALL SCRYOC
C------------------------------------------------ RHORF
C** ABSOLUTE HUMIDITY FROM MICROWAVE RERACTOMETER (G/M3)
      OR IF(NAMVAR   .EQ.NRHORF)
         CALL SRHORF
C------------------------------------------------ CNC
C** CORRECTED CN CNOUNTER VARIABELS
      OR IF(NAMVAR   .EQ.NCNC   )
         CALL SCNC
C------------------------------------------------ DMEC
C** DME DERVATION
      OR IF(NAMVAR   .EQ.NDMEC  )
        CALL SDMEC
C------------------------------------------------ LWCC
C** CORRECTED J-W LIQUID WATER CONTENT
      OR IF(NAMVAR .EQ. NLWCC)
       CALL SLWCC
C------------------------------------------------- PLWCC
C** PMS-KING  LIQUID WATER CONTENT
      OR IF (NAMVAR .EQ.NPLWCC)
        CALL SPLWCC
C------------------------------------------------ PSURF
C** SURFACE PRESSURE
      OR IF(NAMVAR .EQ. NPSURF    )
        CALL SPSURF
C------------------------------------------- RHODB,RHODT,GERHOTD
C** ABSOLUTE HUMIDITY (THERMOELEC) (G/M3)
      OR IF(NAMVAR.EQ.NRHODT.OR.NAMVAR.EQ.NRHODB.OR.NAMVAR.EQ.NGERHOTD
     1  .OR. NAMVAR.EQ.NRHODGE .OR. NAMVAR.EQ.NRHOCR)
        CALL  SRHOTD
      OR IF(NAMVAR.EQ.NRHOCD)
        CALL  SRHOTD
C------------------------------------------------ THETA
C** POTENTIAL TEMPERATURE    (K)
      OR IF(NAMVAR.EQ.NTHETA .OR.NAMVAR.EQ.NTHETAK )
         CALL STHETA
C------------------------------------------------ TEO3C
C** CORRECTED OZONE CONCENTRATION  (PPB)
      OR IF(NAMVAR   .EQ.NTEO3C )
         CALL STEO3C
C------------------------------------------------ P210M
C** PRESSURE AT 210 M LEVEL (MB)
C     OR IF(NAMVAR.EQ.NP210M    )
C       CALL SP210M
C------------------------------------------------ PD
C** POWER DENSITY (WATTS/IN2)               PD
C     OR IF(NAMVAR   .EQ.NPD )
C       CALL SPD
C------------------------------------------------ ATK3
C** RADOME ATTACK         (MB)
C     OR IF(NAMVAR .EQ.NATK3  )
C       CALL SATK3
C------------------------------------------------ AVOLF
C** CORRECTED VOL. AEROSOL FLOW PROJ 240
C     OR IF(NAMVAR   .EQ.NAVOLF )
C        CALL SAVOLF
C------------------------------------------------ BETA3
C** RADOME SIDESLIP       (MB)
C     OR IF(NAMVAR   .EQ.NBETA3  )
C       CALL SBETA3
C-----------------------------------------------------------------------
C **  ADD LEVEL THREE NEW DERIVED VARIABLE IN SAVE BLOCK: ADDV3
.USE  ADDV3
      ELSE
       KT3 = KT3+1
       KTSV(KT3) = K
      END IF
   39 CONTINUE
      END DO
      END IF
C***************************************************************************
C****************       LEVEL FOUR DERIVATION       ************************
C***************************************************************************
      IF(KT3.GT.0)
      DO (KT=1,KT3)
       K= KTSV(KT)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR =ICON(IND +IOFF01)
       INDGET = ICON(IND+IOFF02)
       INDPUT = ICON(IND+IOFF04)
       LRATE  = ICON(IND+IOFF05)
       CONS1  =  CON(IND+IOFF08)
       NUMSOU = ICON(IND+IOFF11)
       LDO    = NCDO*LRATE
       DO (N=1,MAXSOU)
        LRTSOU(N) = 1
        IPSOU(N) = 0
       END DO
       DO(J=1,NUMSOU)
        INDD= IND+IOFF12+(J-1)
        KSOU= ICON(INDD)
        INDS = INDVAL + LENCON *(KSOU-1)
        LRTSOU(J) = ICON  (INDS + IOFF05)
        IPSOU(J ) = ICON(INDS + IOFF04)
       END DO
C
C***** Following moisture variables were moved to level 4 because
C       SCRYOC (Cryogenic hygrometer) is in level 3.           RLR  910618
C------------------------------------------------ MR
C** MIXING RATIO (G/KG)
      IF(NAMVAR   .EQ.NMR      )
         CALL SMR
C------------------------------------------------ SPHUM
C** SPECIFIC  HUMIDITY  (G/KG)
      OR IF(NAMVAR   .EQ.NSPHUM  )
         CALL SSPHUM
C------------------------------------------------ RHUM
C** RELATIVE HUMIDITY  (PERCENT)
      OR IF(NAMVAR   .EQ.NRHUM    )
         CALL SRHUM
C------------------------------------------------ AKRD
C** RADOME ATTACK ANGLE    (DEG)
      OR IF(NAMVAR   .EQ.NAKRD  )
        CALL SAKRD
C------------------------------------------------ DLA
C** LYMAN ALPHA CALCULATION (ADDED BY CC 31AUG1987)
      OR IF(NAMVAR.EQ.NDLA .OR. NAMVAR.EQ.NDLA1)
       CALL  SDLA
C------------------------------------------------ SSRD
C** RADOME SIDESLIP ANGLE (DEG)
      OR IF(NAMVAR   .EQ.NSSRD )
        CALL SSSRD
C------------------------------------------------ QCRCC
C** CORRECTED QCRC (ED BROWN FEB.26,1985 - PROJECT 250)
C     OR IF(NAMVAR   .EQ.NQCRCC )
C       CALL SQCRCC
C------------------------------------------------ P2DFLG
C** PMS2D P-PROBE FLAG
C     OR IF(NAMVAR.EQ.NP2DFLG   )
C       CALL SP2DFLG
C------------------------------------------------ AMASS
C** CUMUL. MASS FLOW OF AEROSOL PROJ 240
C     OR IF(NAMVAR   .EQ.NAMASS )
C        CALL SAMASS
C------------------------------------------------ KRA
C** ATTACK SENSITIVITY    (MB)
C     OR IF(NAMVAR   .EQ.NKRA   )
C       CALL SKRA
C------------------------------------------------  LYMAN ALPHA STUFF
C     OR IF(NAMVAR.EQ.NLYAPX )
C      CALL  SLYAPX
C     OR IF(NAMVAR.EQ.NLYAP1 )
C      CALL  SLYAP1
C-----------------------------------------------------------------------
C **  ADD LEVEL FOUR NEW DERIVED VARIABLE IN SAVE BLOCK: ADDV4
.USE  ADDV4
C---------------------------
      ELSE
       KT4 = KT4+1
       KTSV(KT4) = K
      END IF
      END DO
      END IF
C***************************************************************************
C****************       LEVEL FIVE DERIVATION          *********************
C***************************************************************************
      IF(KT4.GT.0)
      DO (KT=1,KT4)
       K= KTSV(KT)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR =ICON(IND +IOFF01)
       INDGET = ICON(IND+IOFF02)
       INDPUT = ICON(IND+IOFF04)
       LRATE  = ICON(IND+IOFF05)
       CONS1  =  CON(IND+IOFF08)
       NUMSOU = ICON(IND+IOFF11)
       LDO    = NCDO*LRATE
       DO (N=1,MAXSOU)
        LRTSOU(N) = 1
        IPSOU(N) = 0
       END DO
       DO(J=1,NUMSOU)
        INDD= IND+IOFF12+(J-1)
        KSOU= ICON(INDD)
        INDS = INDVAL + LENCON *(KSOU-1)
        LRTSOU(J) = ICON  (INDS + IOFF05)
        IPSOU(J ) = ICON(INDS + IOFF04)
       END DO
C------------------------------------------------ GUSTO
C**  G U S T O
C
   51 FORMAT(' CALIB:GUST RATE=',I2,'GEN. INPUT VAR. NO.',I2,' RATE=',
     1I2,' (1-ALT,2-ALPHA,3-XVI,4-YVI,5-PH,6-ROLL,7-VZI,8-HP)',
     2' WARNING: SGUST NOT CALLED')
   52 FORMAT(' CALIB:GUST GEN. INPUT VAR. NO.',I2,' NOT ON THE GEN.',
     1' CONTROL LIST (1-ALT,2-ALPHA,3-XVI,4-YVI,5-PH,6-ROLL,7-VZI,8-HP)'
     2,' WARNING: SGUST NOT CALLED')
      IF(NAMVAR.EQ.NGUSTO )
       DO(IG=1,8)
        IF(LRATE.NE.LRGUST(IG))
         IF(NSTAGE.EQ.4)
          WRITE(KPROC,51) LRATE,IG,LRGUST(IG)
         END IF
.USE  D99999
         GO TO 59
        END IF
        IF(IPGUST(IG).LE.0)
         IF(NSTAGE.EQ.4)
          WRITE(KPROC,52) IG
         END IF
.USE  D99999
         GO TO 59
        END IF
       END DO
       CALL SGUST
C------------------------------------------------ GUSTR
C**  G U S T O  R A D O M E
C
   53 FORMAT(' CALIB:GUSTR RATE=',I2,'GEN. INPUT VAR. NO.',I2,' RATE=',
     1I2,' (1-ALT,2-ALPHA,3-XVI,4-YVI,5-PH,6-ROLL,7-VZI,8-HP)',
     2' WARNING: SGUSTR NOT CALLED')
   54 FORMAT(' CALIB:GUSTR GEN. INPUT VAR. NO.',I2,' NOT ON THE GEN.',
     1' CONTROL LIST (1-ALT,2-ALPHA,3-XVI,4-YVI,5-PH,6-ROLL,7-VZI,8-HP)'
     2,' WARNING: SGUSTR NOT CALLED')
C
      OR IF(NAMVAR.EQ.NGUSTR .OR. NAMVAR.EQ.NGUSTD)
       DO(IG=1,8)
        IF(LRATE.NE.LRGUSTR(IG))
         IF(NSTAGE.EQ.4)
          WRITE(KPROC,53) LRATE,IG,LRGUSTR(IG)
         END IF
.USE  D99999
         GO TO 59
        END IF
        IF(IRGUST(IG).LE.0)
         IF(NSTAGE.EQ.4)
          WRITE(KPROC,54) IG
         END IF
.USE  D99999
         GO TO 59
        END IF
       END DO
       CALL SGUST
C
C***** Following moisture variables were moved to level 5 because
C       some source variables are in level 4.                     RLR  910618
C------------------------------------------------ THETAE
C*******       EQUIVALENT POTENTIAL TEMPERATURE (K)
      OR IF(NAMVAR   .EQ. NTHETAE   )
       CALL  STHETAE
C------------------------------------------------ THETAV
C** VIRTUAL POTENTIAL TEMPERATURE
      OR IF(NAMVAR.EQ.NTHETAV    )
        CALL STHETAV
C------------------------------------------------ PLCL
C** PRESSURE AT LCL
      OR IF(NAMVAR .EQ. NPLCL     )
       CALL  SPLCL
C------------------------------------------------ TLCL
C** TEMPERATURE AT LCL
      OR IF(NAMVAR .EQ. NTLCL     )
       CALL  STLCL
C------------------------------------------------ TVIR
C** VIRTUAL TEMPERATURE     (K)
      OR IF (NAMVAR .EQ. NTVIR)
       CALL STVIR
C------------------------------------------------ QMR
C** TOTAL MIXING RATIO
C     OR IF(NAMVAR.EQ.NQMR      )
C       CALL SQMR
C------------------------------------------------ ETHETAK
C** ETHETA FOR KERRY EMANUAL FOR PROJECT 813
C     OR IF(NAMVAR   .EQ.NETHETAK)
C        CALL SETHETAK
C------------------------------------------------ CVI
C******                  CVI
      OR IF(NAMVAR .EQ. NCVI)
       CALL SCVI
C------------------------------------------------ BRE
C******  REYNOLDS NUMBER COEFFICIENT
C     OR IF(NAMVAR .EQ. NBRE )
C      CALL SBRE
C------------------------------------------------ THETAQ
C*******  WET  EQUIVALENT POTENTIAL TEMPERATURE (K)
C     OR IF(NAMVAR   .EQ. NTHETAQ   )
C      CALL  STHETAQ
C------------------------------------------------ RE
C******  REYNOLDS NUMBER
C     OR IF(NAMVAR .EQ. NRE )
C      CALL SRE
C-----------------------------------------------------------------------
C **  ADD LEVEL FIVE NEW DERIVED VARIABLE IN SAVE BLOCK: ADDV5
.USE  ADDV5
C-----------------------------------------------------------------------------
      ELSE
       KT5 = KT5+1
       KTSV(KT5) = K
      END IF
      END DO
   59 CONTINUE
      END IF
C***************************************************************************
C****************       LEVEL SIX DERIVATION        ************************
C***************************************************************************
C** CALL FRAME HERE FOR DATA BLOCK PRINTING ON MICROFILM BEFORE PLOTS
C   PMS HISTOGRAMS
      IF(NSTAGE.EQ.4) CALL FRAME
      IF(KT5.GT.0)
      DO (KT=1,KT5)
       K= KTSV(KT)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR =ICON(IND +IOFF01)
C----------------------------------------------------
C** KEYWD -- DF -- A 2-CHARACTER KEY WORD FOR DIFFERENCE/SUM  OF ANY
C                  TWO VARIABLES
C
       ENCODE(2,13,KEYWD) NAMVAR
   13 FORMAT(A2)
C-------------------------------------------------
       INDGET = ICON(IND+IOFF02)
       INDPUT = ICON(IND+IOFF04)
       LRATE  = ICON(IND+IOFF05)
       CONS1  =  CON(IND+IOFF08)
       NUMSOU = ICON(IND+IOFF11)
       LDO    = NCDO*LRATE
       DO (N=1,MAXSOU)
        LRTSOU(N) = 1
        IPSOU(N) = 0
       END DO
       DO(J=1,NUMSOU)
        INDD= IND+IOFF12+(J-1)
        KSOU= ICON(INDD)
        INDS = INDVAL + LENCON *(KSOU-1)
        LRTSOU(J) = ICON  (INDS + IOFF05)
        IPSOU(J ) = ICON(INDS + IOFF04)
       END DO
C------------------------------------------------ DFXXXXXX
C** DIFFERENCE OF ANY TWO VARIABLES
      IF(KEYWD .EQ.NDIF   )
       CALL  SDIF
C----------------------------------------------- NETT
      OR IF(NAMVAR .EQ. NNETT      )
        CALL SSUM2
C----------------------------------------------- NETV                   ------
C***** NET VISIBLE IRRADIANCES (POSITIVE INWARD)  ( W/M2)
      OR IF(NAMVAR .EQ. NNETV      )
         CALL SDIF
C----------------------------------------------- NETI                   ------
C***** NET INFRARED IRRADIANCES (POSITIVE INWARD) (W/M2)
      OR IF(NAMVAR .EQ. NNETI      )
         CALL SDIF
C------------------------------------------------ SMXXXXX
C** THE SUM OF ANY TWO VARIABLES
      OR IF(KEYWD .EQ.NSUM  )
       CALL  SSUM2
C------------------------------------------------ RZXXXXX
C** THE RATIO OF ANY TWO VARIABLES
      OR IF(KEYWD .EQ.NRATIO)
       CALL  SRATIO
C------------------------------------------------ TRKI
      OR IF(NAMVAR.EQ.NTRKI      )
         CALL STRKI
C----------------------------------  PMS-1D BLOCKS  ------
C------------------------------------------------ ASASP
      OR IF(NAMVAR.EQ.NASAS)
         CALL SASAS
C------------------------------------------------ FSSP
      OR IF(NAMVAR.EQ.NFSSP  )
         CALL SFSSP
C------------------------------------------------ X200
      OR IF(NAMVAR.EQ.NX200         )
         CALL SX200
C------------------------------------------------ X260
      OR IF(NAMVAR.EQ.NX260         )
         CALL SX260
C------------------------------------------------ Y200
      OR IF(NAMVAR.EQ.NY200         )
         CALL SY200
C-----------------------------------------------------------------------
C **  ADD LEVEL SIX NEW DERIVED VARIABLE IN SAVE BLOCK: ADDV6
.USE  ADDV6
C-----------------------------------------------------------------------
      ELSE
       KT6= KT6+1
       KTSV(KT6)= K
      END IF
      END DO
      END IF
C***************************************************************************
C****************       LEVEL SEVEN DERIVATION      ************************
C***************************************************************************
      IF(KT6.GT.0)
      DO (KT=1,KT6)
       K= KTSV(KT)
       IND = INDVAL+LENCON*(K-1)
       NAMVAR   =ICON(IND +IOFF01)
       INDGET   = ICON(IND+IOFF02)
       INDPUT   = ICON(IND+IOFF04)
       LRATE    = ICON(IND+IOFF05)
       CONS1   = CON(IND+IOFF08)
       LDO= LRATE * NCDO
       DO (N=1,MAXSOU)
        LRTSOU(N) = 1
        IPSOU(N) = 0
       END DO
       NUMSOU = ICON(IND+IOFF11)
       DO(J=1,NUMSOU)
        INDD= IND+IOFF12+(J-1)
        KSOU= ICON(INDD)
        INDS = INDVAL + LENCON *(KSOU-1)
        LRTSOU(J) = ICON  (INDS + IOFF05)
        IPSOU(J ) = ICON(INDS + IOFF04)
       END DO
C------------------------------------------------ DA
      IF(NAMVAR.EQ.NDA       )
         CALL SDA
C------------------------------------------------ LWCCZ
      OR IF(NAMVAR.EQ.NLWCCZ    )
          CALL SLWCCZ
C------------------------------------------------ PLWCCZ
      OR IF(NAMVAR.EQ.NPLWCCZ    )
          CALL SPLWCCZ
C------------------------------------------------ LWCCF
      OR IF(NAMVAR.EQ.NLWCCF    )
          CALL SLWCCF
C------------------------------------------------ PLWCCF
      OR IF(NAMVAR.EQ.NPLWCCF    )
          CALL SPLWCCF
C------------------------------------------------ DINSLR
C** DISTANCE BETWEEN INS AND LORANC POSITION
C     OR IF(NAMVAR.EQ.NDINSLR)
C       CALL  SDINSLR
C-----------------------------------------------------------------------
C **  ADD LEVEL SEVEN NEW DERIVED VARIABLE IN SAVE BLOCK: ADDV7
.USE  ADDV7
C-----------------------------------------------------------------------
      ELSE
       KT7= KT7+1
       KTSV(KT7)= K
      END IF
      END DO
      END IF
      KTEND=KT7
C-----------------------------------------------------------------------
C **  ADD A NEW LEVEL FOR DERIVED VARIABLE IN SAVE BLOCK: ADDV8
.USE  ADDV8
C********************************************************************
C*****************   VARIABLES NOT FOUND IN THIS SUBROUTINE  ********
C********************************************************************
      IF(KTEND.GT.0)
       DO (KT=1,KTEND)
        K= KTSV(KT)
        IND = INDVAL+LENCON*(K-1)
        NAMVAR =ICON(IND +IOFF01)
        LRATE    = ICON(IND+IOFF05)
        IF(NSTAGE.EQ.4)WRITE(KPROC,89) NAMVAR
   89   FORMAT(' CALIB WARNING: ',A8, ' NOT FOUND IN DATA STMT NAME',   E '
     $  ' LIST. VALUES OF 99999. ARE STORED AT LRATE')
        LDO= NCDO*LRATE
        INDPUT   = ICON(IND+IOFF04)
.USE  D99999
       END DO
      END IF
      RETURN
      END
C***********************************************************************
      SUBROUTINE SMOVE
C***********************************************************   MOVE
C** MOVE DATA FROM DATA(INDGET) TO DATA(INDPUT) WITH A BIAS/OFFSET
.REPL
.USE  TBLANK
.USE  BLANK
.USE  IOUNIT
.USE  CALCOM
.USE  TOP
.USE  OP
.USE  ERROR
.NOREP
      INDGET = INDGET -1
      INDPUT = INDPUT -1
      DO (IX=1,LDO)
        DATA(INDPUT+IX) = DATA(INDGET+IX) + CONS1
      END DO
      RETURN
      END
