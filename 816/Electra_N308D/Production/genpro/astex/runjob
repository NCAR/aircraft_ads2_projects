#! /bin/csh -f
#
#  Usage:  rungpsjob <flight> [<priority>]
#
#  Originally written by Celia Chen                        May 1991
#  Extensively revised by Ron Ruth for 1-739               June 1991
#  Further revisions for other projects      August 1991 - February 1992
#  Revised for dual input-data sets                        August 1992
#  Revised to add GPS corrections in same Cray job         October 1992
#  Current revision  RLR  920805
#
#
#  * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * * * * * * *
#  *                  Special version for 2-816 ASTEX                       *
#  *                                                                        *
#  *    adds three unique calibration constants to the PDUD file for each   *
#  *    flight (similar to what is done with latitude and longitude).       *
#  * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * * * * * * *
#
#  See "Bug report" at end of comment section.
#
#  This script will generate a GENPRO pdud file and a job script file for
#   shavano (NCAR's Cray Y/MP) for a particular flight/segment.  The newly-
#   created job script file will then be submitted to shavano upon user
#   approval.  A flight/segment can be an entire flight or a portion of a
#   flight (usually separated from other segments by a time gap).
#
#  When this script ends (for whatever reason), an exit status is output:
#     Status  Explanation
#       0     Normal exit
#       1     Script found an error or problem with execution
#       2     User typed ^C to interrupt processing
#       3     Job not successfully sent to shavano (via nrnet script)
#
#   The following environment variables are required for this script to run:
#     $LOGNAME      login name of user
#     $HOST         name of computer on which user is logged in
#     $DOMAIN       network domain where $HOST is located
#     $TMP          directory name used for temporary files
#     $GPTEMPLATE   directory name with GENPRO template files
#     $GPSCRIPT     directory name with GENPRO script files
#     $GPMCSOURCE   directory name with GENPRO mcopy files
#     $GPMGSOURCE   directory name with GENPRO merget files
#
#
#  It is helpful to have GUINT do much of the preliminary work of setting up
#   the GENPRO processing environment.  GUINT automatically creates many of the
#   files needed to run this script.  The files can be generated manually, so
#   long as the proper format is maintained for each.  In the following
#   descriptions, any reference made to the string 'project#' should be
#   interpreted as a 3-digit project number, e.g., 733.
#
#  This script is one of a series of scripts used to prepare a project for
#   GENPRO processing.  Other scripts of interest (in addition to GUINT) are:
#     1) $GPSCRIPT/conv    <-- converts a Cray COS/JCL script to UNICOS and
#                               inserts certain keywords which this script
#                               (rungpsjob) uses.
#     2) catrcp.project#   <-- unique script file which creates a GENPRO CALIB
#                               (IFTRAN) file
#
#  For this script to work, the following UNIX utility must be available on the
#   system:
#     tr                   <-- routine receiving standard input which can
#                               capitalize all its lower-case letters and 
#                               send the resulting string to standard output.
#
#  For this script to work, the following reference files MUST exist in the
#   current working directory:
#     1) summary.project#  <-- contains project reference information:
#                               turbulence rate, reference dynamic pressures
#                               and flight data (dates, times, tape numbers)
#                               It is typically produced by GUINT.
#     2) drxx.project#     <-- contains more reference data:  project title,
#                               plot interval, time zone, and where to send
#                               plot, print and output data
#     3) pdud.project#     <-- reference data for GENPRO (A file with this name
#                               is required.  Different versions of it can
#                               exist to customize job runs, if needed.  If
#                               so, their names are found in the file:
#                               'group.project#' file.  See description below.)
#     4) calif.project#    <-- reference CALIB (IFRTAN) for GENPRO usually
#                               generated by a catrcp.project# script  (If the
#                               calif.project# file doesn't exist, this script
#                               will attempt to create it by running
#                               catrcp.project#, if it exists).
#     5) consts.project#   <-- table of fast ozone and Ophir III calibration
#                               constants for ASTEX
#
#  Optional file (specified by the environment variable $SUBMITLOG) will be
#   used to log job submissions to shavano (Cray Y/MP), if present:
#     1) $SUBMITLOG        <-- date, time, file, sequence number and optional
#                               comment (all on one line) appended to file
#
#  Optional files (in the current working directory) will be used, if present:
#     1) segmnts.project#  <-- GUINT time segments for all flight/segments
#     2) group.project#    <-- information about variations in processing for
#                               individual flight/segment or for different
#                               groups of flights/segments
#     3) <modcal>          <-- additions to 'calif.project#'  (More than one of
#                               these files can exist.  If so, their names are
#                               found in the 'group.project#' file, one file
#                               per flight/segment.)
#     4) latlon.project#   <-- table of starting latitudes and longitudes for
#                               each flight/segment
#     5) astg.project#     <-- table of altimeter settings for each
#                                flight/segment
#     6) data2.project#    <-- table of secondary data file names (possibly
#                               including full path name) for each
#                               flight/segment
#
#  Other files necessary for this script to run are:
#    $GPTEMPLATE/gengpsxx  <-- generic shavano script (modified for a flight)
#    $GPMCSOURCE/mcopy.f   <-- shavano program to split a large output data
#                               file into smaller pieces (shavano script will
#                               first attempt to get executable mcopy.exe
#                               from $HOST if it can.)
#    $GPMGSOURCE/merget.f  <-- shavano program to merge large input data files
#                               (shavano script will first attempt to get
#                               executable merget.exe from the MSS if it can.)
#
#  Files necessary for the job to run on shavano are:
#    /RAF/PSTORE/GENPRO/REL02/ERRS  <-- ERRS file for GENPRO on SCD's Mass
#                                        Store
#    /RAF/GENPRO/LIBS/libgenprox    <-- GENPRO binary library on SCD's Mass
#                                        Store
#    /RAF/GENPRO/LIBS/libcalib      <-- GENPRO CALIB binary library on SCD's
#                                        Mass Store
#    ADS raw data set               <-- on SCD's Mass Store
#
#
#  The current working directory can contain only one project's files. If the
#   script finds more than one summary.project# file, it quits with an error.
#   The "summary.project#" is normally produced by GUINT, but it can be created
#   manually so long as it has the same format.  (See $GPTEMPLATE/summary.2xx.)
#   Also helpful is a GUINT "segmnts.project#" file (a summary of time periods
#   in the raw data obtained by reading time data in all the records for the 
#   entire project), but it is not required for this script to run.
#  
#  The 'drxx.project#' file includes the following information (edited from the
#   template file '$GPTEMPLATE/drxx'):
#    1) the project title template which will be edited automatically to
#        include the flight number and date.
#    2) the plot interval in seconds
#    3) the title for the time zone on plots
#    4) all output disposition flags (where to send print/stats, plot and
#        archive output data)
#
#  The pdud.project# file contains the basic controls for GENPRO.  This script
#   searches for unique entries in the pdud.project# file which are changed to
#   customize the GENPRO controls for each flight.  If changes are needed for
#   a certain group of flights (like two sets of calibrations for a sensor),
#   separate <pdud.project#> files should exist for each.  A 'group.project#'
#   file is used having entries of the specific pdud file name which should be
#   used for each flight.
#
#  The 'calif.project#' file has reference IFTRAN files for GENPRO's CALIB,
#   if they are different from the standard GENPRO CALIB library.  At present,
#   this file will always exist.  It is usually created by running the script
#   'catrcp.project#'.  If 'calif.project#' doesn't exist, this script will
#   try to run 'catrcp.project#' to create it.
#
#  The 'catrcp.project#' file is a script used to generate a 'calif.project#'
#   file.  Although this file exists in reference form, more than likely it
#   needs to be custom edited for a given project to add unique CALIB IFTRAN
#   code.  Differences exist in the calibration library for each aircraft as
#   well as the instruments mounted on them.  A template file exists as
#   $GPTEMPLATE/catrcp.Xxx, where X is either 2,7 or 8.
#
#  The 'segmnts.project#' file, created by GUINT, has actual start and end
#   times for all the flight/segments of a project.  (GUINT software scans
#   each raw data set for starting time, time gaps and end time.)  If this
#   file doesn't exist, these data are acquired from operator-entered values
#   found in the 'summary.project#' file.  It's a good idea to verify these
#   times.
#
#  The 'group.project#' file is a table of unique processing options.  A user
#   creates this file from the template file '$GPTEMPLATE/group.xxx'  The first
#   entry on each line is a flight number/segment (e.g., RF03A) followed by
#   a processing group number, a pdud file name and (optionally) a modcal file
#   name.  There can be only one pdud file and one modcal file per
#   flight/segment.  The process group, though required, is only a reference
#   number for bookkeeping purposes.
#
#  The 'latlon.project#' file is a table of starting latitudes and
#   longitudes for each flight/segment.  The first entry on each line is the
#   flight/segment number (e.g., RF03A) followed by a starting latitude then
#   longitude.  If a project always has the same starting point, this file
#   can be omitted, and the latitude and longitude values found in the
#   'summary.project#' file are used.  A template for this file is found in
#   $GPTEMPLATE/latlon.ref.
#
#  The 'astg.project#' file is a table of altimeter setting values to be used
#   for each flight/segment.  The first entry on each line is the
#   flight/segment number (e.g., RF03A) followed by an altimeter setting in
#   millibars.  If a project always uses the standard altimeter setting of
#   1013.24 mbar, this file can be omitted.  A template for this file is found
#   in $GPTEMPLATE/astg.ref.
#
#  The 'data2.project#' file is a table of secondary data-file names to be
#   used for each flight/segment.  The first entry on each line is the
#   flight/segment number (e.g., RF03A) followed by the secondary data file's
#   name.  It can be a name relative to the current directory or a full path
#   name.  An example of a secondary data file would be a DAP file used to
#   correct a variable (e.g., fast ozone) during final processing.  It is used
#   in conjunction with a special second input operation which will merge this
#   second data set in with the first for one GENPRO processing run.  If there
#   is no secondary data set, this file can be omitted.  A template for this
#   file is found in $GPTEMPLATE/data2.ref.
#
#   Bug report:  If the following condition exists:
#     1)  The summary file shows a flight with segments;
#     2)  The entry contains only one "multiple" MSS file name
#     3)  The MSS path name letter does not agree with the the segment letter
#          (column #3 doesn't agree with column #6)
#     4)  The GENPRO job will go into some kind of infinite loop and exceed
#          any time limit you set.
#    Fix:  Change the 'gengpsxx' file to look for a MULTMSS=1, and, if true,
#       use the first name in the $TAPE variable as the input MSS bitfile name.
#
#   Note:  At present this script cannot handle multiple input tapes with
#           times that straddle tape numbers (e.g., HaRP).  Some mechanism
#           must be devised to handle different combinations of V or R
#           numbers and segment letters in MSS volume names.  It picks these
#           data out of the summary file, and its format is too restrictive.
#           I suppose one could create a tape-structure file to handle it.
#
#  
#      * * * * * * * * * * * * * * *
#     *                             *
#    *  Executable code starts here  *
#     *                             *
#      * * * * * * * * * * * * * * *
#  
onintr abort
umask 002
set clean = 0
#
  echo "     *****************   Special version for 2-816 ASTEX   *****************"
#
if ($#argv < 1 ) then
  echo "This script will generate a GENPRO data (PDUD) file and a shavano job script"
  echo " file for the particular flight of your project entered on the command line."
  echo " The shavano script will process raw data from a project's flight (or"
  echo " flight segment) to produce a number of output data products, including"
  echo " a final GENPRO-format data set on the SCD Mass Store System."
  echo ""
  echo "One can enter a flight and segment in any of these ways:"
  echo "    $0 rf02"
  echo "    $0 rf02a"
  echo "    $0 rf02 a"
  echo ""
  echo " The script will then build the needed files and ask if you want to submit"
  echo "  the job to the Cray."
  echo ""
  echo " If you want the job to run at other than the default priority (economy, as of"
  echo "  this writing), add the letters pr (for premium) or re (for regular) as an"
  echo "  extra last argument."
  echo ""
  exit
endif
#
#  Set reference directories
set template = $GPTEMPLATE
set dsource = $GPMCSOURCE
set msource = $GPMGSOURCE
set domain = $DOMAIN
#
#  Find summary.project# file in the current directory,
if (! -e summary.*) then
  echo "Cannot find a GUINT summary.* file in the current directory"
  goto quit
endif
if (! -r summary.*) then
  echo "Cannot access a GUINT summary.* file in the current directory"
  goto quit
endif
set fil = (summary.*)
if ($#fil > 1) then
  echo "There is more than one summary file"
  echo "  Files are:  $fil"
  echo "  $0 cannot handle that"
  goto quit
endif
set proj = (`echo $fil:e`)
if ( $#proj > 1 ) then
  echo More than one project exists in this directory
  echo " $0 can't handle that"
  goto quit
endif
unset ac
set mesg = "$proj is an invalid project number"
if ($proj < 200) then
  echo $mesg
  goto quit
else if ($proj < 300) then
  set ac = 312
else if ($proj < 500) then
#  set ac = 304
  echo $mesg
  goto quit
else if ($proj < 700) then
#  set ac = 306
  echo $mesg
  goto quit
else if ($proj < 800) then
  set ac = 307
else if ($proj < 900) then
  set ac = 308
else
  echo $mesg
  goto quit
endif
#
#  Check for needed files (pdud.$proj, drxx.$proj, calif.$proj)
if (! -r pdud.$proj) then
  echo File pdud.$proj does not exist
  goto quit
endif
if (! -r drxx.$proj) then
  echo File drxx.$proj does not exist
  goto quit
endif
if (! -r calif.$proj) then
  echo File calif.$proj does not exist
  if (! -r catrcp.$proj) then
    echo File catrcp.$proj does not exist
    goto quit
  endif
  echo Generating calif.$proj file
  catrcp.$proj
  set result = $status
  if ($result != 0) then
    echo Error $result creating calif.$proj file
    goto quit
  endif
  set modcalyn = "yes"
else
  set modcalyn = "no"
endif
#
#  Set input argument variables
set segment=""
set priority = none
#   convert command-line argument #1 characters to upper case
set input = `echo $argv[1] | tr '[a-z]' '[A-Z]'`
#  see how many characters were entered
set incnt = `echo $input | wc -c`
if ($incnt <5 || $incnt >6 ) then
  echo "Illegal flight ($input)"
  echo "Syntax is 4 or 5 characters (e.g., tf03, rf03b)"
  goto quit
else if ($incnt == 6) then
#  segment entered along with flight number (5 chars)
  set flt = `echo $input | sed -e "s/\(....\)\(.\)/\1/p"`
  set segment = `echo $input | sed -e "s/\(....\)\(.\)/\2/p"`
#  check for runtime priority request
  if ($#argv > 1) then
    set input = `echo $argv[2] | tr '[a-z]' '[A-Z]'`
    if ($input == PR) then
      set priority = prem
    endif
    if ($input == RE) set priority = reg
    if ($input == EC) set priority = econ
  endif
else
#  segment entered separately, if at all
  set flt = $input
#  check for more information
  if ($#argv > 1) then
    set input = `echo $argv[2] | tr '[a-z]' '[A-Z]'`
    set incnt = `echo $input | wc -c`
#  check for segment letter or priority request
    if ($incnt == 2) then
      set segment = $input
#  check for priority request, too
      if ($#argv > 2) then
        set input = `echo $argv[3] | tr '[a-z]' '[A-Z]'`
        set incnt = `echo $input | wc -c`
        if ($input == PR) set priority = prem
        if ($input == RE) set priority = reg
        if ($input == EC) set priority = econ
      endif  
    else if ($incnt == 3) then
      if ($input == PR) set priority = prem
      if ($input == RE) set priority = reg
      if ($input == EC) set priority = econ
    endif
  else
#  no segment and no priority request
    set segment = ""
  endif
endif
#
#  See if segments.[$proj] exists
set segexist = "no"
if (-r segmnts.$proj) set segexist = "yes"
#
#  check segments file or summary file for requested flight (segment)
if ($segexist == "yes") then
  set sfile = segmnts
  echo  "Gathering project and flight information from segmnts & summary files"
else
  set sfile = summary
  echo  Gathering project and flight information from summary file
endif
set nsegs = `grep -ci $flt "$sfile.$proj"`
set result = $status
if ($result != 0) then
  echo "Could not find $flt in $sfile.$proj file"
  goto quit
endif
if ($nsegs > 1 && $segment == "") then
  echo "Selected flight has $nsegs segments but none specified"
  echo " $0 can only process one segment at a time"
  echo " Reenter it with the proper format"
  goto quit
endif
#  segment given but flight has no segment
if ($nsegs == 1 && $segment != "") then
  set segment = ""
  echo "  Segment specified, but flight has no segment; doing whole flight"
endif
if ($segment != "") then
  grep -ci $flt$segment $sfile.$proj
  set result = $status
  if ($result != 0) then
    echo "Could not find $flt$segment in $sfile.$proj file"
    echo " There are $nsegs segments"
    goto quit
  endif
endif
#
#  Set output and temporary file names
set fgen = gen$flt$segment.$proj
set fdat = datgc$flt$segment.$proj
set fpdud = pdud$flt$segment.$proj
set tdr = $TMP/dr$flt$segment.$proj
set tgen = $TMP/gen$flt$segment.$proj
set tsnp = $TMP/snp$flt$segment.$proj
set tgincl = $TMP/gincl$flt$segment.$proj
#
#  Use GUINT summary.project# file to get project reference information
set refinfo = (`grep -i \[HLN\]RT summary.$proj`)
set result = $status
if ($result != 0 ) then
  echo Project reference data not found in the summary.$proj file
  goto quit
endif
if ( $#refinfo < 7 ) then
  echo  Bad data in summary.$proj file
  goto quit
endif
#    set turbulence rate (convert characters to upper case)
set turbrt = `echo $refinfo[2] | tr '[a-z]' '[A-Z]'`
#
#  Use GUINT summary.project# file to get fiscal year
set input = (`grep '[0-9][0-9][01][0-9][0-9][0-9]' summary.$proj | sort +2 -3`)
set result = $status
if ($result != 0 ) then
  echo Bad data found in the summary.$proj file
  goto quit
endif
set date = $input[2]
set year = `echo $date | sed -e "s/\(....\)\(..\)/19\2"/p`
set mon  = `echo $date | sed -e "s/\(..\)\(..\)\(..\)/\1/p"`
#  If MSS file-naming convention for this project doesn't use fiscal year,
#   one needs to comment out the next executable line.  Else it will search
#   the MSS with the wrong path name.  (This can also occur if a project
#   straddles the threshold month and the previous one.)
if ($mon > 9) @ year ++
unset date
unset mon
#
#  Use GUINT summary.project# file to get flight data
set input = (`grep -i $flt$segment summary.$proj`)
set result = $status
if ($result != 0 ) then
  echo Flight $flt$segment not found in the summary.$proj file
  goto quit
endif
if ( $#input < 2 ) then
  echo  Bad data in summary.$proj file
  goto quit
endif
#   convert characters to upper case
set temp = (`echo $input | tr '[a-z]' '[A-Z]'`)
set tape = $temp[1]
set date = $temp[2]
set yr   = `echo $date | sed -e "s/\(....\)\(..\)/\2/p"`
set day  = `echo $date | sed -e "s/\(..\)\(..\)\(..\)/\2/p"`
set mon  = `echo $date | sed -e "s/\(..\)\(..\)\(..\)/\1/p"`
if ($mon == 01) set month=JAN
if ($mon == 02) set month=FEB
if ($mon == 03) set month=MAR
if ($mon == 04) set month=APR
if ($mon == 05) set month=MAY
if ($mon == 06) set month=JUN
if ($mon == 07) set month=JUL
if ($mon == 08) set month=AUG
if ($mon == 09) set month=SEP
if ($mon == 10) set month=OCT
if ($mon == 11) set month=NOV
if ($mon == 12) set month=DEC
unset date
unset mon
set date = $day$month$yr
#  Use segmnts.$proj file, if I can, to get flight time information.
if (segexist == "yes") then
  set input = (`grep -i $flt$segment segmnts.$proj`)
  set result = $status
  if ($result != 0) then
    echo $flt$segment not found in the segmnts.$proj file
    goto quit
  endif
  if ($#input > 2) then
    set stime = $input[2]
    set etime = $input[3]
  else
    echo "Bad data in segmnts.$proj file (could not find times)"
    goto quit
  endif
else
#  Else, use data in summary.$proj file instead
  if ($#temp > 4) then
    set stime = $temp[4]
    set etime = $temp[5]
  else
    echo "Bad data in summary.$proj file (could not find times)"
    goto quit
  endif
endif
set start = `echo $stime | sed -e "s/\(..\)\(..\)\(..\)/ \1., \2., \3. /p"`
set end   = `echo $etime | sed -e "s/\(..\)\(..\)\(..\)/ \1., \2., \3. /p"`
set shh = `echo $stime | sed -e "s/\(..\)\(..\)\(..\)/\1/p"`
set smm = `echo $stime | sed -e "s/\(..\)\(..\)\(..\)/\2/p"`
set sss = `echo $stime | sed -e "s/\(..\)\(..\)\(..\)/\3/p"`
set ehh = `echo $etime | sed -e "s/\(..\)\(..\)\(..\)/\1/p"`
set emm = `echo $etime | sed -e "s/\(..\)\(..\)\(..\)/\2/p"`
set ess = `echo $etime | sed -e "s/\(..\)\(..\)\(..\)/\3/p"`
@ xstart = $shh * 3600 + $smm * 60 + $sss
@ xend = $ehh * 3600 + $emm * 60 + $ess
@ xdiff = $xend - $xstart
if ($xdiff < 0) then
  echo "Requested end time is earlier than requested start time"
  goto quit
endif
#
#  Check for multiple MSS files (using information in summary.$proj file)
set multmss = "no"
if ($#temp > 6) then
  @ multmss = $#temp - 5
  @ incnt = 7
  set tapeseg = $temp[6]
  while ($incnt <= $#temp)
    set tapeseg = `echo $tapeseg $temp[$incnt]`
    @ incnt ++
  end
endif
#
#  Generate $tdr file using drxx.project# file as a template
echo Generating $tdr file for GENPRO
unset input
set input = `grep PROJECT drxx.$proj`
set in = `echo $input | sed -e "s/xxss/$flt$segment/p"`
set input = `echo $in | sed -e "s/ddmmyy/$day$month$yr/p"`
unset in
echo $input                                     >! $tdr
echo "PRDATE = ('$day','$month','$yr')"         >> $tdr
echo "PRTIME = ('"$shh"H','"$smm"M','"$sss"S')" >> $tdr
echo "BEGIV=( $start )"                         >> $tdr
echo "ENDIV=( $end )"                           >> $tdr
echo "BEGSNP=( $start )"                        >> $tdr
echo "ENDSNP=( $end )"                          >> $tdr
set result = $status
set clean = 1
if ($result != 0) then
  echo "Error $result creating intermediate file:  $tdr"
  goto quit
endif
#
#  Generate snpxx file
echo Generating $tsnp file for GENPRO
#   flushp  (3rd argument of FLUSHP line in drxx.$proj file)
set flushp = (`grep FLUSHP drxx.$proj`)
shift flushp
shift flushp
#   Is time interval less than flush period or does it start on the hour
#     or is the flush period more than an hour?
if (($xdiff < $flushp ) || (( $sss == 00 ) && ( $smm == 00 )) || ($flushp > 3600) ) then
#    Yes -- set only one time interval
  echo "BEGSNP=( $start )" >! $tsnp
  echo "ENDSNP=( $end )"   >> $tsnp
  set result = $status
else
#   Deal with flush period
  set test = 3600
  set fin = 0
  while ($test> 0)
    @ test = $test - $flushp
    @ fin ++
  end
#    Is flush period an exact part of an hour
  if ($test == 0) then
#     Yes
    @ incr = 0
    @ sms = $smm * 60 + $sss
    while ($fin > $incr)
      if (($flushp * $incr) == $sms) set fin = -1
      @ incr ++
    end
#     Does time interval start on a flush period?
    if ($fin < 0) then
#    Yes -- set only one time interval
      echo "BEGSNP=( $start )" >! $tsnp
      echo "ENDSNP=( $end )"   >> $tsnp
      set result = $status
#    No  -- set two time intervals
    else
      set phh = $shh
      @ ftime = $shh * 3600
      while ($xstart > $ftime)
        @ ftime = $ftime + $flushp 
      end
        @ pss = $ftime - $shh * 3600
        @ pmm = $pss / 60
        @ pss = $pss - $pmm * 60
        if ($pmm > 59) then
          @ pmm = $pmm - 60
          @ phh = $phh + 1
        endif
      echo "BEGSNP=( $shh., $smm., $sss. ),( $phh., $pmm., $pss. )" >! $tsnp
      echo "ENDSNP=( $phh., $pmm., $pss. ),( $ehh., $emm., $ess. )" >> $tsnp
      set result = $status
    endif
  else
#   No -- set one time period
    echo "BEGSNP=( $start )" >! $tsnp
    echo "ENDSNP=( $end )"   >> $tsnp
    set result = $status
  endif
endif
if ($result != 0) then
  echo "Error $result creating intermediate file:  $tsnp"
  goto quit
endif
#
# Get initial latitude and longitude (from file, if extant)
if (-r latlon.$proj) then
  set latlon = (`grep -i $flt$segment latlon.$proj`)
  if ($#latlon > 2) then
    echo "Acquiring initial latitude and longitude from latlon.$proj file"
    set xlat = $latlon[2]
    set xlon = $latlon[3]
  else
    echo  Bad data in latlon.$proj file
    goto quit
  endif
else
  echo "Acquiring initial latitude and longitude from summary.$proj file"
  set xlat = $refinfo[4]
  set xlon = $refinfo[5]
endif
#
# Get initial altimeter setting (from file, if extant)
if (-r astg.$proj) then
  set altstg = (`grep -i $flt$segment astg.$proj`)
  if ($#altstg > 1) then
    echo "Acquiring altimeter setting from astg.$proj file"
    set astg = $altstg[2]
  else
    echo  Bad data in astg.$proj file
    goto quit
  endif
else
  echo "Using altimeter setting of 1013.24 mbar."
  set astg = 1013.24
endif
#
# Get ASTEX calibration constants (from file)
if (-r consts.$proj) then
  set const = (`grep -i $flt$segment consts.$proj`)
  if ($#const > 1) then
    echo "Acquiring ASTEX constants from consts.$proj file"
    set con1 = $const[2]
  else
    echo  Bad data in consts.$proj file
    goto quit
  endif
  if ($#const > 2) then
    set con2 = $const[3]
  else
    echo  Bad data in consts.$proj file
    goto quit
  endif
  if ($#const > 3) then
    set con3 = $const[4]
  else
    echo  Bad data in consts.$proj file
    goto quit
  endif
else
  echo  Cannot find or use consts.$proj file
  goto quit
endif
#
# Get secondary data set file name (from file, if extant)
#  Note:  Will look for secondary data file in the current directory, unless
#          an absolute path name is given in the data2.$proj file
if (-r data2.$proj) then
  set data2 = (`grep -i $flt$segment data2.$proj`)
  if ($#data2 > 1) then
    echo "Acquiring secondary data set name from data2.$proj file"
    set ndata2 = $data2[2]
    if (! -r $ndata2) then
      echo Cannot access secondary data file $ndata2
      goto quit
    endif
  else
    echo "Bad data in data2.$proj file for $flt$segment"
    goto quit
  endif
else
  set ndata2 = "no"
endif
#
# Initialize flags
set modcalflag = "no"
set modcal = "no"
#
# Get calib modification specifications from group file, if it exists.
echo "Selecting correct GENPRO reference data file(s) for this flight"
if (-r group.$proj) then
  set group = (`grep -i $flt$segment group.$proj`)
  set result = $status
  if ($result != 0) then
    echo Could not find $flt$segment in group.$proj file
    goto quit
  endif
  if ($#group < 3) then
    echo Bad data in group.$proj file
    goto quit
  endif
  echo Flight $flt$segment is in group $group[2]
# Get pdud file name (in current directory, unless absolute path given)
  set pdud = $group[3]
  if (! -r $pdud) then
    echo Cannot access file $pdud
    goto quit
  endif
  if ($#group > 3) then
# Get modcal file name (in current directory, unless absolute path given)
    set modcal = $group[4]
    if (! -r $modcal) then
      echo Cannot access file $modcal
      goto quit
    else
      set modcalflag = "yes"
    endif
  endif
else
#  If there is no group file, then, perhaps, I really have standard processing
  echo Could not find group.$proj file
  echo " using standard pdud.$proj file and no group file"
  set pdud = pdud.$proj
endif
#
echo  Using file $pdud for reference data
if ($modcalflag != "no") echo Using file $modcal for calibration modifications
#
# Build GENPRO batch job (script) file for this flight
echo "Generating GENPRO batch job (Unicos script) file for flight $flt$segment"
if (-e $fgen) echo $fgen will be overwritten
set cwd = `pwd`
echo "#" >! $tgincl
echo "#   Set GENPRO environment for Cray $flt$segment job" >> $tgincl
echo "set ACCT = 41113$ac">> $tgincl
echo "set USER = $LOGNAME" >> $tgincl
echo "set HOST = $HOST" >> $tgincl
echo "set DOMAIN = $domain" >> $tgincl
echo "set SOURCE = $cwd" >> $tgincl
echo "set DSOURCE = $dsource" >> $tgincl
echo "set MSOURCE = $msource" >> $tgincl
echo "set COMPILE = yes" >> $tgincl
echo "set DENSITY = 6250" >> $tgincl
echo "set LENGTH = 2400" >> $tgincl
echo "set PDUD = $fpdud" >> $tgincl
echo "set CALIF = calif.$proj" >> $tgincl
echo "set MODCALFLAG = $modcalflag" >> $tgincl
if ( ($modcalyn == "yes") && ($modcalflag == "no") ) then
  echo "set MODCAL = $modcalyn" >> $tgincl
else
  echo "set MODCAL = $modcal" >> $tgincl
endif
echo "set DATA2 = $ndata2" >> $tgincl
echo "set YEAR = $year" >> $tgincl
echo "set PROJECT = $proj" >> $tgincl
echo "set FLTNO = $flt" >> $tgincl
echo "set SEG = $segment" >> $tgincl
echo "set TAPENO = $tape" >> $tgincl
echo "set MULTMSS = $multmss" >> $tgincl
if ($multmss != "no") then
  echo "set TAPESEG = ( $tapeseg )" >> $tgincl
endif
echo "set TURBRT = $turbrt" >> $tgincl
echo "set MSSMAXSZ = 195000000" >> $tgincl
echo "set GDAT = $fdat" >> $tgincl
#  set output disposition flags
set outlist = ( OUT2MSS PRINT2MSS PLOT2MSS LOG2MSS PRINT2FILM PLOT2FILM \
       PRINT2PR PLOT2PR PRINT2FICHE PLOT2FICHE PRINT2HOST PLOT2HOST GPSCORR )
foreach out ($outlist)
  set input = `grep $out drxx.$proj`
  if ($status == 0) then
    echo $input >> $tgincl
    set result = $status
    if ($result != 0) then
      echo "Error $result creating intermediate file:  $tgincl"
      goto quit
    endif
  else
    echo "Error $result searching for $out in drxx.$proj file"
    goto quit
  endif
end
echo "/^#  Merge specific/r $tgincl" >! $tgen
set result = $status
if ($result != 0) then
  echo "Error $result creating file:  $tgen"
  goto quit
endif
if ($priority != none) echo "3s/econ/$priority/" >> $tgen
if ($priority == prem) echo "7s/2000/500/" >> $tgen
if ($priority == prem) echo "8s/3000/650/" >> $tgen
set result = $status
if ($result != 0) then
  echo "Error $result writing to file:  $tgen"
  goto quit
endif
sed -f $tgen  $template/gengpsxx >! $fgen
set result = $status
if ($result != 0) then
  echo "Error $result creating/replacing file:  $fgen"
  goto quit
endif
#
#  Build pdud file for this flight
echo Building the GENPRO data file for flight $flt$segment
if (-e $fpdud) echo $fpdud will be overwritten
#
#  define reference variables
#   qcref1  (on reference line of summary.$proj file)
set qcref1 = `echo $refinfo[6] | tr '[a-z]' '[A-Z]'`
#   qcref2  (on reference line of summary.$proj file)
set qcref2 = `echo $refinfo[7] | tr '[a-z]' '[A-Z]'`
#  define time label character string
#   timezone (3rd argument of TIMEZONE line in drxx.$proj file)
set timez = (`grep TIMEZONE drxx.$proj`)
shift timez
shift timez
#         
###################
#  To allow customization of this list of changes (for example, to change one
#   calibration for each flight), one may consider changing these in-line sed
#   commands to be lines in a sed command file.  (See the conv script.  Don't
#   forget to clean up afterwards.)  Then, another "custom modification" file
#   can be used to customize things.  To get the file merged into the sed
#   command file, execute a hand-written customization script file from this
#   one (check for its existence, of course).
###################
#
sed -e "/drxx/r $tdr" \
    -e "s/flushpxx/$flushp/" \
    -e "s/projnoxx/$proj/" \
    -e "s/qcref1xx/$qcref1/" \
    -e "s/qcref2xx/$qcref2/" \
    -e "s/lonxx/$xlon/" \
    -e "s/latxx/$xlat/" \
    -e "/statxx/r $tsnp" \
    -e "/pltxx/r $tsnp" \
    -e "/prtxx/r $tsnp" \
    -e "s/timezonexx/$timez/" \
    -e "s/astgxx/$astg/" \
    -e "s/O3Fxx/$con1/" \
    -e "s/OPHA1xx/$con2/" \
    -e "s/OPHA2xx/$con3/" \
    $pdud >! $fpdud
set result = $status
if ($result != 0) then
  echo Error $result when editing $pdud to create $fpdud
  goto quit
endif
#
#  Build gpsdata file for this flight
echo Building the GPScorr data file for flight $flt$segment
if (-e $fdat) echo $fdat will be overwritten
echo ";" >! $fdat
echo "; \!GPS Correction software control file for $flt${segment}\! ;" >> $fdat
echo "; \!Semicolons are important for terminating the input attributes\! ;" >> $fdat
echo ";" >> $fdat
echo "grab:all;" >> $fdat
echo "fix_winds;" >> $fdat
if ($turbrt == "LRT") then
  echo "low_rate;" >> $fdat
else
  echo "high_rate;" >> $fdat
 endif
echo "quit;" >> $fdat
echo ";" >> $fdat
#
set result = $status
if ($result != 0) then
  echo Error $result when creating $fdat
  goto quit
endif
#
echo " "
echo "Job $fgen is ready for shavano"
retry:
echo -n "Do you wish to submit it now ? (y/n/q) ([r]=y) "
set stat=0
set subm = $<
if ($subm == "") set subm = y
switch ($subm)
  case [Yy]:
    set seqn = `nrnet shjob $fgen`
    set result = $status
    if ($result == 0) then
      echo "shavano job $fgen has been submitted"
      echo $seqn
      if (-e $SUBMITLOG) then
        echo -n "Comment for joblog file ? "
        set comment = $<
        echo "`date` shavano job $fgen, $seqn, $comment" >> $SUBMITLOG
      endif
    else
      echo $seqn
      echo "Error $result when submitting job $fgen to shavano"
      set stat=3
    endif
    breaksw
  case [NnQq]:
    echo "Job abandoned.  Files $fgen and $fpdud will be saved."
    breaksw
  default:
    goto retry
endsw
#
cleanup:
if (-e $tdr) /bin/rm $tdr >& /dev/null
if (-e $tgen) /bin/rm $tgen >& /dev/null
if (-e $tsnp) /bin/rm $tsnp >& /dev/null
if (-e $tgincl) /bin/rm $tgincl >& /dev/null
exit $stat
#
abort:
onintr -
set stat=2
echo
echo " - aborting"
if ($clean == 1) goto cleanup
#
quit:
onintr -
echo "  Quitting"
set stat=1
if ($clean == 1) goto cleanup
exit $stat
