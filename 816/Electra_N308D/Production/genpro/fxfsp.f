
      BLOCK DATA
      COMMON /SETUP/size(16,4),A(20,20),PHA(16,4),DOF,BDIAM,
     $TAUR,TAUSLW,TAUFST,MROW,NCOL,XDEL,YDEL
      COMMON /INVRT/RSPNS,SIZES,TRNSMN,TRNSAV,SPECM,SPECA,SPCEST,EPS,
     1BMFRC,XF,SIGMA,A0,A1,A2,NSMTH,MKSPC
      REAL RSPNS(15,15),SIZES(50,15),TRNSMN(50,15),
     1BMFRC(15),TRNSAV(15),SPECM(15),SPECA(15),SPCEST(15),
     2EPS(15),XF(15)
c set MKSPC to 0    --cc
      DATA MKSPC/0/
C THESE ARE THE INTENSITY MAP VALUES FOR THE FSSP LASER
      DATA ((A(I,J),I=1,18),J=1,4)/
     $5.,5.,5.,5.,5.,6.,6.,6.,6.,6.,6.,6.,6.,6.,5.,5.,5.,5.,
     $5.,5.,5.,6.,6.,8.,10.,15.,17.,16.,13.,10.,7.,6.,6.,6.,5.,5.,
     $5.,5.,6.,7.,11.,20.,30.,40.,42.,39.,35.,28.,18.,10.,6.,6.,5.,5.,
     $5.,6.,7.,11.,26.,44.,47.,47.,43.,49.,48.,47.,36.,23.,11.,6.,6.,5./
      DATA ((A(I,J),I=1,18),J=5,8)/
     $5.,6.,9.,25.,44.,52.,59.,57.,68.,60.,56.,58.,44.,42.,24.,9.,6.,6.,
     $6.,8.,19.,40.,51.,58.,57.,72.,61.,61.,63.,64.,50.,57.,37.,17.,7.,
     $6,
     $6.,9.,21.,43.,48.,61.,66.,69.,72.,78.,71.,68.,51.,45.,43.,23.,9.,
     $6.,
     $6.,11.,30.,50.,69.,60.,74.,59.,74.,84.,70.,65.,56.,51.,55.,31.,
     $11.,6./
      DATA ((A(I,J),I=1,18),J=9,12)/
     $6.,14.,43.,54.,51.,63.,63.,78.,76.,78.,68.,66.,70.,49.,48.,34.,
     $11.,6.,
     $6.,15.,38.,58.,56.,58.,72.,63.,85.,80.,77.,62.,69.,59.,46.,27.,
     $10.,6.,
     $6.,12.,33.,48.,52.,57.,61.,62.,74.,71.,74.,58.,60.,54.,42.,20.,
     $8.,6.,
     $6.,9.,23.,49.,54.,55.,73.,66.,70.,74.,57.,55.,51.,47.,39.,18.,
     $7.,6./
      DATA ((A(I,J),I=1,18),J=13,16)/
     $6.,7.,16.,39.,50.,57.,60.,61.,58.,72.,67.,51.,50.,43.,22.,10.,
     $6.,5.,
     $6.,6.,9.,18.,37.,49.,52.,54.,56.,52.,43.,52.,46.,30.,15.,7.,6.,5.,
     $5.,6.,6.,9.,16.,29.,48.,48.,45.,51.,52.,39.,24.,13.,7.,6.,6.,5.,
     $5.,5.,6.,6.,8.,12.,19.,23.,25.,31.,28.,17.,10.,7.,6.,6.,5.,5./
      DATA ((A(I,J),I=1,18),J=17,18)/
     $5.,5.,5.,6.,6.,6.,7.,9.,10.,10.,9.,7.,6.,6.,5.,5.,5.,5.,
     $5.,5.,5.,5.,6.,6.,6.,6.,6.,6.,6.,6.,6.,5.,5.,5.,5.,5./
C
C    THESE PHA VALUES ARE FOR THE FOUR RANGES OF THE FSSP
      DATA PHA/
     $40.,190.,350.,540.,760.,1000.,1300.,1750.,2250.,2900.,3600.,
     $4400.,5200.,6000.,7000.,7800.,
     $92.,280.,500.,740.,1020.,1300.,1650.,2000.,2400.,2950.,3500.,
     $4100.,4900.,5800.,6800.,7800.,
     $90.,380.,740.,1120.,1550.,1950.,2450.,2950.,3500.,4000.,4600.,
     $5200.,5800.,6600.,7200.,7800.,
     $50.,289.,682.,1129.,1616.,2133.,2682.,3227.,3823.,4425.,5078.,
     $5714.,5906.,6526.,7156.,7800./
C
C    THESE SIZE CHANNEL VALUES ARE NOMINAL PMS VALUES.
      DATA size/
     $2.0,5.0,8.0,11.,14.,17.,20.,23.,26.,29.,32.,35.,38.,41.,44.,47.,
     $2.,4.,6.,8.,10.,12.,14.,16.,18.,20.,22.,24.,26.,28.,30.,32.,
     $1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.,
     $.5,1.,1.5,2.,2.5,3.,3.5,4.,4.5,5.,5.5,6.,6.5,7.,7.5,8.0/
C    BEAM DIAMETER FOR RAF FSSP
      DATA BDIAM/0.18/,DOF/2.7/
C    ELECTRONIC RESPONSE TIME OF PROBE
      DATA TAUR/0.60/
C    THESE ARE NUMBER OF ROWS,COLUMNS, AND LENGTH INCREMENTS FOR THE
C    MAPPED RAF PROBE
      DATA MROW/18/,NCOL/18/,XDEL/.01/,YDEL/.01/
C    SMOOTHING COEFFICIENTS, PRESENTLY SET FOR NO SMOOTHING
      DATA A0/0.0/,A1/.0/,A2/0.0/
C    NUMBER OF TIMES TO SMOOTH SET TO 0
      DATA NSMTH/0/
      END
C     SIZE     -  THESE ARE THE SIZE THRESHOLDS FOR THE FOUR RANGES OF
C                 THE FSSP
C     A        -  THIS ARRAY CONTAINS THE INTENSITY DISTRIBUTION OF THE
C                 FSSP LASER BEAM
C     PHA      -  THESE ARE THE PULSE HEIGHT ANALYZER VOLTAGES OF THE
C                 FOUR RANGES OF THE FSSP
C     DOF      -  THIS IS THE FSSP DEPTH-OF-FIELD (MM)
C     BDIAM    -  THIS IS THE FSSP BEAM DIAMETER
C     TAUR     -  THIS IS THE TIME RESPONSE OF THE FSSP ELECTRONICS
C     TAUSLW   -  THIS IS THE FSSP SLOW RESET DELAY TIME
C     TAUFST   -  THIS IS THE FSSP FAST RESET DELAY TIME
C     NROW     -  THIS IS THE M NUMBER OF PATHS INTENSITY-MAPPED
C                 THROUGH THE BEAM
C     NCOL     -  THIS IS THE NUMBER OF DATA POINTS ALONG EACH PATH
C     XDEL     -  THIS IS THE DISTANCE BETWEEN EACH OF THE N DATA
C                 POINTS
C     YDEL     -  THIS THE DISTANCE BETWEEN EACH OF THE M PATHS
C                 MAPPED THROUGH THE BEAM. BDIAM = (MROW)(YDEL)
C                 IS A NECCESSARY CONDITION.
C
C THE COMMON BLOCK /INVRT/ CONTAINS VARIABLES THAT ARE USED BY THE
C SUBROUTINE FXFSP AND RETURNS INFORMATION ABOUT THE CORRECTED SPECTRA.
C THESE VARIABLES AND THEIR PURPOSE ARE AS FOLLOWS:
C
C     RSPNS    -   THIS IS THE RESPONSE MATRIX GENERATED BY THE
C                  SUBROUTINE 'VBIAS' AND DESCRIBES THE WAY THE
C                  ACTUAL SPECTRA IS DISTORTED BY THE OPTICAL AND
C                  ELECTRONIC RESPONSE OF THE PROBE
C
C     SIZES    -   THIS MATRIX STORES THE VOLTAGE GENERATED AS
C                  PARTICLES OF EACH SIZE CLASS PASS THROUGH EACH
C                  OF THE MAPPED PATHS THROUGH THE BEAM.
C
C     TRNSMN   -   THIS MATRIX STORES THE CALCULATED TRANSIT TIME
C                  GENERATED AS PARTICLES OF EACH SIZE CLASS PASS
C                  THROUGH EACH OF THE MAPPED PATHS THROUGH THE
C                  BEAM
C
C     TRNSAV   -   THIS MATRIX STORES THE CALCULATED AVERAGE TRANSIT
C                  TIME FOR EACH SIZE CLASS.
C
C     SPECM    -   THIS MATRIX STORES THE ACTUAL MEASURED COUNTS IN
C                  EACH CHANNEL OF THE PROBE
C
C     SPECA    -   THIS MATRIX STORES THE ESTIMATE OF THE ACTUAL
C                  SIZE DISTRIBUTION
C
C     SPCEST   -   THIS MATRIX STORES THE ESTIMATE OF THE MEASURED
C                  DISTRIBUTION (PRODUCT OF RESPONSE MATRIX AND
C                  SPECA.
C
C     EPS      -   THIS MATRIX STORES THE VALUES OF THE ERROR
C                  WEIGHTING VALUES USED IN CALCULATING TOTAL ERROR
C                  BETWEEN SPECM AND SPCEST
C
C     BMFRC    -   THIS MATRIX STORES THE CALCULATED BEAM FRACTION
C                  VALUES FOR EACH SIZE CLASS.
C
C     XF       -   THIS MATRIX CONTAINS THE RATIO OF SPECM/SPCEST
C
C     SIGMA    -   THIS THE THE COMPUTED CHI SQUARE STATISTIC
C
C     A0,A1,A2 -   THESE ARE THE WEIGHTING COEFFICIENTS TO USE IN
C                  THE SMOOTHING ALGORITHM. PRESENTLY SET TO 1,0,0
C                  FOR NO SMOOTHING.
C
C     NSMTH    -   THIS SETS THE NUMBER OF TIMES TO CALL SMOOTHING
C                  ALGORITHM.
C
C     MKSPC    -   This is a flag that allows the correction routine
C                  to be used in reverse. When MKSPC=1, then the
C                  spectrum of input counts is assumed to be the actual
C                  spectrum, and the response matrix is used to create
C                  a hypothetical measured spectrum that will be put
C                  in the array SPECM
C
C THE FSSP CORRECTION PROCEDURE IS COMPOSED OF FIVE SUBROUTINES AND
C ONE FUNCTION
C THESE SUBROUTINES AND THEIR DESCRIPTIONS ARE AS FOLLOWS:
C     FXFSP     -   THIS IS THE PRIMARY SUBROUTINE CALLED FROM A MAIN
C                   PROGRAM. THIS PROGRAM GENERATES THE NORMALIZED
C                   INTENSITY MATRIX, CREATES THE MATRICES 'SIZES',
C                   'TRNSMN' AND 'TRNSAV' AND CALL THE REMAINING
C                   ROUTINES TO PERFORM THE DATA INVERSION.
C
C     VBIAS     -   THIS SUBROUTINE GENERATES THE RESPONSE MATRIX.
C
C     TWOMY     -   THIS SUBROUTINE ESTIMATES THE ACTUAL SIZE
C                   DISTRIBUTION USING THE MEASUREMENTS AND RESPONSE
C                   MATRIX. THE MODIFIED TWOMY METHOD IS USED AS
C                   DESCRIBED BY MARKOWSKI, 1987: "IMPROVING TWOMEY'S
C                   ALGORITHM FOR INVERSION OF AEROSOL DATA. AEROSOL
C                   SCIENCE AND TECHNOLOGY, VOL. 7, PP127-141.
C
C     SIG       -   THIS SUBROUTINE CALCULATES THE CHI SQUARE ERROR
C                   BETWEEN THE MEASURED AND ESTIMATED MEASURED SPECTRA
C
C     SMOOTH    -   THIS SUBROUTINE SMOOTHES THE ESTIMATED ACTUAL
C                   DISTRIBUTION
C
C     EXTRP     -   THIS FUNCTION EXTRAPOLATES A VALUE BETWEEN TWO
C                   POINTS USING  POWER FIT TO THE TWO POINTS.
      SUBROUTINE FXFSP(SPEC,BF,TAS,IRNG,IDELAY)
C THIS SUBROUTINE IS CALLED WITH:
C     SPEC      -   THE ARRAY CONTAINING THE 15 CHANNELS OF RAW COUNTS
C
C     BF        -   THE MEASURED BEAM FRACTION IF AVAILABLE
C
C     TAS       -   True airspeed
C
C     IRNG      -   FSSP range (1-4)
C     IDELAY    -   THIS FLAG IS SET TO 0 IF DELAY LINE OPTION NOT USED,
C                   SET TO 1 OTHERWISE.
C
      COMMON /SETUP/size(16,4),A(20,20),PHA(16,4),DOF,BDIAM,
     $TAUR,TAUSLW,TAUFST,MROW,NCOL,XDEL,YDEL
      COMMON /INVRT/RSPNS,SIZES,TRNSMN,TRNSAV,SPECM,SPECA,SPCEST,EPS,
     1BMFRC,XF,SIGMA,A0,A1,A2,NSMTH,MKSPC
      REAL RSPNS(15,15),SIZES(50,15),TRNSMN(50,15),
     1BMFRC(15),TRNSAV(15),SPECM(15),SPECA(15),SPCEST(15),
     2EPS(15),XF(15)
c      COMMON AVGTRN,SPD,LRNG,VACPT
      COMMON /NEWCOM/AVGTRN,SPD,LRNG,VACPT
      REAL SPEC(15),V(50),SPCLST(15),zmx(50)
      DATA IFRST/0/,NITER/100/
      IF (BF.LE.0.0)BF=0.62
      tot=0.0
c      print 3, spec
    3 format(' fxfsp - spec ',15f7.1)
      IF (MKSPC.EQ.0)THEN
         DO 5 I=1,15
            SPECM(I)=SPEC(I)
	    tot=tot+spec(i)
5        CONTINUE
      ELSE
         DO 6 I=1,15
            SPECA(I)=SPEC(I)
	    tot=tot+spec(i)
6        CONTINUE
      END IF
      if (tot.eq.0.0)return
      ITER=0
      SPD=TAS
      LRNG=IRNG
C
C IF THIS IS THE FIRST TIME THIS SUBROUTINE HAS BEEN CALLED, NORMALIZE
C THE INTENSITY MATRIX AND DETERMINE THE AVERAGE MAXIMUM INTENSITY
       IF (IFRST.EQ.0)THEN
          IFRST=1
          TASLST=0
          IRLST=-1
          IDLST=-1
          AMN=1.0E10
          AMX=0.0
          DO 20 I=1,MROW
             DO 10 J=1,NCOL
                AMN=AMIN1(AMN,A(J,I))
                AMX=AMAX1(AMX,A(J,I))
10           CONTINUE
20        CONTINUE
c          print 21
21        format(' print after statement no 20')
          DO 40 I=1,MROW
             DO 30 J=1,NCOL
                difmxn= amx - amn
                if(difmxn.eq.0.0) difmxn = 0.001
                A(J,I)=(A(J,I)-AMN)/difmxn
c                A(J,I)=(A(J,I)-AMN)/(AMX-AMN)
30           CONTINUE
40        CONTINUE
c          print 41
41        format(' print after statement no 40')
      END IF
C
C IF THE TRUE AIRSPEED SPECIFIED IN THE CALL TO THE SUBROUTINE
C IS MORE THAN 20% DIFFERENT THAN THE PREVIOUS CALL, OR IF THE
C RANGE HAS CHANGED SINCE THE LAST CALL, THEN COMPUTE THE
C SIZING AND TRANSIT TIME ARRAYS FOR ALL SIZE CLASSES PASSING THROUGH
C ALL PATHS THROUGH THE BEAM.
      IF (IDLST.NE.IDELAY)IRLST=LRNG+1
      IF ((IRLST.LT.0).OR.(TASLST.EQ.0)) IRLST=LRNG+1
      if(spd.eq.0.0) spd=0.001
      IF ((IRLST.NE.LRNG).OR.(ABS((SPD-TASLST)/SPD).GE.0.2))THEN
         VR=PHA(1,LRNG)
         T1=XDEL*1000/SPD
         DO 200 ICH=1,15
	    diam=(size(ich,irng)+size(ich+1,irng))/2000.
	    rad=diam/2.0
            if(xdel.eq.0.0) xdel=0.001
	    imax=mrow+int(diam/xdel+.5)
	    do 170 j=1,imax
		sizes(j,ich)=0.0
170	    continue
c          print 171
171        format(' print after statement no 170')
            TRNSAV(ICH)=0.0
	    do 175 j=1,imax
		trnsmn(j,ich)=0.0
175	    continue
c          print 176
176        format(' print after statement no 175')
            SN=0.0
C FIND THE MIDPOINT OF THIS CHANNEL AND ESTIMATE PHA VOLTAGE BY
C EXTRAPOLATING BETWEEN THE END POINTS.
            X0=ICH
            X1=ICH+1
            X2=.5*(X0+X1)
            Y0=PHA(ICH,LRNG)
            Y1=PHA(ICH+1,LRNG)
            V0MAX=EXTRP(X0,X1,Y0,Y1,X2)
	    yoff=-rad+ydel/2.0
	    joff=0
	    ytop=ydel*(mrow-.5) + rad
            xtop=xdel*(ncol-0.5)+rad
6000	    if (yoff.le.ytop)then
c          print 6001
6001        format(' print after statement no 6000')
	       joff=joff+1
	       xoff=-rad+.5*xdel
	       ioff=0
	       jfrst=0
	       xdis=0
               T=0.0
               T0=0.0
               VMX=0.0
               VLAST=.00001
5500	       if (xoff.le.xtop)then
c          print 5501
5501        format(' print after statement no 5500')
		  ioff=ioff+1
		  ixfrst=0
c Calculate the integrated intensity profile for that portion of the particle
c in the beam over all the intersected laser beam intensity points
    		  x=xoff-rad+.5*xdel
		  ia=0
		  sumi=0.0
5400  		  if ((x.lt.xoff+rad).or.(ixfrst.eq.0))then
c          print 5401
5401        format(' print after statement no 5400')
		     ixfrst=1
                     if(xdel.eq.0.0) xdel=0.001
		     ix=int(x/xdel)+1
		     if ((ix.gt.0).and.(ix.le.ncol))then
			y0=rad**2-(x-xoff)**2
			if (y0.ge.0)then
			   y1=yoff+sqrt(y0)
			   y0=yoff-sqrt(y0)
			else
			   y0=yoff
			   y1=yoff
			end if
			if (diam.lt.(2*xdel))then
				y0=yoff
				y1=yoff
			end if
                        if(ydel.eq. 0.0) ydel=0.001
			iy0=int(y0/ydel)
			iy1=int(y1/ydel)
			if (iy0.lt.1)iy0=1
			if (iy1.gt.mrow)iy1=mrow
			if (iy1.gt.1)then
			   ia=ia+iy1-iy0+1
			   do 5300 ic=iy0,iy1
				sumi=sumi+a(ic,ix)
5300			  continue
c          print 5301
5301        format(' print after statement no 5300')
			end if
		    end if
		    x=x+xdel
		    goto 5400
		  end if
c Now adjust summed up intensities by the fraction of the area of the particle
c actually in the beam
		  if (diam.gt.xdel)then
                     if(ia.eq.0) ia=1
			if (ia.gt.0)sumi=sumi/ia
		  end if
C CALCULATE THE INTENSITY AT THIS POINT, ADJUSTED WITH THE AVERAGE
C INTENSITY CALCULATED ABOVE.
5800              Z=sumi*V0MAX
                  IF (JFRST.EQ.0)THEN
                        JFRST=1
C ADJUST FOR RESPONSE TIME
                        if(taur.eq. 0.0) taur=0.001
                        VOUT=Z*(1.0-EXP(-T1/TAUR))
                        T=T1
                  ELSE
                        XDIS=XDIS+XDEL
                        if(spd.eq. 0.0) spd=0.001
                        T=XDIS*1000./SPD
                        C=Z-VLAST
                        if(taur.eq.0.0) taur = 0.001
                        VOUT=VLAST + C * (1.0-EXP(-T1/TAUR))
                  END IF
                  VLAST=VOUT
		  v(ioff)=vout
C CHECK FOR THE START OF THE TRANSIT GATE IF THE DELAY LINE IS NOT
C INSTALLED.
                  IF ((IDELAY.EQ.0).AND.(VOUT.GE.VR))THEN
                        IF (T0.EQ.0.0)T0=T
                  END IF
                  VMX=AMAX1(VMX,VOUT)
		  xoff=xoff+xdel
		  goto 5500
	      end if
              IF (VMX.LT.VR)then
		 t=0
                 SIZES(joff,ICH)=0
		 GOTO 100
	      end if
C STORE THE MAXIMUM VALUE FOUND DURING THIS PASS
                 SIZES(joff,ICH)=vmx
C AND SOLVE FOR THE END OF THE TRANSIT TIME
C IF THE DELAY LINE IF ACTIVATED, FIRST DETERMINE WHERE FULL WIDTH
C HALF MAXIMUM WAS AND CALCULATE ELAPSED TIME SINCE HALF MAXIMUM
C WAS EXCEEDED
               IF (IDELAY.EQ.1) THEN
                  if(spd.eq.0.0) spd=0.001
                  DO 80 J=1,ioff
                     IF (V(J).GE.0.5*VMX)GOTO 85
80                CONTINUE
c          print 81
81        format(' print after statement no 80')
85                T0= 1000.*J*XDEL/SPD
               END IF
                  if(vlast.eq. 0.0) vlast=0.001
                  if(vr.eq. 0.0) vr=0.1
                  if(vmx.eq.0.0) vmx=0.1
               IF (IDELAY.EQ.0)THEN
                  T2=-TAUR*ALOG(VR/VLAST) + T
               ELSE
                  T2=-TAUR*ALOG(.5*VMX/VLAST) + T
               END IF
               IF (T0.gt.0.0)then
C THE FSSP MEASURES THE TRANSIT TIME OF EACH INDIVIDUAL PARTICLE BY
C STORING THE NUMBER OF CLOCK PULSES FROM A 10 MHZ OSCILLATOR THAT
C OCCUR DURING THE TRANSIT PERIOD. THIS EFFECTIVELY ROUNDS OFF THE
C VALUE AND CAN BE IMPORTANT AT FASTER AIRSPEEDS. THIS EFFECT IS
C SIMULATED HERE
                  T=0.1+INT(.5+(T2-T0)*10)/10.
		  if (t.lt.0.5)t=0.5
                  TRNSMN(joff,ICH)=T
                  TRNSAV(ICH)=TRNSAV(ICH)+T
                  SN=SN+1
               END IF
100	       continue
c          print 101
101        format(' print after statement no 100')
c	       write(66,8830)ich,joff,yoff,sizes(joff,ich),t,sn
               yoff=yoff+ydel
8830	format(2i3,3f7.2,f4.0)
	       goto 6000
	    end if
            IF (SN.GT.0.0)THEN
               if(sn.eq.0.0) sn=0.001
               TRNSAV(ICH)=TRNSAV(ICH)/SN
            ELSE
               TRNSAV(ICH)=0.0
            END IF
200      CONTINUE
c          print 201
201        format(' print after statement no 200')
      END IF
          TASLST=TAS
          IRLST=IRNG
          IDLST=IDELAY
C IF THIS ROUTINE IS BEING CALLED IN ORDER TO CREATE AN ESTIMATED
C MEASURED DISTRIBUTION FROM AN ACTUAL DISTRIBUTION, GENERATE
C THE RESPONSE MATRIX, THEN CREATE AN ESTIMATE OF THE MEASURED
C DISTRIBUTION BEFORE CLEARING TEST FLAG AND CONTINUING NORMALLY.
      IF (MKSPC.GT.0)THEN
         DO 150 I=1,15
            DO 140 J=1,15
               RSPNS(I,J)=0.0
140         CONTINUE
150      CONTINUE
c          print 151
151        format(' print after statement no 150')
         CALL VBIAS
         CALL SIG
         DO 205 I=1,15
            SPECM(I)=SPCEST(I)
205      CONTINUE
         MKSPC=0
      ELSE
      END IF
C AS A FIRST GUESS OF THE ACTUAL DISTRIBUTION, SET THE ESTIMATED
C SPECTRUM EQUAL TO 25% of two channels smaller and 75% of one channel
c smaller, and divide by the beam fraction
      DO 210 I=15,1,-1
	 if (i.lt.3)then
		speca(i)=0.05*specm(i)
	 else
                if(bf.eq.0.0) bf=0.001
         	SPECA(I)=(0.25*SPECM(I-2)+0.75*specm(i-1))/BF
	 end if
         SPCLST(I)=SPECA(I)
210   CONTINUE
c          print 211
211        format(' print after statement no 210')
C BEGIN THE ITERATION LOOP TO DETERMINE THE REAL DISTRIBUTION
      SIGLST=1.0E32
      DO 400 ITER=1,NITER
         DO 250 I=1,15
            DO 240 J=1,15
               RSPNS(I,J)=0.0
240         CONTINUE
250      CONTINUE
C CALL THE SUBROUTINE THAT CALCULATES RESPONSE MATRIX
	tot=0.0
	do 251 i=1,15
	   tot=tot+speca(i)
251	continue
	if (tot.eq.0)goto 400
         CALL VBIAS
C THEN CALL INVERSION ROUTINE
         CALL TWOMY
C BEFORE CONTINUING FURTHER, SEE IF SOLUTION CONVERGED, IF NOT
C THEN EXIT AFTER SETTING IDELAY=-1
         IF (SIGMA.LT.0.0)THEN
            IDELAY=-1
            RETURN
         END IF
C THIS NEW ESTIMATE OF THE ACTUAL DISTRIBUTION MUST BE USED TO
C ESTIMATE A NEW AVERAGE TRANSIT TIME, HENCE NEW BEAM FRACTIONS,
C AND THUS A NEW RESPONSE MATRIX. IF THE VELOCITY ACCEPTANCE FRACTION
C DOES NOT CHANGE FROM THE PREVIOUS AMOUNT BY MORE THAN 1%, THEN
C END ITERATIONS
         if(siglst.eq. 0.0) siglst= 0.001
         DF=ABS((SIGMA-SIGLST)/SIGLST)
C IF THE ERROR THIS TIME THROUGH IS GREATER THAN PREVIOUS TIME, THEN
C EXIT SUBROUTINE AFTER RESTORING PREVIOUS SPECTRUM, ALSO EXIT IF
C SIGMA IS <.1 OR CHANGE IN SIGMA LESS THAN 1%.
         IF (SIGMA.LE.0.1)GOTO 500
         IF ((SIGMA.GE.SIGLST).OR.(DF.LE..01))THEN
            DO 260 I=1,15
               SPECA(I)=SPCLST(I)
260         CONTINUE
            GOTO 500
         ELSE
            SIGLST=SIGMA
            DO 270 I=1,15
               SPCLST(I)=SPECA(I)
270         CONTINUE
         END IF
C CONTINUE ITERATING SINCE THIS NEW ESTIMATE OF THE SPECTRUM MUST BE
C USED TO COMPUTE A NEW BEAM ACCEPTANCE FRACTION FOR EACH CHANNEL AND
C THUS A NEW RESPONSE MATRIX.
400   CONTINUE
c          print 401
401        format(' print after statement no 400')
C REPLACE THE OLD DISTRIBUTION WITH THE NEW ESTIMATE.
500   DO 510 I=1,15
         SPEC(I)=SPECA(I)
510   CONTINUE
c      print 511, spec
511   format(' end of fxfsp-spec ',15f7.1)
      RETURN
      END
C SUBROUTINE VBIAS
C THIS SUBROUTINE GENERATES THE FSSP RESPONSE MATRIX TO BE USED IN
C DETERMINING THE ACTUAL SIZE DISTRIBUTION FROM MEASURED DISTRIBUTIONS
      SUBROUTINE VBIAS
      COMMON /SETUP/size(16,4),A(20,20),PHA(16,4),DOF,BDIAM,
     $TAUR,TAUSLW,TAUFST,MROW,NCOL,XDEL,YDEL
      COMMON /INVRT/RSPNS,SIZES,TRNSMN,TRNSAV,SPECM,SPECA,SPCEST,EPS,
     1BMFRC,XF,SIGMA,A0,A1,A2,NSMTH,MKSPC
      REAL RSPNS(15,15),SIZES(50,15),TRNSMN(50,15),
     1BMFRC(15),TRNSAV(15),SPECM(15),SPECA(15),SPCEST(15),
     2EPS(15),XF(15)
      COMMON /NEWCOM/AVGTRN,SPD,LRNG,VACPT
      TOT=0.0
      VACPT=0.0
      DO 10 I=1,15
         TOT=TOT+SPECA(I)
10    CONTINUE
      if (tot.eq.0)return
C THE AVERAGE TRANSIT TIME IS GENERATED AS THE AVERAGE OF THE TRANSIT
C TIME OF EACH SIZE CHANNEL WEIGHTED BY THE NUMBER OF COUNTS IN THAT
C SIZE CHANNEL.
      AVGTRN=0.0
      DO 20 I=1,15
       if(tot.eq.0.0) tot=0.001
         AVGTRN=AVGTRN+SPECA(I)*TRNSAV(I)/TOT
20    CONTINUE
C
C USE THIS AVERAGE TO DETERMINE THE BEAM FRACTION FOR EACH SIZE,
C I.E. FIND WHAT FRACTION OF THE BEAM DIAMETER A PARTICLE OF A
C PARTICULAR SIZE WILL HAVE A TRANSIT TIME THAT IS GREATER THAN OR
C EQUAL TO THE AVERAGE.
      DO 200 ICH=1,15
	 sz=(size(ich,lrng)+size(ich+1,lrng))/2000.
         if(ydel.eq.0.0) ydel=0.001
	 imax=mrow+int(.5+sz/ydel)
         if(mrow.eq.1) mrow=2
         if(sz.eq.0.0) sz=0.001
	 frc=ydel/(ydel*(mrow-1)+sz)
         DIS=0.0
c	 write(66,8628)((sizes(i,j),j=1,15),i=1,20)
8628	 format(20(15f5.0/))
         DO 100 IC=1,imax
C FIND WHAT SIZE CHANNEL THIS PARTICLE WOULD FALL IN WHEN PASSING
C THROUGH THIS CHORD OF THE BEAM AT THE GIVEN AIRSPEED.
            DO 50 J=1,16
               IF (SIZES(IC,ICH).LT. PHA(J,LRNG))GOTO 60
50          CONTINUE
60          J=J-1
            T=TRNSMN(IC,ICH)
            IF ((T.GT.AVGTRN).and.(j.gt.0)) THEN
               DIS=DIS+YDEL
               RSPNS(J,ICH)=RSPNS(J,ICH)+frc
c	       if (ich.eq.15)write(66,8611)ic,T,j,sizes(ic,ich),
c    $pha(j+1,lrng),rspns(j,ich)
8611	format(i3,f5.2,i3,3f10.4)
            ELSE
            END IF
100      CONTINUE
C TRANSLATE ACCEPTANCE DISTANCE INTO BEAM FRACTION
         if(bdiam.eq.0.0) bdiam=0.001
         BMFRC(ICH)=DIS/BDIAM
         if(tot.eq.0.0) tot=0.001
         VACPT=VACPT+SPECA(ICH)*BMFRC(ICH)/TOT
200   CONTINUE
c	 write(66,8294)bmfrc
8294	 format(15f5.3)
c	write(66,8488)avgtrn,trnsav,bmfrc,((trnsmn(i,j),j=1,15),i=1,imax)
8488	format(f8.3/15f5.2/15f5.2/24(15f5.2/))
c	write(66,8700)speca
c	do 300 i=1,15
c		write(66,8705)(rspns(i,j),j=1,15)
8705	format(15f5.2)
300	continue
8700	format(15f5.0)
      RETURN
      END
      SUBROUTINE TWOMY
C THIS SUBROUTINE ESTIMATES THE ACTUAL DISTRIBUTION USING THE RESPONSE
C MATRIX OF THE INSTRUMENT AND THE MEASURED DISTRIBUTION
      COMMON /SETUP/size(16,4),A(20,20),PHA(16,4),DOF,BDIAM,
     $TAUR,TAUSLW,TAUFST,MROW,NCOL,XDEL,YDEL
      COMMON /INVRT/RSPNS,SIZES,TRNSMN,TRNSAV,SPECM,SPECA,SPCEST,EPS,
     1BMFRC,XF,SIGMA,A0,A1,A2,NSMTH,MKSPC
      REAL RSPNS(15,15),SIZES(50,15),TRNSMN(50,15),
     1BMFRC(15),TRNSAV(15),SPECM(15),SPECA(15),SPCEST(15),
     2EPS(15),XF(15)
      COMMON /NEWCOM/AVGTRN,SPD,LRNG,VACPT
	real spclst(15)
      SIGLST=1.0E32
      RLST=1.0E10
      IFRST=0
C COMPUTE THE CORRECTION VECTORS AND CHI SQUARE STATISTIC
      DO 500 ITER=1,100
10    CALL SIG
      if(siglst.eq.0.0) siglst=0.001
      CHK=ABS((SIGMA-SIGLST)/SIGLST)
C GENERATE THE NEW ESTIMATE OF THE ACTUAL SPECTRA USING THE CORRECTION
C VECTORS
      DO 50 I=1,15
         SPCLST(I)=SPECA(I)
         SUM=1.0
         DO 30 J=1,15
            SUM=SUM + (XF(J)-1.0)*RSPNS(J,I)
30       CONTINUE
         SPECA(I)=SPCLST(I)*SUM
50       CONTINUE
C IF THE ERROR IS GREATER THAN ONE BUT STILL DECREASING, THEN REPEAT
C THIS STEP, OTHERWISE GO TO THE SMOOTHING STEP NEXT
      IF ((SIGMA.LE..5).OR.(CHK.LE..01).OR.(SIGMA.GT.SIGLST))THEN
         IF (SIGMA.GT.SIGLST)THEN
            DO 45 I=1,15
               SPECA(I)=SPCLST(I)
45          CONTINUE
         ELSE
         END IF
         IF (NSMTH.EQ.0)RETURN
C NOW EITHER SMOOTH THE ESTIMATED SPECTRA A SPECIFIC NUMBER OF TIMES,
C OR UNTIL THE CHI SQUARE IS WORSE THAN PREVIOUS TIME
         SIGLST=SIGMA
         DO 100 I=1,NSMTH
            CALL SMOOTH(R)
            CALL SIG
            IF (SIGMA.GT.SIGLST)GOTO 120
100      CONTINUE
120      IF (IFRST.EQ.0)THEN
            IFRST=1
            RLST=R
         ELSE
            if(rlst.eq.0.0) rlst=0.001
            DIFF =ABS((R-RLST)/RLST)
            IF ((DIFF.LT. .1).OR. (R.GT.RLST))RETURN
            RLST=R
         END IF
         SIGLST=1.0E32
      ELSE
      END IF
500   SIGLST=SIGMA
C SET SIGMA TO -1 TO SIGNIFY THAT SOLUTION DID NOT CONVERGE
      SIGMA=-1
      RETURN
      END
      SUBROUTINE SMOOTH(R)
C THIS SUBROUTINE SMOOTHS THE ESTIMATED SPECTRA WITH WEIGHTING FACTORS
C CONTAINED IN A0,A1, AND A2
      COMMON /SETUP/size(16,4),A(20,20),PHA(16,4),DOF,BDIAM,
     $TAUR,TAUSLW,TAUFST,MROW,NCOL,XDEL,YDEL
      COMMON /INVRT/RSPNS,SIZES,TRNSMN,TRNSAV,SPECM,SPECA,SPCEST,EPS,
     1BMFRC,XF,SIGMA,A0,A1,A2,NSMTH,MKSPC
      REAL RSPNS(15,15),SIZES(50,15),TRNSMN(50,15),
     1BMFRC(15),TRNSAV(15),SPECM(15),SPECA(15),SPCEST(15),
     2EPS(15),XF(15)
      COMMON /NEWCOM/AVGTRN,SPD,LRNG,VACPT
      REAL SPCTMP(15)
      DO 50 I=2,14
         SPCTMP(I)=A1*SPECA(I-1)+A0*SPECA(I)+A1*SPECA(I+1)
50    CONTINUE
      SPCTMP(1)=A0*SPECA(1)+A2*SPECA(2)
      SPCTMP(15)=A0*SPECA(15)+A2*SPECA(14)
      R=0
      DO 100 I=1,15
         SPECA(I)=SPCTMP(I)
         IF ((I.GT.1).AND.(I.LT.15))THEN
            R=R+ABS(SPECA(I+1)+SPECA(I-1)-2.0*SPECA(I))
         ELSE
         END IF
100   CONTINUE
      R=R/13.0
      RETURN
      END
      SUBROUTINE SIG
C THIS SUBROUTINE CALCULATES THE CORRECTION VECTORS AND THE CHI SQUARE
C STATISTIC
      COMMON /SETUP/size(16,4),A(20,20),PHA(16,4),DOF,BDIAM,
     $TAUR,TAUSLW,TAUFST,MROW,NCOL,XDEL,YDEL
      COMMON /INVRT/RSPNS,SIZES,TRNSMN,TRNSAV,SPECM,SPECA,SPCEST,EPS,
     1BMFRC,XF,SIGMA,A0,A1,A2,NSMTH,MKSPC
      REAL RSPNS(15,15),SIZES(50,15),TRNSMN(50,15),
     1BMFRC(15),TRNSAV(15),SPECM(15),SPECA(15),SPCEST(15),
     2EPS(15),XF(15)
      COMMON /NEWCOM/AVGTRN,SPD,LRNG,VACPT
      SIGMA=0.0
      DO 100 I=1,15
         SUMY=0.0
         DO 50 J=1,15
            SUMY=SUMY+RSPNS(I,J)*SPECA(J)
50       CONTINUE
         IF (SUMY.GT.0.0)THEN
            XF(I)=SPECM(I)/SUMY
         ELSE
            XF(I)=0
         END IF
         SPCEST(I)=SUMY
C SET THE ERROR WEIGHTING FACTOR TO 10%  OF THE MEASURED RAW COUNTS
         EPS(I)=.100*SPECM(I)
         IF (EPS(I).LT.1.0)EPS(I)=1.0
         SIGMA=SIGMA+((SPECM(I)-SPCEST(I))/EPS(I))**2
100   CONTINUE
      SIGMA=SIGMA/15.
      RETURN
      END
      FUNCTION EXTRP(X0,X1,Y0,Y1,X)
C THIS FUNCTION FITS POWER CURVE TO X0,X1,Y0,Y1 AND DETERMINES VALUE
C OF FUNCTION FOR INPUT VALUE OF X
       if(y0.eq.0.0) y0=0.001
       if(x0.eq.0.0) x0=0.001
       if(y1.eq.0.0) y1=0.1
       if(x1.eq.0.0) x1=0.1
c
      SLP=ALOG(Y1/Y0)/ALOG(X1/X0)
      XINT=EXP(ALOG(Y0)-SLP*ALOG(X0))
      EXTRP=XINT*X**SLP
      RETURN
      END
